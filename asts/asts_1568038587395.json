[
  [
    {
      "filePath": "./folder/anotherFolder/example3.js",
      "ast": {
        "type": "Program",
        "body": [
          {
            "type": "ImportDeclaration",
            "specifiers": [
              {
                "type": "ImportDefaultSpecifier",
                "local": {
                  "type": "Identifier",
                  "name": "baseDifference"
                }
              }
            ],
            "source": {
              "type": "Literal",
              "value": "./.internal/baseDifference.js",
              "raw": "'./.internal/baseDifference.js'"
            }
          },
          {
            "type": "ImportDeclaration",
            "specifiers": [
              {
                "type": "ImportDefaultSpecifier",
                "local": {
                  "type": "Identifier",
                  "name": "isArrayLikeObject"
                }
              }
            ],
            "source": {
              "type": "Literal",
              "value": "./isArrayLikeObject.js",
              "raw": "'./isArrayLikeObject.js'"
            }
          },
          {
            "type": "FunctionDeclaration",
            "id": {
              "type": "Identifier",
              "name": "without"
            },
            "params": [
              {
                "type": "Identifier",
                "name": "array"
              },
              {
                "type": "RestElement",
                "argument": {
                  "type": "Identifier",
                  "name": "values"
                }
              }
            ],
            "body": {
              "type": "BlockStatement",
              "body": [
                {
                  "type": "ReturnStatement",
                  "argument": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isArrayLikeObject"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "array"
                        }
                      ]
                    },
                    "consequent": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseDifference"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "array"
                        },
                        {
                          "type": "Identifier",
                          "name": "values"
                        }
                      ]
                    },
                    "alternate": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                }
              ]
            },
            "generator": false,
            "expression": false,
            "async": false
          },
          {
            "type": "ExportDefaultDeclaration",
            "declaration": {
              "type": "Identifier",
              "name": "without"
            }
          }
        ],
        "sourceType": "module",
        "comments": [
          {
            "type": "Block",
            "value": "*\n * Creates an array excluding all given values using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * **Note:** Unlike `pull`, this method returns a new array.\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...*} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see difference, union, unionBy, unionWith, xor, xorBy, xorWith\n * @example\n *\n * without([2, 1, 2, 3], 1, 2)\n * // => [3]\n "
          }
        ]
      }
    }
  ],
  {
    "filePath": "./folder/example1.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "every"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "predicate"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "index"
                            },
                            {
                              "type": "Identifier",
                              "name": "array"
                            }
                          ]
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": false,
                              "raw": "false"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Literal",
                  "value": true,
                  "raw": "true"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "every"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `predicate` returns truthy for **all** elements of `array`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index, array).\n *\n * **Note:** This method returns `true` for\n * [empty arrays](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty arrays.\n *\n * @since 5.0.0\n * @category Array\n * @param {Array} array The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * every([true, 1, null, 'yes'], Boolean)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./folder/example2.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "toString"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "toString"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "invert"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "forEach"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "key"
                                  }
                                }
                              }
                            ],
                            "kind": "let"
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": "!=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": null,
                                  "raw": "null"
                                }
                              },
                              "right": {
                                "type": "BinaryExpression",
                                "operator": "!=",
                                "left": {
                                  "type": "UnaryExpression",
                                  "operator": "typeof",
                                  "argument": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "toString"
                                    }
                                  },
                                  "prefix": true
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "function",
                                  "raw": "'function'"
                                }
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    "right": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "toString"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "call"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "value"
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "key"
                              }
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "invert"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an object composed of the inverted keys and values of `object`.\n * If `object` contains duplicate values, subsequent values overwrite\n * property assignments of previous values.\n *\n * @since 0.7.0\n * @category Object\n * @param {Object} object The object to invert.\n * @returns {Object} Returns the new inverted object.\n * @example\n *\n * const object = { 'a': 1, 'b': 2, 'c': 1 }\n *\n * invert(object)\n * // => { '1': 'c', '2': 'b' }\n "
        }
      ]
    }
  }
]