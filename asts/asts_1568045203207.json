[
  {
    "filePath": "./projects/lodash/.eslintrc.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ExpressionStatement",
          "expression": {
            "type": "AssignmentExpression",
            "operator": "=",
            "left": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "module"
              },
              "property": {
                "type": "Identifier",
                "name": "exports"
              }
            },
            "right": {
              "type": "ObjectExpression",
              "properties": [
                {
                  "type": "Property",
                  "key": {
                    "type": "Literal",
                    "value": "extends",
                    "raw": "'extends'"
                  },
                  "computed": false,
                  "value": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "Literal",
                        "value": "plugin:import/errors",
                        "raw": "'plugin:import/errors'"
                      }
                    ]
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false
                },
                {
                  "type": "Property",
                  "key": {
                    "type": "Literal",
                    "value": "plugins",
                    "raw": "'plugins'"
                  },
                  "computed": false,
                  "value": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "Literal",
                        "value": "import",
                        "raw": "'import'"
                      }
                    ]
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false
                },
                {
                  "type": "Property",
                  "key": {
                    "type": "Literal",
                    "value": "env",
                    "raw": "'env'"
                  },
                  "computed": false,
                  "value": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "es6",
                          "raw": "'es6'"
                        },
                        "computed": false,
                        "value": {
                          "type": "Literal",
                          "value": true,
                          "raw": "true"
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "node",
                          "raw": "'node'"
                        },
                        "computed": false,
                        "value": {
                          "type": "Literal",
                          "value": true,
                          "raw": "true"
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      }
                    ]
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false
                },
                {
                  "type": "Property",
                  "key": {
                    "type": "Literal",
                    "value": "parserOptions",
                    "raw": "'parserOptions'"
                  },
                  "computed": false,
                  "value": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "ecmaVersion",
                          "raw": "'ecmaVersion'"
                        },
                        "computed": false,
                        "value": {
                          "type": "Literal",
                          "value": 6,
                          "raw": "6"
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "sourceType",
                          "raw": "'sourceType'"
                        },
                        "computed": false,
                        "value": {
                          "type": "Literal",
                          "value": "module",
                          "raw": "'module'"
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "ecmaFeatures",
                          "raw": "'ecmaFeatures'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ObjectExpression",
                          "properties": [
                            {
                              "type": "Property",
                              "key": {
                                "type": "Literal",
                                "value": "impliedStrict",
                                "raw": "'impliedStrict'"
                              },
                              "computed": false,
                              "value": {
                                "type": "Literal",
                                "value": true,
                                "raw": "true"
                              },
                              "kind": "init",
                              "method": false,
                              "shorthand": false
                            },
                            {
                              "type": "Property",
                              "key": {
                                "type": "Literal",
                                "value": "objectLiteralDuplicateProperties",
                                "raw": "'objectLiteralDuplicateProperties'"
                              },
                              "computed": false,
                              "value": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                              },
                              "kind": "init",
                              "method": false,
                              "shorthand": false
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      }
                    ]
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false
                },
                {
                  "type": "Property",
                  "key": {
                    "type": "Literal",
                    "value": "rules",
                    "raw": "'rules'"
                  },
                  "computed": false,
                  "value": {
                    "type": "ObjectExpression",
                    "properties": [
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "array-bracket-spacing",
                          "raw": "'array-bracket-spacing'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": "never",
                              "raw": "'never'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "camelcase",
                          "raw": "'camelcase'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "properties",
                                    "raw": "'properties'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": "never",
                                    "raw": "'never'"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                }
                              ]
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "comma-dangle",
                          "raw": "'comma-dangle'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": "never",
                              "raw": "'never'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "curly",
                          "raw": "'curly'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": "all",
                              "raw": "'all'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "eol-last",
                          "raw": "'eol-last'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "indent",
                          "raw": "'indent'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": 2,
                              "raw": "2"
                            },
                            {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "SwitchCase",
                                    "raw": "'SwitchCase'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                }
                              ]
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "keyword-spacing",
                          "raw": "'keyword-spacing'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "max-len",
                          "raw": "'max-len'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "code",
                                    "raw": "'code'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": 180,
                                    "raw": "180"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                },
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "ignoreComments",
                                    "raw": "'ignoreComments'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": true,
                                    "raw": "true"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                },
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "ignoreRegExpLiterals",
                                    "raw": "'ignoreRegExpLiterals'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": true,
                                    "raw": "true"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                }
                              ]
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-else-return",
                          "raw": "'no-else-return'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-mixed-spaces-and-tabs",
                          "raw": "'no-mixed-spaces-and-tabs'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-multiple-empty-lines",
                          "raw": "'no-multiple-empty-lines'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-spaced-func",
                          "raw": "'no-spaced-func'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-trailing-spaces",
                          "raw": "'no-trailing-spaces'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-undef",
                          "raw": "'no-undef'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-unexpected-multiline",
                          "raw": "'no-unexpected-multiline'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-unused-vars",
                          "raw": "'no-unused-vars'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "args",
                                    "raw": "'args'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": "none",
                                    "raw": "'none'"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                },
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "vars",
                                    "raw": "'vars'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": "all",
                                    "raw": "'all'"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                }
                              ]
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "quotes",
                          "raw": "'quotes'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": "single",
                              "raw": "'single'"
                            },
                            {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "allowTemplateLiterals",
                                    "raw": "'allowTemplateLiterals'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": true,
                                    "raw": "true"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                },
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "avoidEscape",
                                    "raw": "'avoidEscape'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": true,
                                    "raw": "true"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                }
                              ]
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "semi",
                          "raw": "'semi'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": "never",
                              "raw": "'never'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "space-before-blocks",
                          "raw": "'space-before-blocks'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": "always",
                              "raw": "'always'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "space-before-function-paren",
                          "raw": "'space-before-function-paren'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": "never",
                              "raw": "'never'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "space-in-parens",
                          "raw": "'space-in-parens'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": "never",
                              "raw": "'never'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "space-unary-ops",
                          "raw": "'space-unary-ops'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "nonwords",
                                    "raw": "'nonwords'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": false,
                                    "raw": "false"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                },
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "overrides",
                                    "raw": "'overrides'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "ObjectExpression",
                                    "properties": []
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                }
                              ]
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "arrow-body-style",
                          "raw": "'arrow-body-style'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": "as-needed",
                              "raw": "'as-needed'"
                            },
                            {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "requireReturnForObjectLiteral",
                                    "raw": "'requireReturnForObjectLiteral'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": false,
                                    "raw": "false"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                }
                              ]
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "arrow-parens",
                          "raw": "'arrow-parens'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": "always",
                              "raw": "'always'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "arrow-spacing",
                          "raw": "'arrow-spacing'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "after",
                                    "raw": "'after'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": true,
                                    "raw": "true"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                },
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "before",
                                    "raw": "'before'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": true,
                                    "raw": "true"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                }
                              ]
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-class-assign",
                          "raw": "'no-class-assign'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-const-assign",
                          "raw": "'no-const-assign'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-dupe-class-members",
                          "raw": "'no-dupe-class-members'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-duplicate-imports",
                          "raw": "'no-duplicate-imports'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-new-symbol",
                          "raw": "'no-new-symbol'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-useless-rename",
                          "raw": "'no-useless-rename'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "no-var",
                          "raw": "'no-var'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "object-shorthand",
                          "raw": "'object-shorthand'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": "always",
                              "raw": "'always'"
                            },
                            {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "avoidQuotes",
                                    "raw": "'avoidQuotes'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": true,
                                    "raw": "true"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                },
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "ignoreConstructors",
                                    "raw": "'ignoreConstructors'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": false,
                                    "raw": "false"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                }
                              ]
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "prefer-arrow-callback",
                          "raw": "'prefer-arrow-callback'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "ObjectExpression",
                              "properties": [
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "allowNamedFunctions",
                                    "raw": "'allowNamedFunctions'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": false,
                                    "raw": "false"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                },
                                {
                                  "type": "Property",
                                  "key": {
                                    "type": "Literal",
                                    "value": "allowUnboundThis",
                                    "raw": "'allowUnboundThis'"
                                  },
                                  "computed": false,
                                  "value": {
                                    "type": "Literal",
                                    "value": true,
                                    "raw": "true"
                                  },
                                  "kind": "init",
                                  "method": false,
                                  "shorthand": false
                                }
                              ]
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "prefer-const",
                          "raw": "'prefer-const'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "prefer-rest-params",
                          "raw": "'prefer-rest-params'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "prefer-template",
                          "raw": "'prefer-template'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      },
                      {
                        "type": "Property",
                        "key": {
                          "type": "Literal",
                          "value": "template-curly-spacing",
                          "raw": "'template-curly-spacing'"
                        },
                        "computed": false,
                        "value": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Literal",
                              "value": "error",
                              "raw": "'error'"
                            },
                            {
                              "type": "Literal",
                              "value": "never",
                              "raw": "'never'"
                            }
                          ]
                        },
                        "kind": "init",
                        "method": false,
                        "shorthand": false
                      }
                    ]
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": false
                }
              ]
            }
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Line",
          "value": " 'valid-jsdoc': ['error']"
        },
        {
          "type": "Line",
          "value": " ECMAScript 6 rules"
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/Hash.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "HASH_UNDEFINED"
              },
              "init": {
                "type": "Literal",
                "value": "__lodash_hash_undefined__",
                "raw": "'__lodash_hash_undefined__'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ClassDeclaration",
          "id": {
            "type": "Identifier",
            "name": "Hash"
          },
          "superClass": null,
          "body": {
            "type": "ClassBody",
            "body": [
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "constructor"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "entries"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "init": {
                              "type": "UnaryExpression",
                              "operator": "-",
                              "argument": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                              },
                              "prefix": true
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "length"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": "==",
                                "left": {
                                  "type": "Identifier",
                                  "name": "entries"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": null,
                                  "raw": "null"
                                }
                              },
                              "consequent": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              },
                              "alternate": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "entries"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "length"
                                }
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "clear"
                            }
                          },
                          "arguments": []
                        }
                      },
                      {
                        "type": "WhileStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        },
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "entry"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "entries"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "index"
                                    }
                                  }
                                }
                              ],
                              "kind": "const"
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "set"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "entry"
                                    },
                                    "property": {
                                      "type": "Literal",
                                      "value": 0,
                                      "raw": "0"
                                    }
                                  },
                                  {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "entry"
                                    },
                                    "property": {
                                      "type": "Literal",
                                      "value": 1,
                                      "raw": "1"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "constructor",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "clear"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "__data__"
                            }
                          },
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "create"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "delete"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "init": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "has"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "key"
                                  }
                                ]
                              },
                              "right": {
                                "type": "UnaryExpression",
                                "operator": "delete",
                                "argument": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "__data__"
                                    }
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "key"
                                  }
                                },
                                "prefix": true
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "-=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "consequent": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          }
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Identifier",
                          "name": "result"
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "get"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__data__"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "data"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "key"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "HASH_UNDEFINED"
                            }
                          },
                          "consequent": {
                            "type": "Identifier",
                            "name": "undefined"
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "result"
                          }
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "has"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__data__"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "BinaryExpression",
                          "operator": "!==",
                          "left": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key"
                            }
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "undefined"
                          }
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "set"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    },
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__data__"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "+=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "ThisExpression"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "has"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            }
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key"
                            }
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            },
                            "consequent": {
                              "type": "Identifier",
                              "name": "HASH_UNDEFINED"
                            },
                            "alternate": {
                              "type": "Identifier",
                              "name": "value"
                            }
                          }
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ThisExpression"
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              }
            ]
          }
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "Hash"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to stand-in for `undefined` hash values. "
        },
        {
          "type": "Block",
          "value": "*\n   * Creates a hash object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Removes all key-value entries from the hash.\n   *\n   * @memberOf Hash\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Removes `key` and its value from the hash.\n   *\n   * @memberOf Hash\n   * @param {Object} hash The hash to modify.\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Gets the hash value for `key`.\n   *\n   * @memberOf Hash\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Checks if a hash value for `key` exists.\n   *\n   * @memberOf Hash\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Sets the hash `key` to `value`.\n   *\n   * @memberOf Hash\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the hash instance.\n   "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/ListCache.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "assocIndexOf"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./assocIndexOf.js",
            "raw": "'./assocIndexOf.js'"
          }
        },
        {
          "type": "ClassDeclaration",
          "id": {
            "type": "Identifier",
            "name": "ListCache"
          },
          "superClass": null,
          "body": {
            "type": "ClassBody",
            "body": [
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "constructor"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "entries"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "init": {
                              "type": "UnaryExpression",
                              "operator": "-",
                              "argument": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                              },
                              "prefix": true
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "length"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": "==",
                                "left": {
                                  "type": "Identifier",
                                  "name": "entries"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": null,
                                  "raw": "null"
                                }
                              },
                              "consequent": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              },
                              "alternate": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "entries"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "length"
                                }
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "clear"
                            }
                          },
                          "arguments": []
                        }
                      },
                      {
                        "type": "WhileStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        },
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "entry"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "entries"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "index"
                                    }
                                  }
                                }
                              ],
                              "kind": "const"
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "set"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "entry"
                                    },
                                    "property": {
                                      "type": "Literal",
                                      "value": 0,
                                      "raw": "0"
                                    }
                                  },
                                  {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "entry"
                                    },
                                    "property": {
                                      "type": "Literal",
                                      "value": 1,
                                      "raw": "1"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "constructor",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "clear"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "__data__"
                            }
                          },
                          "right": {
                            "type": "ArrayExpression",
                            "elements": []
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "delete"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__data__"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "assocIndexOf"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "data"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "Identifier",
                            "name": "index"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "lastIndex"
                            },
                            "init": {
                              "type": "BinaryExpression",
                              "operator": "-",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "data"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "length"
                                }
                              },
                              "right": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "==",
                          "left": {
                            "type": "Identifier",
                            "name": "index"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "lastIndex"
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "data"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "pop"
                                  }
                                },
                                "arguments": []
                              }
                            }
                          ]
                        },
                        "alternate": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "data"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "splice"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "index"
                                  },
                                  {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "UpdateExpression",
                          "operator": "--",
                          "argument": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          },
                          "prefix": true
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Literal",
                          "value": true,
                          "raw": "true"
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "get"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__data__"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "assocIndexOf"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "data"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "<",
                            "left": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          },
                          "consequent": {
                            "type": "Identifier",
                            "name": "undefined"
                          },
                          "alternate": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "data"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            },
                            "property": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "has"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "BinaryExpression",
                          "operator": ">",
                          "left": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "assocIndexOf"
                            },
                            "arguments": [
                              {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "ThisExpression"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "__data__"
                                }
                              },
                              {
                                "type": "Identifier",
                                "name": "key"
                              }
                            ]
                          },
                          "right": {
                            "type": "UnaryExpression",
                            "operator": "-",
                            "argument": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            },
                            "prefix": true
                          }
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "set"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    },
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__data__"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "assocIndexOf"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "data"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "Identifier",
                            "name": "index"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "UpdateExpression",
                                "operator": "++",
                                "argument": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "size"
                                  }
                                },
                                "prefix": true
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "data"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "push"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "ArrayExpression",
                                    "elements": [
                                      {
                                        "type": "Identifier",
                                        "name": "key"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "value"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "alternate": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "data"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "index"
                                    }
                                  },
                                  "property": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ThisExpression"
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              }
            ]
          }
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "ListCache"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n   * Creates an list cache object.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Removes all key-value entries from the list cache.\n   *\n   * @memberOf ListCache\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Removes `key` and its value from the list cache.\n   *\n   * @memberOf ListCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Gets the list cache value for `key`.\n   *\n   * @memberOf ListCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Checks if a list cache value for `key` exists.\n   *\n   * @memberOf ListCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Sets the list cache `key` to `value`.\n   *\n   * @memberOf ListCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the list cache instance.\n   "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/MapCache.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "Hash"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./Hash.js",
            "raw": "'./Hash.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "getMapData"
          },
          "params": [
            {
              "type": "ObjectPattern",
              "properties": [
                {
                  "type": "Property",
                  "key": {
                    "type": "Identifier",
                    "name": "__data__"
                  },
                  "computed": false,
                  "value": {
                    "type": "Identifier",
                    "name": "__data__"
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true
                }
              ]
            },
            {
              "type": "Identifier",
              "name": "key"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "data"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "__data__"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isKeyable"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "key"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "data"
                    },
                    "property": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "Identifier",
                            "name": "key"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Literal",
                          "value": "string",
                          "raw": "'string'"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": "string",
                        "raw": "'string'"
                      },
                      "alternate": {
                        "type": "Literal",
                        "value": "hash",
                        "raw": "'hash'"
                      }
                    }
                  },
                  "alternate": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "data"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "map"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isKeyable"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "type"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "==",
                          "left": {
                            "type": "Identifier",
                            "name": "type"
                          },
                          "right": {
                            "type": "Literal",
                            "value": "string",
                            "raw": "'string'"
                          }
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "==",
                          "left": {
                            "type": "Identifier",
                            "name": "type"
                          },
                          "right": {
                            "type": "Literal",
                            "value": "number",
                            "raw": "'number'"
                          }
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "type"
                        },
                        "right": {
                          "type": "Literal",
                          "value": "symbol",
                          "raw": "'symbol'"
                        }
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "type"
                      },
                      "right": {
                        "type": "Literal",
                        "value": "boolean",
                        "raw": "'boolean'"
                      }
                    }
                  },
                  "consequent": {
                    "type": "BinaryExpression",
                    "operator": "!==",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Literal",
                      "value": "__proto__",
                      "raw": "'__proto__'"
                    }
                  },
                  "alternate": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ClassDeclaration",
          "id": {
            "type": "Identifier",
            "name": "MapCache"
          },
          "superClass": null,
          "body": {
            "type": "ClassBody",
            "body": [
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "constructor"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "entries"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "init": {
                              "type": "UnaryExpression",
                              "operator": "-",
                              "argument": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                              },
                              "prefix": true
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "length"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": "==",
                                "left": {
                                  "type": "Identifier",
                                  "name": "entries"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": null,
                                  "raw": "null"
                                }
                              },
                              "consequent": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              },
                              "alternate": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "entries"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "length"
                                }
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "clear"
                            }
                          },
                          "arguments": []
                        }
                      },
                      {
                        "type": "WhileStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        },
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "entry"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "entries"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "index"
                                    }
                                  }
                                }
                              ],
                              "kind": "const"
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "set"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "entry"
                                    },
                                    "property": {
                                      "type": "Literal",
                                      "value": 0,
                                      "raw": "0"
                                    }
                                  },
                                  {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "entry"
                                    },
                                    "property": {
                                      "type": "Literal",
                                      "value": 1,
                                      "raw": "1"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "constructor",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "clear"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "__data__"
                            }
                          },
                          "right": {
                            "type": "ObjectExpression",
                            "properties": [
                              {
                                "type": "Property",
                                "key": {
                                  "type": "Literal",
                                  "value": "hash",
                                  "raw": "'hash'"
                                },
                                "computed": false,
                                "value": {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Hash"
                                  },
                                  "arguments": []
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                              },
                              {
                                "type": "Property",
                                "key": {
                                  "type": "Literal",
                                  "value": "map",
                                  "raw": "'map'"
                                },
                                "computed": false,
                                "value": {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Map"
                                  },
                                  "arguments": []
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                              },
                              {
                                "type": "Property",
                                "key": {
                                  "type": "Literal",
                                  "value": "string",
                                  "raw": "'string'"
                                },
                                "computed": false,
                                "value": {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Hash"
                                  },
                                  "arguments": []
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "delete"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "getMapData"
                                  },
                                  "arguments": [
                                    {
                                      "type": "ThisExpression"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "key"
                                    }
                                  ]
                                },
                                "property": {
                                  "type": "Literal",
                                  "value": "delete",
                                  "raw": "'delete'"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "-=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "consequent": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          }
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Identifier",
                          "name": "result"
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "get"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "getMapData"
                              },
                              "arguments": [
                                {
                                  "type": "ThisExpression"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "get"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "key"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "has"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "getMapData"
                              },
                              "arguments": [
                                {
                                  "type": "ThisExpression"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "has"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "key"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "set"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    },
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "getMapData"
                              },
                              "arguments": [
                                {
                                  "type": "ThisExpression"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "size"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "data"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "size"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "set"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "key"
                            },
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "+=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "==",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "data"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "size"
                                }
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "size"
                              }
                            },
                            "consequent": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            }
                          }
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ThisExpression"
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              }
            ]
          }
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "MapCache"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n "
        },
        {
          "type": "Block",
          "value": "*\n   * Creates a map cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Removes all key-value entries from the map.\n   *\n   * @memberOf MapCache\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Removes `key` and its value from the map.\n   *\n   * @memberOf MapCache\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Gets the map value for `key`.\n   *\n   * @memberOf MapCache\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Checks if a map value for `key` exists.\n   *\n   * @memberOf MapCache\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Sets the map `key` to `value`.\n   *\n   * @memberOf MapCache\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the map cache instance.\n   "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/SetCache.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "MapCache"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./MapCache.js",
            "raw": "'./MapCache.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "HASH_UNDEFINED"
              },
              "init": {
                "type": "Literal",
                "value": "__lodash_hash_undefined__",
                "raw": "'__lodash_hash_undefined__'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ClassDeclaration",
          "id": {
            "type": "Identifier",
            "name": "SetCache"
          },
          "superClass": null,
          "body": {
            "type": "ClassBody",
            "body": [
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "constructor"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "values"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "init": {
                              "type": "UnaryExpression",
                              "operator": "-",
                              "argument": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                              },
                              "prefix": true
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "length"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": "==",
                                "left": {
                                  "type": "Identifier",
                                  "name": "values"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": null,
                                  "raw": "null"
                                }
                              },
                              "consequent": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              },
                              "alternate": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "values"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "length"
                                }
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "__data__"
                            }
                          },
                          "right": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "MapCache"
                            },
                            "arguments": []
                          }
                        }
                      },
                      {
                        "type": "WhileStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        },
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ThisExpression"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "add"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "values"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "index"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "constructor",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "add"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__data__"
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "set"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            },
                            {
                              "type": "Identifier",
                              "name": "HASH_UNDEFINED"
                            }
                          ]
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ThisExpression"
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "has"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__data__"
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "has"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              }
            ]
          }
        },
        {
          "type": "ExpressionStatement",
          "expression": {
            "type": "AssignmentExpression",
            "operator": "=",
            "left": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "SetCache"
                },
                "property": {
                  "type": "Identifier",
                  "name": "prototype"
                }
              },
              "property": {
                "type": "Identifier",
                "name": "push"
              }
            },
            "right": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "SetCache"
                },
                "property": {
                  "type": "Identifier",
                  "name": "prototype"
                }
              },
              "property": {
                "type": "Identifier",
                "name": "add"
              }
            }
          }
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "SetCache"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to stand-in for `undefined` hash values. "
        },
        {
          "type": "Block",
          "value": "*\n   * Creates an array cache object to store unique values.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [values] The values to cache.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Adds `value` to the array cache.\n   *\n   * @memberOf SetCache\n   * @alias push\n   * @param {*} value The value to cache.\n   * @returns {Object} Returns the cache instance.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Checks if `value` is in the array cache.\n   *\n   * @memberOf SetCache\n   * @param {*} value The value to search for.\n   * @returns {number} Returns `true` if `value` is found, else `false`.\n   "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/Stack.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "ListCache"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./ListCache.js",
            "raw": "'./ListCache.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "MapCache"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./MapCache.js",
            "raw": "'./MapCache.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "LARGE_ARRAY_SIZE"
              },
              "init": {
                "type": "Literal",
                "value": 200,
                "raw": "200"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ClassDeclaration",
          "id": {
            "type": "Identifier",
            "name": "Stack"
          },
          "superClass": null,
          "body": {
            "type": "ClassBody",
            "body": [
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "constructor"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "entries"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "init": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "ThisExpression"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "__data__"
                                }
                              },
                              "right": {
                                "type": "NewExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "ListCache"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "entries"
                                  }
                                ]
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          },
                          "right": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          }
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "constructor",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "clear"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "__data__"
                            }
                          },
                          "right": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "ListCache"
                            },
                            "arguments": []
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "delete"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__data__"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "data"
                                },
                                "property": {
                                  "type": "Literal",
                                  "value": "delete",
                                  "raw": "'delete'"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          },
                          "right": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          }
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Identifier",
                          "name": "result"
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "get"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__data__"
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "get"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "key"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "has"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__data__"
                              }
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "has"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "key"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              },
              {
                "type": "MethodDefinition",
                "key": {
                  "type": "Identifier",
                  "name": "set"
                },
                "computed": false,
                "value": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    },
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "ThisExpression"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__data__"
                              }
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "instanceof",
                          "left": {
                            "type": "Identifier",
                            "name": "data"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "ListCache"
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "pairs"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "data"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "__data__"
                                    }
                                  }
                                }
                              ],
                              "kind": "const"
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": "<",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "pairs"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "length"
                                  }
                                },
                                "right": {
                                  "type": "BinaryExpression",
                                  "operator": "-",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "LARGE_ARRAY_SIZE"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                  }
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "pairs"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "push"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "ArrayExpression",
                                          "elements": [
                                            {
                                              "type": "Identifier",
                                              "name": "key"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "value"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "ThisExpression"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "size"
                                        }
                                      },
                                      "right": {
                                        "type": "UpdateExpression",
                                        "operator": "++",
                                        "argument": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "data"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "size"
                                          }
                                        },
                                        "prefix": true
                                      }
                                    }
                                  },
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "ThisExpression"
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "data"
                                },
                                "right": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "ThisExpression"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "__data__"
                                    }
                                  },
                                  "right": {
                                    "type": "NewExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "MapCache"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "pairs"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "set"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "key"
                            },
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "ThisExpression"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          },
                          "right": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "size"
                            }
                          }
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ThisExpression"
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "kind": "method",
                "static": false
              }
            ]
          }
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "Stack"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as the size to enable large array optimizations. "
        },
        {
          "type": "Block",
          "value": "*\n   * Creates a stack cache object to store key-value pairs.\n   *\n   * @private\n   * @constructor\n   * @param {Array} [entries] The key-value pairs to cache.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Removes all key-value entries from the stack.\n   *\n   * @memberOf Stack\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Removes `key` and its value from the stack.\n   *\n   * @memberOf Stack\n   * @param {string} key The key of the value to remove.\n   * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Gets the stack value for `key`.\n   *\n   * @memberOf Stack\n   * @param {string} key The key of the value to get.\n   * @returns {*} Returns the entry value.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Checks if a stack value for `key` exists.\n   *\n   * @memberOf Stack\n   * @param {string} key The key of the entry to check.\n   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n   "
        },
        {
          "type": "Block",
          "value": "*\n   * Sets the stack `key` to `value`.\n   *\n   * @memberOf Stack\n   * @param {string} key The key of the value to set.\n   * @param {*} value The value to set.\n   * @returns {Object} Returns the stack cache instance.\n   "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/addMapEntry.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "addMapEntry"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "map"
            },
            {
              "type": "Identifier",
              "name": "pair"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "map"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "set"
                    }
                  },
                  "arguments": [
                    {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "pair"
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    },
                    {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "pair"
                      },
                      "property": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "map"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "addMapEntry"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n "
        },
        {
          "type": "Line",
          "value": " Don't return `map.set` because it's not chainable in IE 11."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/addSetEntry.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "addSetEntry"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "set"
            },
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "set"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "add"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "set"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "addSetEntry"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n "
        },
        {
          "type": "Line",
          "value": " Don't return `set.add` because it's not chainable in IE 11."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/arrayEach.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "arrayEach"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "iteratee"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "index"
                            },
                            {
                              "type": "Identifier",
                              "name": "array"
                            }
                          ]
                        },
                        "right": {
                          "type": "Literal",
                          "value": false,
                          "raw": "false"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "BreakStatement",
                            "label": null
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "array"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "arrayEach"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * A specialized version of `forEach` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/arrayEachRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "arrayEachRight"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "iteratee"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "length"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "length"
                            },
                            {
                              "type": "Identifier",
                              "name": "array"
                            }
                          ]
                        },
                        "right": {
                          "type": "Literal",
                          "value": false,
                          "raw": "false"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "BreakStatement",
                            "label": null
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "array"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "arrayEachRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * A specialized version of `forEachRight` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/arrayIncludes.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIndexOf"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseIndexOf.js",
            "raw": "'./baseIndexOf.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "arrayIncludes"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "prefix": true
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": ">",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseIndexOf"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "array"
                        },
                        {
                          "type": "Identifier",
                          "name": "value"
                        },
                        {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      ]
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "arrayIncludes"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * A specialized version of `includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/arrayIncludesWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "arrayIncludesWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "target"
            },
            {
              "type": "Identifier",
              "name": "comparator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "array"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": false,
                        "raw": "false"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ForOfStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "array"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "comparator"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "target"
                          },
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": true,
                              "raw": "true"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Literal",
                  "value": false,
                  "raw": "false"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "arrayIncludesWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/arrayLikeKeys.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArguments"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isArguments.js",
            "raw": "'../isArguments.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isBuffer"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isBuffer.js",
            "raw": "'../isBuffer.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isIndex.js",
            "raw": "'./isIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isTypedArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isTypedArray.js",
            "raw": "'../isTypedArray.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasOwnProperty"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "hasOwnProperty"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "arrayLikeKeys"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "inherited"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isArr"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "isArray"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isArg"
                    },
                    "init": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "Identifier",
                          "name": "isArr"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isArguments"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isBuff"
                    },
                    "init": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "isArr"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "isArg"
                          },
                          "prefix": true
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isBuffer"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isType"
                    },
                    "init": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                              "type": "Identifier",
                              "name": "isArr"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                              "type": "Identifier",
                              "name": "isArg"
                            },
                            "prefix": true
                          }
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "isBuff"
                          },
                          "prefix": true
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isTypedArray"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "skipIndexes"
                    },
                    "init": {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "Identifier",
                            "name": "isArr"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "isArg"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "isBuff"
                        }
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "isType"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "Identifier",
                            "name": "skipIndexes"
                          },
                          "consequent": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "alternate": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "skipIndexes"
                      },
                      "consequent": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        "prefix": true
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        "right": {
                          "type": "TemplateLiteral",
                          "quasis": [
                            {
                              "type": "TemplateElement",
                              "value": {
                                "raw": "",
                                "cooked": ""
                              },
                              "tail": false
                            },
                            {
                              "type": "TemplateElement",
                              "value": {
                                "raw": "",
                                "cooked": ""
                              },
                              "tail": true
                            }
                          ],
                          "expressions": [
                            {
                              "type": "Identifier",
                              "name": "index"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ForInStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "key"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "value"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "Identifier",
                            "name": "inherited"
                          },
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "hasOwnProperty"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "call"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "value"
                              },
                              {
                                "type": "Identifier",
                                "name": "key"
                              }
                            ]
                          }
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "Identifier",
                              "name": "skipIndexes"
                            },
                            "right": {
                              "type": "LogicalExpression",
                              "operator": "||",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": "==",
                                "left": {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "length",
                                  "raw": "'length'"
                                }
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isIndex"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "key"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "length"
                                  }
                                ]
                              }
                            }
                          },
                          "prefix": true
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "push"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                },
                "each": false
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "arrayLikeKeys"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to check objects for own properties. "
        },
        {
          "type": "Block",
          "value": "*\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n "
        },
        {
          "type": "Line",
          "value": " Safari 9 has enumerable `arguments.length` in strict mode."
        },
        {
          "type": "Line",
          "value": " Skip index properties."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/arrayReduce.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "arrayReduce"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "accumulator"
            },
            {
              "type": "Identifier",
              "name": "initAccum"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "initAccum"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "accumulator"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "prefix": true
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "accumulator"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "iteratee"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "accumulator"
                            },
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "index"
                            },
                            {
                              "type": "Identifier",
                              "name": "array"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "accumulator"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "arrayReduce"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * A specialized version of `reduce` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/arrayReduceRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "arrayReduceRight"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "accumulator"
            },
            {
              "type": "Identifier",
              "name": "initAccum"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "initAccum"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "accumulator"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "UpdateExpression",
                            "operator": "--",
                            "argument": {
                              "type": "Identifier",
                              "name": "length"
                            },
                            "prefix": true
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "accumulator"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "iteratee"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "accumulator"
                            },
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "length"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "length"
                            },
                            {
                              "type": "Identifier",
                              "name": "array"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "accumulator"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "arrayReduceRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * A specialized version of `reduceRight` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the last element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/asciiSize.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "asciiSize"
          },
          "params": [
            {
              "type": "ObjectPattern",
              "properties": [
                {
                  "type": "Property",
                  "key": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "computed": false,
                  "value": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "kind": "init",
                  "method": false,
                  "shorthand": true
                }
              ]
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "length"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "asciiSize"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/asciiToArray.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "asciiToArray"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "split"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "asciiToArray"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/assignMergeValue.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseAssignValue"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseAssignValue.js",
            "raw": "'./baseAssignValue.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "eq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../eq.js",
            "raw": "'../eq.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "assignMergeValue"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "key"
            },
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "eq"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key"
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "prefix": true
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "BinaryExpression",
                        "operator": "in",
                        "left": {
                          "type": "Identifier",
                          "name": "key"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "object"
                        }
                      },
                      "prefix": true
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "baseAssignValue"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          },
                          {
                            "type": "Identifier",
                            "name": "key"
                          },
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "assignMergeValue"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/assignValue.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseAssignValue"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseAssignValue.js",
            "raw": "'./baseAssignValue.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "eq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../eq.js",
            "raw": "'../eq.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasOwnProperty"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "hasOwnProperty"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "assignValue"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "key"
            },
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "objValue"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "key"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "hasOwnProperty"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "call"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        },
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ]
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "eq"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "objValue"
                        },
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "!==",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "==",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "/",
                            "left": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "value"
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "/",
                            "left": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "objValue"
                            }
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "baseAssignValue"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                },
                "alternate": {
                  "type": "IfStatement",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "BinaryExpression",
                        "operator": "in",
                        "left": {
                          "type": "Identifier",
                          "name": "key"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "object"
                        }
                      },
                      "prefix": true
                    }
                  },
                  "consequent": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "baseAssignValue"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            },
                            {
                              "type": "Identifier",
                              "name": "key"
                            },
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "alternate": null
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "assignValue"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to check objects for own properties. "
        },
        {
          "type": "Block",
          "value": "*\n * Assigns `value` to `key` of `object` if the existing value is not equivalent.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/assocIndexOf.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "eq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../eq.js",
            "raw": "'../eq.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "assocIndexOf"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "key"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "eq"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "length"
                              }
                            },
                            "property": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "key"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "length"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "UnaryExpression",
                  "operator": "-",
                  "argument": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1"
                  },
                  "prefix": true
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "assocIndexOf"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseAssignValue.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseAssignValue"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "key"
            },
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "key"
                  },
                  "right": {
                    "type": "Literal",
                    "value": "__proto__",
                    "raw": "'__proto__'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Object"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "defineProperty"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          },
                          {
                            "type": "Identifier",
                            "name": "key"
                          },
                          {
                            "type": "ObjectExpression",
                            "properties": [
                              {
                                "type": "Property",
                                "key": {
                                  "type": "Literal",
                                  "value": "configurable",
                                  "raw": "'configurable'"
                                },
                                "computed": false,
                                "value": {
                                  "type": "Literal",
                                  "value": true,
                                  "raw": "true"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                              },
                              {
                                "type": "Property",
                                "key": {
                                  "type": "Literal",
                                  "value": "enumerable",
                                  "raw": "'enumerable'"
                                },
                                "computed": false,
                                "value": {
                                  "type": "Literal",
                                  "value": true,
                                  "raw": "true"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                              },
                              {
                                "type": "Property",
                                "key": {
                                  "type": "Literal",
                                  "value": "value",
                                  "raw": "'value'"
                                },
                                "computed": false,
                                "value": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                              },
                              {
                                "type": "Property",
                                "key": {
                                  "type": "Literal",
                                  "value": "writable",
                                  "raw": "'writable'"
                                },
                                "computed": false,
                                "value": {
                                  "type": "Literal",
                                  "value": true,
                                  "raw": "true"
                                },
                                "kind": "init",
                                "method": false,
                                "shorthand": false
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "key"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "value"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseAssignValue"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseAt.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "get"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../get.js",
            "raw": "'../get.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseAt"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "paths"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "paths"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "length"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "skip"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "Identifier",
                            "name": "skip"
                          },
                          "consequent": {
                            "type": "Identifier",
                            "name": "undefined"
                          },
                          "alternate": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "get"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "object"
                              },
                              {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "paths"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "index"
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseAt"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `at` without support for individual paths.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {string[]} paths The property paths to pick.\n * @returns {Array} Returns the picked elements.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseClone.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "Stack"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./Stack.js",
            "raw": "'./Stack.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayEach"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./arrayEach.js",
            "raw": "'./arrayEach.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "assignValue"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./assignValue.js",
            "raw": "'./assignValue.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cloneBuffer"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cloneBuffer.js",
            "raw": "'./cloneBuffer.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "copyArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./copyArray.js",
            "raw": "'./copyArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "copyObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./copyObject.js",
            "raw": "'./copyObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cloneArrayBuffer"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cloneArrayBuffer.js",
            "raw": "'./cloneArrayBuffer.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cloneDataView"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cloneDataView.js",
            "raw": "'./cloneDataView.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cloneRegExp"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cloneRegExp.js",
            "raw": "'./cloneRegExp.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cloneSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cloneSymbol.js",
            "raw": "'./cloneSymbol.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cloneTypedArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cloneTypedArray.js",
            "raw": "'./cloneTypedArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "copySymbols"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./copySymbols.js",
            "raw": "'./copySymbols.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "copySymbolsIn"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./copySymbolsIn.js",
            "raw": "'./copySymbolsIn.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getAllKeys"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./getAllKeys.js",
            "raw": "'./getAllKeys.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getAllKeysIn"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./getAllKeysIn.js",
            "raw": "'./getAllKeysIn.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./getTag.js",
            "raw": "'./getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "initCloneObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./initCloneObject.js",
            "raw": "'./initCloneObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isBuffer"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isBuffer.js",
            "raw": "'../isBuffer.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isObject.js",
            "raw": "'../isObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isTypedArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isTypedArray.js",
            "raw": "'../isTypedArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "keys"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../keys.js",
            "raw": "'../keys.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "keysIn"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../keysIn.js",
            "raw": "'../keysIn.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "CLONE_DEEP_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "CLONE_FLAT_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 2,
                "raw": "2"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "CLONE_SYMBOLS_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 4,
                "raw": "4"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "argsTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Arguments]",
                "raw": "'[object Arguments]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "arrayTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Array]",
                "raw": "'[object Array]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "boolTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Boolean]",
                "raw": "'[object Boolean]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "dateTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Date]",
                "raw": "'[object Date]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "errorTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Error]",
                "raw": "'[object Error]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "mapTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Map]",
                "raw": "'[object Map]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "numberTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Number]",
                "raw": "'[object Number]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "objectTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Object]",
                "raw": "'[object Object]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "regexpTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object RegExp]",
                "raw": "'[object RegExp]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "setTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Set]",
                "raw": "'[object Set]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "stringTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object String]",
                "raw": "'[object String]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "symbolTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Symbol]",
                "raw": "'[object Symbol]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "weakMapTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object WeakMap]",
                "raw": "'[object WeakMap]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "arrayBufferTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object ArrayBuffer]",
                "raw": "'[object ArrayBuffer]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "dataViewTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object DataView]",
                "raw": "'[object DataView]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "float32Tag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Float32Array]",
                "raw": "'[object Float32Array]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "float64Tag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Float64Array]",
                "raw": "'[object Float64Array]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "int8Tag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Int8Array]",
                "raw": "'[object Int8Array]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "int16Tag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Int16Array]",
                "raw": "'[object Int16Array]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "int32Tag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Int32Array]",
                "raw": "'[object Int32Array]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "uint8Tag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Uint8Array]",
                "raw": "'[object Uint8Array]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "uint8ClampedTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Uint8ClampedArray]",
                "raw": "'[object Uint8ClampedArray]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "uint16Tag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Uint16Array]",
                "raw": "'[object Uint16Array]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "uint32Tag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Uint32Array]",
                "raw": "'[object Uint32Array]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "cloneableTags"
              },
              "init": {
                "type": "ObjectExpression",
                "properties": []
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExpressionStatement",
          "expression": {
            "type": "AssignmentExpression",
            "operator": "=",
            "left": {
              "type": "MemberExpression",
              "computed": true,
              "object": {
                "type": "Identifier",
                "name": "cloneableTags"
              },
              "property": {
                "type": "Identifier",
                "name": "argsTag"
              }
            },
            "right": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "MemberExpression",
                "computed": true,
                "object": {
                  "type": "Identifier",
                  "name": "cloneableTags"
                },
                "property": {
                  "type": "Identifier",
                  "name": "arrayTag"
                }
              },
              "right": {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                  "type": "MemberExpression",
                  "computed": true,
                  "object": {
                    "type": "Identifier",
                    "name": "cloneableTags"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "arrayBufferTag"
                  }
                },
                "right": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "cloneableTags"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "dataViewTag"
                    }
                  },
                  "right": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "cloneableTags"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "boolTag"
                      }
                    },
                    "right": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "cloneableTags"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "dateTag"
                        }
                      },
                      "right": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "cloneableTags"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "float32Tag"
                          }
                        },
                        "right": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "cloneableTags"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "float64Tag"
                            }
                          },
                          "right": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "cloneableTags"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "int8Tag"
                              }
                            },
                            "right": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "cloneableTags"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "int16Tag"
                                }
                              },
                              "right": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "cloneableTags"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "int32Tag"
                                  }
                                },
                                "right": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "cloneableTags"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "mapTag"
                                    }
                                  },
                                  "right": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "cloneableTags"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "numberTag"
                                      }
                                    },
                                    "right": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "cloneableTags"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "objectTag"
                                        }
                                      },
                                      "right": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "MemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "cloneableTags"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "regexpTag"
                                          }
                                        },
                                        "right": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "cloneableTags"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "setTag"
                                            }
                                          },
                                          "right": {
                                            "type": "AssignmentExpression",
                                            "operator": "=",
                                            "left": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "cloneableTags"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "stringTag"
                                              }
                                            },
                                            "right": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "cloneableTags"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "symbolTag"
                                                }
                                              },
                                              "right": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "cloneableTags"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "uint8Tag"
                                                  }
                                                },
                                                "right": {
                                                  "type": "AssignmentExpression",
                                                  "operator": "=",
                                                  "left": {
                                                    "type": "MemberExpression",
                                                    "computed": true,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "cloneableTags"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "uint8ClampedTag"
                                                    }
                                                  },
                                                  "right": {
                                                    "type": "AssignmentExpression",
                                                    "operator": "=",
                                                    "left": {
                                                      "type": "MemberExpression",
                                                      "computed": true,
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "cloneableTags"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "uint16Tag"
                                                      }
                                                    },
                                                    "right": {
                                                      "type": "AssignmentExpression",
                                                      "operator": "=",
                                                      "left": {
                                                        "type": "MemberExpression",
                                                        "computed": true,
                                                        "object": {
                                                          "type": "Identifier",
                                                          "name": "cloneableTags"
                                                        },
                                                        "property": {
                                                          "type": "Identifier",
                                                          "name": "uint32Tag"
                                                        }
                                                      },
                                                      "right": {
                                                        "type": "Literal",
                                                        "value": true,
                                                        "raw": "true"
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        {
          "type": "ExpressionStatement",
          "expression": {
            "type": "AssignmentExpression",
            "operator": "=",
            "left": {
              "type": "MemberExpression",
              "computed": true,
              "object": {
                "type": "Identifier",
                "name": "cloneableTags"
              },
              "property": {
                "type": "Identifier",
                "name": "errorTag"
              }
            },
            "right": {
              "type": "AssignmentExpression",
              "operator": "=",
              "left": {
                "type": "MemberExpression",
                "computed": true,
                "object": {
                  "type": "Identifier",
                  "name": "cloneableTags"
                },
                "property": {
                  "type": "Identifier",
                  "name": "weakMapTag"
                }
              },
              "right": {
                "type": "Literal",
                "value": false,
                "raw": "false"
              }
            }
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasOwnProperty"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "hasOwnProperty"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "initCloneByTag"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "tag"
            },
            {
              "type": "Identifier",
              "name": "isDeep"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "Ctor"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "constructor"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "SwitchStatement",
                "discriminant": {
                  "type": "Identifier",
                  "name": "tag"
                },
                "cases": [
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "arrayBufferTag"
                    },
                    "consequent": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "cloneArrayBuffer"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "boolTag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "dateTag"
                    },
                    "consequent": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "NewExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "Ctor"
                          },
                          "arguments": [
                            {
                              "type": "UnaryExpression",
                              "operator": "+",
                              "argument": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "prefix": true
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "dataViewTag"
                    },
                    "consequent": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "cloneDataView"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            },
                            {
                              "type": "Identifier",
                              "name": "isDeep"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "float32Tag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "float64Tag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "int8Tag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "int16Tag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "int32Tag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "uint8Tag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "uint8ClampedTag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "uint16Tag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "uint32Tag"
                    },
                    "consequent": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "cloneTypedArray"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            },
                            {
                              "type": "Identifier",
                              "name": "isDeep"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "mapTag"
                    },
                    "consequent": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "NewExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "Ctor"
                          },
                          "arguments": []
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "numberTag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "stringTag"
                    },
                    "consequent": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "NewExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "Ctor"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "regexpTag"
                    },
                    "consequent": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "cloneRegExp"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "setTag"
                    },
                    "consequent": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "NewExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "Ctor"
                          },
                          "arguments": []
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "symbolTag"
                    },
                    "consequent": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "cloneSymbol"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            }
                          ]
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "initCloneArray"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "constructor"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "length"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "string",
                        "raw": "'string'"
                      }
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "hasOwnProperty"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "call"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Literal",
                        "value": "index",
                        "raw": "'index'"
                      }
                    ]
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "input"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "input"
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseClone"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "bitmask"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            },
            {
              "type": "Identifier",
              "name": "key"
            },
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "stack"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isDeep"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "&",
                      "left": {
                        "type": "Identifier",
                        "name": "bitmask"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "CLONE_DEEP_FLAG"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isFlat"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "&",
                      "left": {
                        "type": "Identifier",
                        "name": "bitmask"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "CLONE_FLAT_FLAG"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isFull"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "&",
                      "left": {
                        "type": "Identifier",
                        "name": "bitmask"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "CLONE_SYMBOLS_FLAG"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "customizer"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "result"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "consequent": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "customizer"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "value"
                              },
                              {
                                "type": "Identifier",
                                "name": "key"
                              },
                              {
                                "type": "Identifier",
                                "name": "object"
                              },
                              {
                                "type": "Identifier",
                                "name": "stack"
                              }
                            ]
                          },
                          "alternate": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "customizer"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "value"
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!==",
                  "left": {
                    "type": "Identifier",
                    "name": "result"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isObject"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isArr"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "isArray"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "tag"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getTag"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "isArr"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "result"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "initCloneArray"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "Identifier",
                          "name": "isDeep"
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "copyArray"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "result"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                },
                "alternate": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "isFunc"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "typeof",
                              "argument": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "Literal",
                              "value": "function",
                              "raw": "'function'"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isBuffer"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "cloneBuffer"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "isDeep"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "Identifier",
                              "name": "tag"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "objectTag"
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "Identifier",
                              "name": "tag"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "argsTag"
                            }
                          }
                        },
                        "right": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "Identifier",
                            "name": "isFunc"
                          },
                          "right": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "prefix": true
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "result"
                              },
                              "right": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "LogicalExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "isFlat"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "isFunc"
                                  }
                                },
                                "consequent": {
                                  "type": "ObjectExpression",
                                  "properties": []
                                },
                                "alternate": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "initCloneObject"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "value"
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "Identifier",
                                "name": "isDeep"
                              },
                              "prefix": true
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "ConditionalExpression",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "isFlat"
                                    },
                                    "consequent": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "copySymbolsIn"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "value"
                                        },
                                        {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "copyObject"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "value"
                                            },
                                            {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "keysIn"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "value"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "result"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "alternate": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "copySymbols"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "value"
                                        },
                                        {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "Object"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "assign"
                                            }
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "result"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "value"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      },
                      "alternate": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "||",
                              "left": {
                                "type": "Identifier",
                                "name": "isFunc"
                              },
                              "right": {
                                "type": "UnaryExpression",
                                "operator": "!",
                                "argument": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "cloneableTags"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "tag"
                                  }
                                },
                                "prefix": true
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "ConditionalExpression",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "object"
                                    },
                                    "consequent": {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    "alternate": {
                                      "type": "ObjectExpression",
                                      "properties": []
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "result"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "initCloneByTag"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "tag"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "isDeep"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "Identifier",
                    "name": "stack"
                  },
                  "right": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "stack"
                    },
                    "right": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Stack"
                      },
                      "arguments": []
                    }
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "stacked"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "stack"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "get"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "stacked"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "stacked"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "stack"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "set"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "Identifier",
                      "name": "result"
                    }
                  ]
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "tag"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "mapTag"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "forEach"
                          }
                        },
                        "arguments": [
                          {
                            "type": "ArrowFunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "subValue"
                              },
                              {
                                "type": "Identifier",
                                "name": "key"
                              }
                            ],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "result"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "set"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "key"
                                      },
                                      {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "baseClone"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "subValue"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "bitmask"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "customizer"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "key"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "value"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "stack"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                          }
                        ]
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "tag"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "setTag"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "forEach"
                          }
                        },
                        "arguments": [
                          {
                            "type": "ArrowFunctionExpression",
                            "id": null,
                            "params": [
                              {
                                "type": "Identifier",
                                "name": "subValue"
                              }
                            ],
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "result"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "add"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "baseClone"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "subValue"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "bitmask"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "customizer"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "subValue"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "value"
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "stack"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "generator": false,
                            "expression": false,
                            "async": false
                          }
                        ]
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isTypedArray"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "keysFunc"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "isFull"
                      },
                      "consequent": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "isFlat"
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "getAllKeysIn"
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "getAllKeys"
                        }
                      },
                      "alternate": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "isFlat"
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "keysIn"
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "props"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "isArr"
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "undefined"
                      },
                      "alternate": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "keysFunc"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "arrayEach"
                  },
                  "arguments": [
                    {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "Identifier",
                        "name": "props"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "subValue"
                        },
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "Identifier",
                              "name": "props"
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "subValue"
                                    }
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "subValue"
                                    },
                                    "right": {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "value"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "key"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "assignValue"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "baseClone"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "subValue"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "bitmask"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "customizer"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "stack"
                                    }
                                  ]
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseClone"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for cloning. "
        },
        {
          "type": "Block",
          "value": "* `Object#toString` result references. "
        },
        {
          "type": "Block",
          "value": "* Used to identify `toStringTag` values supported by `clone`. "
        },
        {
          "type": "Block",
          "value": "* Used to check objects for own properties. "
        },
        {
          "type": "Block",
          "value": "*\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n "
        },
        {
          "type": "Block",
          "value": "*\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n "
        },
        {
          "type": "Line",
          "value": " Add properties assigned by `RegExp#exec`."
        },
        {
          "type": "Block",
          "value": "*\n * The base implementation of `clone` and `cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {number} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n "
        },
        {
          "type": "Line",
          "value": " Check for circular references and return its corresponding clone."
        },
        {
          "type": "Line",
          "value": " Recursively populate clone (susceptible to call stack limits)."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseConforms.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseConformsTo"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseConformsTo.js",
            "raw": "'./baseConformsTo.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "keys"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../keys.js",
            "raw": "'../keys.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseConforms"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "source"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "props"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "keys"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "source"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    }
                  ],
                  "body": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseConformsTo"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "source"
                      },
                      {
                        "type": "Identifier",
                        "name": "props"
                      }
                    ]
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseConforms"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `conforms` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property predicates to conform to.\n * @returns {Function} Returns the new spec function.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseConformsTo.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseConformsTo"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "source"
            },
            {
              "type": "Identifier",
              "name": "props"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "props"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "Identifier",
                          "name": "length"
                        },
                        "prefix": true
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "key"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "props"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "length"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "predicate"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "source"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          },
                          "right": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                              "type": "BinaryExpression",
                              "operator": "in",
                              "left": {
                                "type": "Identifier",
                                "name": "key"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "object"
                              }
                            },
                            "prefix": true
                          }
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "predicate"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "value"
                              }
                            ]
                          },
                          "prefix": true
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": false,
                              "raw": "false"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Literal",
                  "value": true,
                  "raw": "true"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseConformsTo"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `conformsTo` which accepts `props` to check.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property predicates to conform to.\n * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseDifference.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "SetCache"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./SetCache.js",
            "raw": "'./SetCache.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayIncludes"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./arrayIncludes.js",
            "raw": "'./arrayIncludes.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayIncludesWith"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./arrayIncludesWith.js",
            "raw": "'./arrayIncludesWith.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../map.js",
            "raw": "'../map.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cacheHas"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cacheHas.js",
            "raw": "'./cacheHas.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "LARGE_ARRAY_SIZE"
              },
              "init": {
                "type": "Literal",
                "value": 200,
                "raw": "200"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseDifference"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "values"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "comparator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "includes"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "arrayIncludes"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isCommon"
                    },
                    "init": {
                      "type": "Literal",
                      "value": true,
                      "raw": "true"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "valuesLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "values"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "array"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "iteratee"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "values"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "map"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "values"
                            },
                            {
                              "type": "ArrowFunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              ],
                              "body": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              },
                              "generator": false,
                              "expression": true,
                              "async": false
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "comparator"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "includes"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "arrayIncludesWith"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "isCommon"
                        },
                        "right": {
                          "type": "Literal",
                          "value": false,
                          "raw": "false"
                        }
                      }
                    }
                  ]
                },
                "alternate": {
                  "type": "IfStatement",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": ">=",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "values"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "LARGE_ARRAY_SIZE"
                    }
                  },
                  "consequent": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "includes"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "cacheHas"
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "isCommon"
                          },
                          "right": {
                            "type": "Literal",
                            "value": false,
                            "raw": "false"
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "values"
                          },
                          "right": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "SetCache"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "values"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "alternate": null
                }
              },
              {
                "type": "LabeledStatement",
                "label": {
                  "type": "Identifier",
                  "name": "outer"
                },
                "body": {
                  "type": "ForOfStatement",
                  "left": {
                    "type": "VariableDeclaration",
                    "declarations": [
                      {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "init": null
                      }
                    ],
                    "kind": "let"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "array"
                  },
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "computed"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": "==",
                                "left": {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": null,
                                  "raw": "null"
                                }
                              },
                              "consequent": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "alternate": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "||",
                              "left": {
                                "type": "Identifier",
                                "name": "comparator"
                              },
                              "right": {
                                "type": "BinaryExpression",
                                "operator": "!==",
                                "left": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                }
                              }
                            },
                            "consequent": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          }
                        }
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "Identifier",
                            "name": "isCommon"
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "computed"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "computed"
                            }
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "valuesIndex"
                                  },
                                  "init": {
                                    "type": "Identifier",
                                    "name": "valuesLength"
                                  }
                                }
                              ],
                              "kind": "let"
                            },
                            {
                              "type": "WhileStatement",
                              "test": {
                                "type": "UpdateExpression",
                                "operator": "--",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "valuesIndex"
                                },
                                "prefix": false
                              },
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "values"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "valuesIndex"
                                        }
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "computed"
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ContinueStatement",
                                          "label": {
                                            "type": "Identifier",
                                            "name": "outer"
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "result"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "push"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "alternate": {
                          "type": "IfStatement",
                          "test": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "includes"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "values"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "computed"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "comparator"
                                }
                              ]
                            },
                            "prefix": true
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "push"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "value"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "alternate": null
                        }
                      }
                    ]
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseDifference"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as the size to enable large array optimizations. "
        },
        {
          "type": "Block",
          "value": "*\n * The base implementation of methods like `difference` without support\n * for excluding multiple arrays.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseEach.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseForOwn"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseForOwn.js",
            "raw": "'./baseForOwn.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isArrayLike.js",
            "raw": "'../isArrayLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseEach"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "collection"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "collection"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isArrayLike"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "collection"
                      }
                    ]
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "baseForOwn"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "collection"
                          },
                          {
                            "type": "Identifier",
                            "name": "iteratee"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "collection"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "iterable"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "collection"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "iteratee"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "iterable"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "index"
                            },
                            {
                              "type": "Identifier",
                              "name": "iterable"
                            }
                          ]
                        },
                        "right": {
                          "type": "Literal",
                          "value": false,
                          "raw": "false"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "BreakStatement",
                            "label": null
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "collection"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseEach"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `forEach`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseEachRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseForOwnRight"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseForOwnRight.js",
            "raw": "'./baseForOwnRight.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isArrayLike.js",
            "raw": "'../isArrayLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseEachRight"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "collection"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "collection"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isArrayLike"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "collection"
                      }
                    ]
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "baseForOwnRight"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "collection"
                          },
                          {
                            "type": "Identifier",
                            "name": "iteratee"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "iterable"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "collection"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "collection"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "iteratee"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "iterable"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "length"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "length"
                            },
                            {
                              "type": "Identifier",
                              "name": "iterable"
                            }
                          ]
                        },
                        "right": {
                          "type": "Literal",
                          "value": false,
                          "raw": "false"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "BreakStatement",
                            "label": null
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "collection"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseEachRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `forEachRight`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseFindIndex.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseFindIndex"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            },
            {
              "type": "Identifier",
              "name": "fromIndex"
            },
            {
              "type": "Identifier",
              "name": "fromRight"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "Identifier",
                        "name": "fromIndex"
                      },
                      "right": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "fromRight"
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        "alternate": {
                          "type": "UnaryExpression",
                          "operator": "-",
                          "argument": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          },
                          "prefix": true
                        }
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "Identifier",
                    "name": "fromRight"
                  },
                  "consequent": {
                    "type": "UpdateExpression",
                    "operator": "--",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": false
                  },
                  "alternate": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "UpdateExpression",
                      "operator": "++",
                      "argument": {
                        "type": "Identifier",
                        "name": "index"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "predicate"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "array"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "index"
                          },
                          {
                            "type": "Identifier",
                            "name": "array"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "UnaryExpression",
                  "operator": "-",
                  "argument": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1"
                  },
                  "prefix": true
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseFindIndex"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `findIndex` and `findLastIndex`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseFindKey.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseFindKey"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            },
            {
              "type": "Identifier",
              "name": "eachFunc"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "eachFunc"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        },
                        {
                          "type": "Identifier",
                          "name": "key"
                        },
                        {
                          "type": "Identifier",
                          "name": "collection"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "predicate"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "collection"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "key"
                                    }
                                  }
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Literal",
                                    "value": false,
                                    "raw": "false"
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseFindKey"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of methods like `findKey` and `findLastKey`\n * which iterates over `collection` using `eachFunc`.\n *\n * @private\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {Function} eachFunc The function to iterate over `collection`.\n * @returns {*} Returns the found element or its key, else `undefined`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseFlatten.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isFlattenable"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isFlattenable.js",
            "raw": "'./isFlattenable.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseFlatten"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "depth"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            },
            {
              "type": "Identifier",
              "name": "isStrict"
            },
            {
              "type": "Identifier",
              "name": "result"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "Identifier",
                    "name": "predicate"
                  },
                  "right": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "predicate"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "isFlattenable"
                    }
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "Identifier",
                    "name": "result"
                  },
                  "right": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "right": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "array"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ForOfStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "array"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": ">",
                          "left": {
                            "type": "Identifier",
                            "name": "depth"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "predicate"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": ">",
                              "left": {
                                "type": "Identifier",
                                "name": "depth"
                              },
                              "right": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "baseFlatten"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "value"
                                      },
                                      {
                                        "type": "BinaryExpression",
                                        "operator": "-",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "depth"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": 1,
                                          "raw": "1"
                                        }
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "predicate"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "isStrict"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "result"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "result"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "push"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "SpreadElement",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "value"
                                        }
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "isStrict"
                          },
                          "prefix": true
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "result"
                                  },
                                  "property": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "length"
                                    }
                                  }
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              }
                            }
                          ]
                        },
                        "alternate": null
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseFlatten"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n "
        },
        {
          "type": "Line",
          "value": " Recursively flatten arrays (susceptible to call stack limits)."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseFor.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseFor"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "keysFunc"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "iterable"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "props"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "keysFunc"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "props"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "key"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "props"
                            },
                            "property": {
                              "type": "UpdateExpression",
                              "operator": "++",
                              "argument": {
                                "type": "Identifier",
                                "name": "index"
                              },
                              "prefix": true
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "iteratee"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "iterable"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "key"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "key"
                            },
                            {
                              "type": "Identifier",
                              "name": "iterable"
                            }
                          ]
                        },
                        "right": {
                          "type": "Literal",
                          "value": false,
                          "raw": "false"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "BreakStatement",
                            "label": null
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "object"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseFor"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseForOwn.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFor"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseFor.js",
            "raw": "'./baseFor.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "keys"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../keys.js",
            "raw": "'../keys.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseForOwn"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseFor"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "iteratee"
                      },
                      {
                        "type": "Identifier",
                        "name": "keys"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseForOwn"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `forOwn`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseForOwnRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseForRight"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseForRight.js",
            "raw": "'./baseForRight.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "keys"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../keys.js",
            "raw": "'../keys.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseForOwnRight"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseForRight"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "iteratee"
                      },
                      {
                        "type": "Identifier",
                        "name": "keys"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseForOwnRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `forOwnRight`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseForRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseForRight"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "keysFunc"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "iterable"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "props"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "keysFunc"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "props"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "key"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "props"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "length"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "iteratee"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "iterable"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "key"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "key"
                            },
                            {
                              "type": "Identifier",
                              "name": "iterable"
                            }
                          ]
                        },
                        "right": {
                          "type": "Literal",
                          "value": false,
                          "raw": "false"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "BreakStatement",
                            "label": null
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "object"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseForRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This function is like `baseFor` except that it iterates over properties\n * in the opposite order.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseGet.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castPath"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./castPath.js",
            "raw": "'./castPath.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toKey.js",
            "raw": "'./toKey.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseGet"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "path"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "castPath"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "path"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "object"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "property": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "toKey"
                            },
                            "arguments": [
                              {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "path"
                                },
                                "property": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "index"
                                  },
                                  "prefix": false
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "index"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseGet"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseInRange.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseInRange"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "number"
            },
            {
              "type": "Identifier",
              "name": "start"
            },
            {
              "type": "Identifier",
              "name": "end"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": ">=",
                    "left": {
                      "type": "Identifier",
                      "name": "number"
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Math"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "min"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "start"
                        },
                        {
                          "type": "Identifier",
                          "name": "end"
                        }
                      ]
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "Identifier",
                      "name": "number"
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Math"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "max"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "start"
                        },
                        {
                          "type": "Identifier",
                          "name": "end"
                        }
                      ]
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseInRange"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `inRange` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to check.\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseIndexOf.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFindIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseFindIndex.js",
            "raw": "'./baseFindIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIsNaN"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseIsNaN.js",
            "raw": "'./baseIsNaN.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "strictIndexOf"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./strictIndexOf.js",
            "raw": "'./strictIndexOf.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseIndexOf"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "fromIndex"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "value"
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "strictIndexOf"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "value"
                      },
                      {
                        "type": "Identifier",
                        "name": "fromIndex"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseFindIndex"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "baseIsNaN"
                      },
                      {
                        "type": "Identifier",
                        "name": "fromIndex"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseIndexOf"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseIndexOfWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseIndexOfWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "fromIndex"
            },
            {
              "type": "Identifier",
              "name": "comparator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "Identifier",
                        "name": "fromIndex"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "comparator"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "array"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "UnaryExpression",
                  "operator": "-",
                  "argument": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1"
                  },
                  "prefix": true
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseIndexOfWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This function is like `baseIndexOf` except that it accepts a comparator.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {number} Returns the index of the matched value, else `-1`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseIntersection.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "SetCache"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./SetCache.js",
            "raw": "'./SetCache.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayIncludes"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./arrayIncludes.js",
            "raw": "'./arrayIncludes.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayIncludesWith"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./arrayIncludesWith.js",
            "raw": "'./arrayIncludesWith.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../map.js",
            "raw": "'../map.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cacheHas"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cacheHas.js",
            "raw": "'./cacheHas.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseIntersection"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "arrays"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "comparator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "includes"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "comparator"
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "arrayIncludesWith"
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "arrayIncludes"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        "property": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "othLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "arrays"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "caches"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "othLength"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "array"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "maxLength"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "Infinity"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "othIndex"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "othLength"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "othIndex"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "arrays"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "othIndex"
                          }
                        }
                      }
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "Identifier",
                          "name": "othIndex"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "iteratee"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "map"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "array"
                                  },
                                  {
                                    "type": "ArrowFunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "Identifier",
                                        "name": "value"
                                      }
                                    ],
                                    "body": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "iteratee"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "value"
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": true,
                                    "async": false
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "maxLength"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Math"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "min"
                            }
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "length"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "maxLength"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "caches"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "othIndex"
                          }
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "Identifier",
                                "name": "comparator"
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "LogicalExpression",
                              "operator": "||",
                              "left": {
                                "type": "Identifier",
                                "name": "iteratee"
                              },
                              "right": {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "BinaryExpression",
                                  "operator": ">=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "length"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 120,
                                    "raw": "120"
                                  }
                                },
                                "right": {
                                  "type": "BinaryExpression",
                                  "operator": ">=",
                                  "left": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "array"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "length"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 120,
                                    "raw": "120"
                                  }
                                }
                              }
                            }
                          },
                          "consequent": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "SetCache"
                            },
                            "arguments": [
                              {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "Identifier",
                                  "name": "othIndex"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "array"
                                }
                              }
                            ]
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "undefined"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "array"
                  },
                  "right": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "arrays"
                    },
                    "property": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "seen"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "caches"
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "LabeledStatement",
                "label": {
                  "type": "Identifier",
                  "name": "outer"
                },
                "body": {
                  "type": "WhileStatement",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "<",
                      "left": {
                        "type": "UpdateExpression",
                        "operator": "++",
                        "argument": {
                          "type": "Identifier",
                          "name": "index"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "<",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "result"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "maxLength"
                      }
                    }
                  },
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "computed"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "Identifier",
                                "name": "iteratee"
                              },
                              "consequent": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              },
                              "alternate": {
                                "type": "Identifier",
                                "name": "value"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "||",
                              "left": {
                                "type": "Identifier",
                                "name": "comparator"
                              },
                              "right": {
                                "type": "BinaryExpression",
                                "operator": "!==",
                                "left": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                }
                              }
                            },
                            "consequent": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          }
                        }
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "seen"
                            },
                            "consequent": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "cacheHas"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "seen"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "computed"
                                }
                              ]
                            },
                            "alternate": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "includes"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "computed"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "comparator"
                                }
                              ]
                            }
                          },
                          "prefix": true
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "othIndex"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "othLength"
                                }
                              }
                            },
                            {
                              "type": "WhileStatement",
                              "test": {
                                "type": "UpdateExpression",
                                "operator": "--",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "othIndex"
                                },
                                "prefix": true
                              },
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "cache"
                                        },
                                        "init": {
                                          "type": "MemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "caches"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "othIndex"
                                          }
                                        }
                                      }
                                    ],
                                    "kind": "const"
                                  },
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "ConditionalExpression",
                                        "test": {
                                          "type": "Identifier",
                                          "name": "cache"
                                        },
                                        "consequent": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "cacheHas"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "cache"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "computed"
                                            }
                                          ]
                                        },
                                        "alternate": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "includes"
                                          },
                                          "arguments": [
                                            {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "arrays"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "othIndex"
                                              }
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "computed"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "comparator"
                                            }
                                          ]
                                        }
                                      },
                                      "prefix": true
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ContinueStatement",
                                          "label": {
                                            "type": "Identifier",
                                            "name": "outer"
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              }
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "Identifier",
                                "name": "seen"
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "seen"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "push"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "computed"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "result"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "push"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "alternate": null
                      }
                    ]
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseIntersection"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of methods like `intersection` that accepts an\n * array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of shared values.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseIsEqual.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIsEqualDeep"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseIsEqualDeep.js",
            "raw": "'./baseIsEqualDeep.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isObjectLike.js",
            "raw": "'../isObjectLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseIsEqual"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "other"
            },
            {
              "type": "Identifier",
              "name": "bitmask"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            },
            {
              "type": "Identifier",
              "name": "stack"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "other"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "other"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isObjectLike"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isObjectLike"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "other"
                          }
                        ]
                      },
                      "prefix": true
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "!==",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "value"
                          }
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "!==",
                          "left": {
                            "type": "Identifier",
                            "name": "other"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "other"
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseIsEqualDeep"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "Identifier",
                      "name": "other"
                    },
                    {
                      "type": "Identifier",
                      "name": "bitmask"
                    },
                    {
                      "type": "Identifier",
                      "name": "customizer"
                    },
                    {
                      "type": "Identifier",
                      "name": "baseIsEqual"
                    },
                    {
                      "type": "Identifier",
                      "name": "stack"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseIsEqual"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseIsEqualDeep.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "Stack"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./Stack.js",
            "raw": "'./Stack.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "equalArrays"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./equalArrays.js",
            "raw": "'./equalArrays.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "equalByTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./equalByTag.js",
            "raw": "'./equalByTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "equalObjects"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./equalObjects.js",
            "raw": "'./equalObjects.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./getTag.js",
            "raw": "'./getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isBuffer"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isBuffer.js",
            "raw": "'../isBuffer.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isTypedArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isTypedArray.js",
            "raw": "'../isTypedArray.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "COMPARE_PARTIAL_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "argsTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Arguments]",
                "raw": "'[object Arguments]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "arrayTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Array]",
                "raw": "'[object Array]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "objectTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Object]",
                "raw": "'[object Object]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasOwnProperty"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "hasOwnProperty"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseIsEqualDeep"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "other"
            },
            {
              "type": "Identifier",
              "name": "bitmask"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            },
            {
              "type": "Identifier",
              "name": "equalFunc"
            },
            {
              "type": "Identifier",
              "name": "stack"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "objIsArr"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "isArray"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "othIsArr"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "isArray"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "other"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "objTag"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "objIsArr"
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "arrayTag"
                      },
                      "alternate": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "getTag"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          }
                        ]
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "othTag"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "othIsArr"
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "arrayTag"
                      },
                      "alternate": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "getTag"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "other"
                          }
                        ]
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "objTag"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "objTag"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "argsTag"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "objectTag"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "objTag"
                    }
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "othTag"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "othTag"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "argsTag"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "objectTag"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "othTag"
                    }
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "objIsObj"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "objTag"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "objectTag"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "othIsObj"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "othTag"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "objectTag"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isSameTag"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "objTag"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "othTag"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "isSameTag"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isBuffer"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "isBuffer"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "other"
                            }
                          ]
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": false,
                              "raw": "false"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "objIsArr"
                        },
                        "right": {
                          "type": "Literal",
                          "value": true,
                          "raw": "true"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "objIsObj"
                        },
                        "right": {
                          "type": "Literal",
                          "value": false,
                          "raw": "false"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "isSameTag"
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "Identifier",
                      "name": "objIsObj"
                    },
                    "prefix": true
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "Identifier",
                          "name": "stack"
                        },
                        "right": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "stack"
                          },
                          "right": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "Stack"
                            },
                            "arguments": []
                          }
                        }
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "Identifier",
                            "name": "objIsArr"
                          },
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isTypedArray"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "object"
                              }
                            ]
                          }
                        },
                        "consequent": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "equalArrays"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            },
                            {
                              "type": "Identifier",
                              "name": "other"
                            },
                            {
                              "type": "Identifier",
                              "name": "bitmask"
                            },
                            {
                              "type": "Identifier",
                              "name": "customizer"
                            },
                            {
                              "type": "Identifier",
                              "name": "equalFunc"
                            },
                            {
                              "type": "Identifier",
                              "name": "stack"
                            }
                          ]
                        },
                        "alternate": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "equalByTag"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            },
                            {
                              "type": "Identifier",
                              "name": "other"
                            },
                            {
                              "type": "Identifier",
                              "name": "objTag"
                            },
                            {
                              "type": "Identifier",
                              "name": "bitmask"
                            },
                            {
                              "type": "Identifier",
                              "name": "customizer"
                            },
                            {
                              "type": "Identifier",
                              "name": "equalFunc"
                            },
                            {
                              "type": "Identifier",
                              "name": "stack"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "BinaryExpression",
                    "operator": "&",
                    "left": {
                      "type": "Identifier",
                      "name": "bitmask"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "COMPARE_PARTIAL_FLAG"
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "objIsWrapped"
                          },
                          "init": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "Identifier",
                              "name": "objIsObj"
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "hasOwnProperty"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "call"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                },
                                {
                                  "type": "Literal",
                                  "value": "__wrapped__",
                                  "raw": "'__wrapped__'"
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othIsWrapped"
                          },
                          "init": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "Identifier",
                              "name": "othIsObj"
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "hasOwnProperty"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "call"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "other"
                                },
                                {
                                  "type": "Literal",
                                  "value": "__wrapped__",
                                  "raw": "'__wrapped__'"
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "Identifier",
                          "name": "objIsWrapped"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "othIsWrapped"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "objUnwrapped"
                                },
                                "init": {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "Identifier",
                                    "name": "objIsWrapped"
                                  },
                                  "consequent": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "object"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "value"
                                      }
                                    },
                                    "arguments": []
                                  },
                                  "alternate": {
                                    "type": "Identifier",
                                    "name": "object"
                                  }
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "othUnwrapped"
                                },
                                "init": {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "Identifier",
                                    "name": "othIsWrapped"
                                  },
                                  "consequent": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "other"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "value"
                                      }
                                    },
                                    "arguments": []
                                  },
                                  "alternate": {
                                    "type": "Identifier",
                                    "name": "other"
                                  }
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "LogicalExpression",
                              "operator": "||",
                              "left": {
                                "type": "Identifier",
                                "name": "stack"
                              },
                              "right": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "stack"
                                },
                                "right": {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Stack"
                                  },
                                  "arguments": []
                                }
                              }
                            }
                          },
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "equalFunc"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "objUnwrapped"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "othUnwrapped"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "bitmask"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "customizer"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "stack"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "isSameTag"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": false,
                        "raw": "false"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "Identifier",
                    "name": "stack"
                  },
                  "right": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "stack"
                    },
                    "right": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Stack"
                      },
                      "arguments": []
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "equalObjects"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    },
                    {
                      "type": "Identifier",
                      "name": "other"
                    },
                    {
                      "type": "Identifier",
                      "name": "bitmask"
                    },
                    {
                      "type": "Identifier",
                      "name": "customizer"
                    },
                    {
                      "type": "Identifier",
                      "name": "equalFunc"
                    },
                    {
                      "type": "Identifier",
                      "name": "stack"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseIsEqualDeep"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for value comparisons. "
        },
        {
          "type": "Block",
          "value": "* `Object#toString` result references. "
        },
        {
          "type": "Block",
          "value": "* Used to check objects for own properties. "
        },
        {
          "type": "Block",
          "value": "*\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseIsMatch.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "Stack"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./Stack.js",
            "raw": "'./Stack.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIsEqual"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseIsEqual.js",
            "raw": "'./baseIsEqual.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "COMPARE_PARTIAL_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "COMPARE_UNORDERED_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 2,
                "raw": "2"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseIsMatch"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "source"
            },
            {
              "type": "Identifier",
              "name": "matchData"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "matchData"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "index"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "noCustomizer"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "Identifier",
                        "name": "customizer"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "Identifier",
                          "name": "length"
                        },
                        "prefix": true
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "data"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "index"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "data"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "matchData"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        }
                      }
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "Identifier",
                            "name": "noCustomizer"
                          },
                          "right": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "property": {
                              "type": "Literal",
                              "value": 2,
                              "raw": "2"
                            }
                          }
                        },
                        "consequent": {
                          "type": "BinaryExpression",
                          "operator": "!==",
                          "left": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "property": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            }
                          },
                          "right": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "data"
                              },
                              "property": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              }
                            }
                          }
                        },
                        "alternate": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "BinaryExpression",
                            "operator": "in",
                            "left": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "data"
                              },
                              "property": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              }
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "object"
                            }
                          },
                          "prefix": true
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": false,
                              "raw": "false"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "data"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "matchData"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        }
                      }
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "key"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "property": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "objValue"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "srcValue"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "property": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "Identifier",
                          "name": "noCustomizer"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "data"
                          },
                          "property": {
                            "type": "Literal",
                            "value": 2,
                            "raw": "2"
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": "===",
                                "left": {
                                  "type": "Identifier",
                                  "name": "objValue"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "undefined"
                                }
                              },
                              "right": {
                                "type": "UnaryExpression",
                                "operator": "!",
                                "argument": {
                                  "type": "BinaryExpression",
                                  "operator": "in",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "key"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "object"
                                  }
                                },
                                "prefix": true
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Literal",
                                    "value": false,
                                    "raw": "false"
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      },
                      "alternate": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "stack"
                                },
                                "init": {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Stack"
                                  },
                                  "arguments": []
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "Identifier",
                              "name": "customizer"
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    "right": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "customizer"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "objValue"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "srcValue"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "key"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "object"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "source"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "stack"
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "undefined"
                                  }
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "baseIsEqual"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "srcValue"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "objValue"
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "operator": "|",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "COMPARE_PARTIAL_FLAG"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "COMPARE_UNORDERED_FLAG"
                                      }
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "customizer"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "stack"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Identifier",
                                  "name": "result"
                                }
                              },
                              "prefix": true
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Literal",
                                    "value": false,
                                    "raw": "false"
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Literal",
                  "value": true,
                  "raw": "true"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseIsMatch"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for value comparisons. "
        },
        {
          "type": "Block",
          "value": "*\n * The base implementation of `isMatch`.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseIsNaN.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseIsNaN"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "!==",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "value"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseIsNaN"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseMatches.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIsMatch"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseIsMatch.js",
            "raw": "'./baseIsMatch.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getMatchData"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./getMatchData.js",
            "raw": "'./getMatchData.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "matchesStrictComparable"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./matchesStrictComparable.js",
            "raw": "'./matchesStrictComparable.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseMatches"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "source"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "matchData"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getMatchData"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "source"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "matchData"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1"
                    }
                  },
                  "right": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "matchData"
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    },
                    "property": {
                      "type": "Literal",
                      "value": 2,
                      "raw": "2"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "matchesStrictComparable"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "matchData"
                              },
                              "property": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              }
                            },
                            "property": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          },
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "matchData"
                              },
                              "property": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              }
                            },
                            "property": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    }
                  ],
                  "body": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "source"
                      }
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseIsMatch"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        },
                        {
                          "type": "Identifier",
                          "name": "source"
                        },
                        {
                          "type": "Identifier",
                          "name": "matchData"
                        }
                      ]
                    }
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseMatches"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseMatchesProperty.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIsEqual"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseIsEqual.js",
            "raw": "'./baseIsEqual.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "get"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../get.js",
            "raw": "'../get.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "hasIn"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../hasIn.js",
            "raw": "'../hasIn.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isKey.js",
            "raw": "'./isKey.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isStrictComparable"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isStrictComparable.js",
            "raw": "'./isStrictComparable.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "matchesStrictComparable"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./matchesStrictComparable.js",
            "raw": "'./matchesStrictComparable.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toKey.js",
            "raw": "'./toKey.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "COMPARE_PARTIAL_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "COMPARE_UNORDERED_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 2,
                "raw": "2"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseMatchesProperty"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "srcValue"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isKey"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "path"
                      }
                    ]
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isStrictComparable"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "srcValue"
                      }
                    ]
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "matchesStrictComparable"
                        },
                        "arguments": [
                          {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "toKey"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "path"
                              }
                            ]
                          },
                          {
                            "type": "Identifier",
                            "name": "srcValue"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "objValue"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "get"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "path"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "Identifier",
                                "name": "objValue"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            },
                            "right": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "Identifier",
                                "name": "objValue"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "srcValue"
                              }
                            }
                          },
                          "consequent": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "hasIn"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "object"
                              },
                              {
                                "type": "Identifier",
                                "name": "path"
                              }
                            ]
                          },
                          "alternate": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "baseIsEqual"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "srcValue"
                              },
                              {
                                "type": "Identifier",
                                "name": "objValue"
                              },
                              {
                                "type": "BinaryExpression",
                                "operator": "|",
                                "left": {
                                  "type": "Identifier",
                                  "name": "COMPARE_PARTIAL_FLAG"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "COMPARE_UNORDERED_FLAG"
                                }
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseMatchesProperty"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for value comparisons. "
        },
        {
          "type": "Block",
          "value": "*\n * The base implementation of `matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseMerge.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "Stack"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./Stack.js",
            "raw": "'./Stack.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "assignMergeValue"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./assignMergeValue.js",
            "raw": "'./assignMergeValue.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFor"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseFor.js",
            "raw": "'./baseFor.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseMergeDeep"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseMergeDeep.js",
            "raw": "'./baseMergeDeep.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isObject.js",
            "raw": "'../isObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "keysIn"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../keysIn.js",
            "raw": "'../keysIn.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseMerge"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "source"
            },
            {
              "type": "Identifier",
              "name": "srcIndex"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            },
            {
              "type": "Identifier",
              "name": "stack"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "source"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": null
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseFor"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "source"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "srcValue"
                        },
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "isObject"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "srcValue"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "stack"
                                    },
                                    "right": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "stack"
                                      },
                                      "right": {
                                        "type": "NewExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "Stack"
                                        },
                                        "arguments": []
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "baseMergeDeep"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "object"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "source"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "key"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "srcIndex"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "baseMerge"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "customizer"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "stack"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "VariableDeclaration",
                                  "declarations": [
                                    {
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "newValue"
                                      },
                                      "init": {
                                        "type": "ConditionalExpression",
                                        "test": {
                                          "type": "Identifier",
                                          "name": "customizer"
                                        },
                                        "consequent": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "customizer"
                                          },
                                          "arguments": [
                                            {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "object"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "key"
                                              }
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "srcValue"
                                            },
                                            {
                                              "type": "TemplateLiteral",
                                              "quasis": [
                                                {
                                                  "type": "TemplateElement",
                                                  "value": {
                                                    "raw": "",
                                                    "cooked": ""
                                                  },
                                                  "tail": false
                                                },
                                                {
                                                  "type": "TemplateElement",
                                                  "value": {
                                                    "raw": "",
                                                    "cooked": ""
                                                  },
                                                  "tail": true
                                                }
                                              ],
                                              "expressions": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "key"
                                                }
                                              ]
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "object"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "source"
                                            },
                                            {
                                              "type": "Identifier",
                                              "name": "stack"
                                            }
                                          ]
                                        },
                                        "alternate": {
                                          "type": "Identifier",
                                          "name": "undefined"
                                        }
                                      }
                                    }
                                  ],
                                  "kind": "let"
                                },
                                {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "===",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "newValue"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "undefined"
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "newValue"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "srcValue"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": null
                                },
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "assignMergeValue"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "object"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "key"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "newValue"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    },
                    {
                      "type": "Identifier",
                      "name": "keysIn"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseMerge"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseMergeDeep.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "assignMergeValue"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./assignMergeValue.js",
            "raw": "'./assignMergeValue.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cloneBuffer"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cloneBuffer.js",
            "raw": "'./cloneBuffer.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cloneTypedArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cloneTypedArray.js",
            "raw": "'./cloneTypedArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "copyArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./copyArray.js",
            "raw": "'./copyArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "initCloneObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./initCloneObject.js",
            "raw": "'./initCloneObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArguments"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isArguments.js",
            "raw": "'../isArguments.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isArrayLikeObject.js",
            "raw": "'../isArrayLikeObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isBuffer"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isBuffer.js",
            "raw": "'../isBuffer.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isObject.js",
            "raw": "'../isObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isPlainObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isPlainObject.js",
            "raw": "'../isPlainObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isTypedArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isTypedArray.js",
            "raw": "'../isTypedArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toPlainObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../toPlainObject.js",
            "raw": "'../toPlainObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseMergeDeep"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "source"
            },
            {
              "type": "Identifier",
              "name": "key"
            },
            {
              "type": "Identifier",
              "name": "srcIndex"
            },
            {
              "type": "Identifier",
              "name": "mergeFunc"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            },
            {
              "type": "Identifier",
              "name": "stack"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "objValue"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "key"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "srcValue"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "source"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "key"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "stacked"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "stack"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "get"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "srcValue"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "stacked"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "assignMergeValue"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          },
                          {
                            "type": "Identifier",
                            "name": "key"
                          },
                          {
                            "type": "Identifier",
                            "name": "stacked"
                          }
                        ]
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": null
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "newValue"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "customizer"
                      },
                      "consequent": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "customizer"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "objValue"
                          },
                          {
                            "type": "Identifier",
                            "name": "srcValue"
                          },
                          {
                            "type": "TemplateLiteral",
                            "quasis": [
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": true
                              }
                            ],
                            "expressions": [
                              {
                                "type": "Identifier",
                                "name": "key"
                              }
                            ]
                          },
                          {
                            "type": "Identifier",
                            "name": "object"
                          },
                          {
                            "type": "Identifier",
                            "name": "source"
                          },
                          {
                            "type": "Identifier",
                            "name": "stack"
                          }
                        ]
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isCommon"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "newValue"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "isCommon"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "isArr"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "isArray"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "srcValue"
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "isBuff"
                          },
                          "init": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "Identifier",
                                "name": "isArr"
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "isBuffer"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "srcValue"
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "isTyped"
                          },
                          "init": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "UnaryExpression",
                                "operator": "!",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "isArr"
                                },
                                "prefix": true
                              },
                              "right": {
                                "type": "UnaryExpression",
                                "operator": "!",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "isBuff"
                                },
                                "prefix": true
                              }
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "isTypedArray"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "srcValue"
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "newValue"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "srcValue"
                        }
                      }
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "Identifier",
                            "name": "isArr"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "isBuff"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "isTyped"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Array"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "isArray"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "objValue"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "newValue"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "objValue"
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": {
                              "type": "IfStatement",
                              "test": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isArrayLikeObject"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "objValue"
                                  }
                                ]
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "newValue"
                                      },
                                      "right": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "copyArray"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "objValue"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "alternate": {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "isBuff"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "isCommon"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": false,
                                          "raw": "false"
                                        }
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "newValue"
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "cloneBuffer"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "srcValue"
                                            },
                                            {
                                              "type": "Literal",
                                              "value": true,
                                              "raw": "true"
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "Identifier",
                                    "name": "isTyped"
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "isCommon"
                                          },
                                          "right": {
                                            "type": "Literal",
                                            "value": false,
                                            "raw": "false"
                                          }
                                        }
                                      },
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "newValue"
                                          },
                                          "right": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "cloneTypedArray"
                                            },
                                            "arguments": [
                                              {
                                                "type": "Identifier",
                                                "name": "srcValue"
                                              },
                                              {
                                                "type": "Literal",
                                                "value": true,
                                                "raw": "true"
                                              }
                                            ]
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "newValue"
                                          },
                                          "right": {
                                            "type": "ArrayExpression",
                                            "elements": []
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isPlainObject"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "srcValue"
                              }
                            ]
                          },
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isArguments"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "srcValue"
                              }
                            ]
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "newValue"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "objValue"
                                }
                              }
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isArguments"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "objValue"
                                  }
                                ]
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "newValue"
                                      },
                                      "right": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "toPlainObject"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "objValue"
                                          }
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "alternate": {
                                "type": "IfStatement",
                                "test": {
                                  "type": "LogicalExpression",
                                  "operator": "||",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "==",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "typeof",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "objValue"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "function",
                                      "raw": "'function'"
                                    }
                                  },
                                  "right": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "isObject"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "objValue"
                                        }
                                      ]
                                    },
                                    "prefix": true
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "newValue"
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "initCloneObject"
                                          },
                                          "arguments": [
                                            {
                                              "type": "Identifier",
                                              "name": "srcValue"
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              }
                            }
                          ]
                        },
                        "alternate": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "isCommon"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": false,
                                  "raw": "false"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "isCommon"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "stack"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "set"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "srcValue"
                          },
                          {
                            "type": "Identifier",
                            "name": "newValue"
                          }
                        ]
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "mergeFunc"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "newValue"
                          },
                          {
                            "type": "Identifier",
                            "name": "srcValue"
                          },
                          {
                            "type": "Identifier",
                            "name": "srcIndex"
                          },
                          {
                            "type": "Identifier",
                            "name": "customizer"
                          },
                          {
                            "type": "Identifier",
                            "name": "stack"
                          }
                        ]
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "stack"
                          },
                          "property": {
                            "type": "Literal",
                            "value": "delete",
                            "raw": "'delete'"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "srcValue"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "assignMergeValue"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    },
                    {
                      "type": "Identifier",
                      "name": "key"
                    },
                    {
                      "type": "Identifier",
                      "name": "newValue"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseMergeDeep"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n "
        },
        {
          "type": "Line",
          "value": " Recursively merge objects and arrays (susceptible to call stack limits)."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseOrderBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseEach"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseEach.js",
            "raw": "'./baseEach.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSortBy"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseSortBy.js",
            "raw": "'./baseSortBy.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseGet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseGet.js",
            "raw": "'./baseGet.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "compareMultiple"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./compareMultiple.js",
            "raw": "'./compareMultiple.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isArrayLike.js",
            "raw": "'../isArrayLike.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "identity"
              },
              "init": {
                "type": "ArrowFunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "value"
                  }
                ],
                "body": {
                  "type": "Identifier",
                  "name": "value"
                },
                "generator": false,
                "expression": true,
                "async": false
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseOrderBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratees"
            },
            {
              "type": "Identifier",
              "name": "orders"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "iteratees"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "iteratees"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "iteratees"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "map"
                            }
                          },
                          "arguments": [
                            {
                              "type": "ArrowFunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                }
                              ],
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "Array"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "isArray"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "iteratee"
                                        }
                                      ]
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ReturnStatement",
                                          "argument": {
                                            "type": "ArrowFunctionExpression",
                                            "id": null,
                                            "params": [
                                              {
                                                "type": "Identifier",
                                                "name": "value"
                                              }
                                            ],
                                            "body": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "baseGet"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "value"
                                                },
                                                {
                                                  "type": "Identifier",
                                                  "name": "iteratee"
                                                }
                                              ]
                                            },
                                            "generator": false,
                                            "expression": true,
                                            "async": false
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  },
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "iteratee"
                                    }
                                  }
                                ]
                              },
                              "generator": false,
                              "expression": false,
                              "async": false
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "alternate": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "iteratees"
                        },
                        "right": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Identifier",
                              "name": "identity"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "criteriaIndex"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "eachIndex"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isArrayLike"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "collection"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "Array"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "collection"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "length"
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseEach"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "criteria"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "iteratees"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "map"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "ArrowFunctionExpression",
                                      "id": null,
                                      "params": [
                                        {
                                          "type": "Identifier",
                                          "name": "iteratee"
                                        }
                                      ],
                                      "body": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "iteratee"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "value"
                                          }
                                        ]
                                      },
                                      "generator": false,
                                      "expression": true,
                                      "async": false
                                    }
                                  ]
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "eachIndex"
                                  },
                                  "prefix": true
                                }
                              },
                              "right": {
                                "type": "ObjectExpression",
                                "properties": [
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "criteria"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "criteria"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": true
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "index"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "UpdateExpression",
                                      "operator": "++",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "criteriaIndex"
                                      },
                                      "prefix": true
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": false
                                  },
                                  {
                                    "type": "Property",
                                    "key": {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    "computed": false,
                                    "value": {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    "kind": "init",
                                    "method": false,
                                    "shorthand": true
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseSortBy"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "result"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        },
                        {
                          "type": "Identifier",
                          "name": "other"
                        }
                      ],
                      "body": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "compareMultiple"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          },
                          {
                            "type": "Identifier",
                            "name": "other"
                          },
                          {
                            "type": "Identifier",
                            "name": "orders"
                          }
                        ]
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseOrderBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/basePick.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "basePickBy"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./basePickBy.js",
            "raw": "'./basePickBy.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "hasIn"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../hasIn.js",
            "raw": "'../hasIn.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "basePick"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "paths"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "basePickBy"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    },
                    {
                      "type": "Identifier",
                      "name": "paths"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        },
                        {
                          "type": "Identifier",
                          "name": "path"
                        }
                      ],
                      "body": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "hasIn"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          },
                          {
                            "type": "Identifier",
                            "name": "path"
                          }
                        ]
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "basePick"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/basePickBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseGet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseGet.js",
            "raw": "'./baseGet.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseSet.js",
            "raw": "'./baseSet.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castPath"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./castPath.js",
            "raw": "'./castPath.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "basePickBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "paths"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "paths"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "path"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "paths"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "baseGet"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "object"
                              },
                              {
                                "type": "Identifier",
                                "name": "path"
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "predicate"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          },
                          {
                            "type": "Identifier",
                            "name": "path"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "baseSet"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "castPath"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "path"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "object"
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "basePickBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `pickBy`.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseProperty.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseProperty"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "key"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    }
                  ],
                  "body": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "undefined"
                    },
                    "alternate": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "key"
                      }
                    }
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseProperty"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/basePropertyDeep.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseGet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseGet.js",
            "raw": "'./baseGet.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "basePropertyDeep"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "path"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    }
                  ],
                  "body": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseGet"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "path"
                      }
                    ]
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "basePropertyDeep"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/basePropertyOf.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "basePropertyOf"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ],
                  "body": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "undefined"
                    },
                    "alternate": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "key"
                      }
                    }
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "basePropertyOf"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/basePullAll.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../map.js",
            "raw": "'../map.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIndexOf"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseIndexOf.js",
            "raw": "'./baseIndexOf.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIndexOfWith"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseIndexOfWith.js",
            "raw": "'./baseIndexOfWith.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "copyArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./copyArray.js",
            "raw": "'./copyArray.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "basePullAll"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "values"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "comparator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "indexOf"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "comparator"
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "baseIndexOfWith"
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "baseIndexOf"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "values"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "seen"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "array"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "values"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "values"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "copyArray"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "values"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "iteratee"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "seen"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "map"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "array"
                            },
                            {
                              "type": "ArrowFunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              ],
                              "body": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              },
                              "generator": false,
                              "expression": true,
                              "async": false
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "fromIndex"
                          },
                          "init": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        }
                      ],
                      "kind": "let"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "values"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "computed"
                          },
                          "init": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "iteratee"
                            },
                            "consequent": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "iteratee"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              ]
                            },
                            "alternate": {
                              "type": "Identifier",
                              "name": "value"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "WhileStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "fromIndex"
                          },
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "indexOf"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "seen"
                              },
                              {
                                "type": "Identifier",
                                "name": "computed"
                              },
                              {
                                "type": "Identifier",
                                "name": "fromIndex"
                              },
                              {
                                "type": "Identifier",
                                "name": "comparator"
                              }
                            ]
                          }
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "-",
                          "argument": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          },
                          "prefix": true
                        }
                      },
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "!==",
                              "left": {
                                "type": "Identifier",
                                "name": "seen"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "array"
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "seen"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "splice"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "fromIndex"
                                      },
                                      {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "array"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "splice"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "fromIndex"
                                },
                                {
                                  "type": "Literal",
                                  "value": 1,
                                  "raw": "1"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "array"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "basePullAll"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `pullAllBy`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/basePullAt.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseUnset"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseUnset.js",
            "raw": "'./baseUnset.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isIndex.js",
            "raw": "'./isIndex.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "basePullAt"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "indexes"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "consequent": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "indexes"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      },
                      "alternate": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "lastIndex"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "previous"
                          },
                          "init": null
                        }
                      ],
                      "kind": "let"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "index"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "indexes"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "length"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "==",
                          "left": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "lastIndex"
                          }
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "!==",
                          "left": {
                            "type": "Identifier",
                            "name": "index"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "previous"
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "previous"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            }
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "isIndex"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "index"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "array"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "splice"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "index"
                                      },
                                      {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "baseUnset"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "array"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "index"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "array"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "basePullAt"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `pullAt` without support for individual\n * indexes or capturing the removed elements.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {number[]} indexes The indexes of elements to remove.\n * @returns {Array} Returns `array`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseRange.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseRange"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "start"
            },
            {
              "type": "Identifier",
              "name": "end"
            },
            {
              "type": "Identifier",
              "name": "step"
            },
            {
              "type": "Identifier",
              "name": "fromRight"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Math"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "max"
                        }
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Math"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "ceil"
                            }
                          },
                          "arguments": [
                            {
                              "type": "BinaryExpression",
                              "operator": "/",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": "-",
                                "left": {
                                  "type": "Identifier",
                                  "name": "end"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "start"
                                }
                              },
                              "right": {
                                "type": "LogicalExpression",
                                "operator": "||",
                                "left": {
                                  "type": "Identifier",
                                  "name": "step"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 1,
                                  "raw": "1"
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      ]
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "length"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "fromRight"
                            },
                            "consequent": {
                              "type": "Identifier",
                              "name": "length"
                            },
                            "alternate": {
                              "type": "UpdateExpression",
                              "operator": "++",
                              "argument": {
                                "type": "Identifier",
                                "name": "index"
                              },
                              "prefix": true
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "start"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "+=",
                        "left": {
                          "type": "Identifier",
                          "name": "start"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "step"
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseRange"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `range` and `rangeRight` which doesn't\n * coerce arguments.\n *\n * @private\n * @param {number} start The start of the range.\n * @param {number} end The end of the range.\n * @param {number} step The value to increment or decrement by.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the range of numbers.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseReduce.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseReduce"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "accumulator"
            },
            {
              "type": "Identifier",
              "name": "initAccum"
            },
            {
              "type": "Identifier",
              "name": "eachFunc"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "eachFunc"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        },
                        {
                          "type": "Identifier",
                          "name": "index"
                        },
                        {
                          "type": "Identifier",
                          "name": "collection"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "accumulator"
                              },
                              "right": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "initAccum"
                                },
                                "consequent": {
                                  "type": "SequenceExpression",
                                  "expressions": [
                                    {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "initAccum"
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": false,
                                        "raw": "false"
                                      }
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "value"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "iteratee"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "accumulator"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "index"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "collection"
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "accumulator"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseReduce"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `reduce` and `reduceRight` which iterates\n * over `collection` using `eachFunc`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} accumulator The initial value.\n * @param {boolean} initAccum Specify using the first or last element of\n *  `collection` as the initial value.\n * @param {Function} eachFunc The function to iterate over `collection`.\n * @returns {*} Returns the accumulated value.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseSet.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "assignValue"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./assignValue.js",
            "raw": "'./assignValue.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castPath"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./castPath.js",
            "raw": "'./castPath.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isIndex.js",
            "raw": "'./isIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isObject.js",
            "raw": "'../isObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toKey.js",
            "raw": "'./toKey.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseSet"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isObject"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "object"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "path"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "castPath"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "path"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "lastIndex"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "nested"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "object"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "Identifier",
                      "name": "nested"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "UpdateExpression",
                      "operator": "++",
                      "argument": {
                        "type": "Identifier",
                        "name": "index"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "key"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "toKey"
                            },
                            "arguments": [
                              {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "path"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "index"
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "newValue"
                          },
                          "init": {
                            "type": "Identifier",
                            "name": "value"
                          }
                        }
                      ],
                      "kind": "let"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "!=",
                        "left": {
                          "type": "Identifier",
                          "name": "index"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "lastIndex"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "objValue"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "nested"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "key"
                                  }
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "newValue"
                              },
                              "right": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "customizer"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "customizer"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "objValue"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "nested"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Identifier",
                                  "name": "undefined"
                                }
                              }
                            }
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "Identifier",
                                "name": "newValue"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "newValue"
                                    },
                                    "right": {
                                      "type": "ConditionalExpression",
                                      "test": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "isObject"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "objValue"
                                          }
                                        ]
                                      },
                                      "consequent": {
                                        "type": "Identifier",
                                        "name": "objValue"
                                      },
                                      "alternate": {
                                        "type": "ConditionalExpression",
                                        "test": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "Identifier",
                                            "name": "isIndex"
                                          },
                                          "arguments": [
                                            {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "path"
                                              },
                                              "property": {
                                                "type": "BinaryExpression",
                                                "operator": "+",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "index"
                                                },
                                                "right": {
                                                  "type": "Literal",
                                                  "value": 1,
                                                  "raw": "1"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "consequent": {
                                          "type": "ArrayExpression",
                                          "elements": []
                                        },
                                        "alternate": {
                                          "type": "ObjectExpression",
                                          "properties": []
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "assignValue"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "nested"
                          },
                          {
                            "type": "Identifier",
                            "name": "key"
                          },
                          {
                            "type": "Identifier",
                            "name": "newValue"
                          }
                        ]
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "nested"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "nested"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "key"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "object"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseSet"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseSortBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseSortBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "comparer"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "array"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "sort"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "comparer"
                    }
                  ]
                }
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "array"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "length"
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "value"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "array"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseSortBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseSortedIndex.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSortedIndexBy"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseSortedIndexBy.js",
            "raw": "'./baseSortedIndexBy.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isSymbol.js",
            "raw": "'../isSymbol.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "MAX_ARRAY_LENGTH"
              },
              "init": {
                "type": "Literal",
                "value": 4294967295,
                "raw": "4294967295"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "HALF_MAX_ARRAY_LENGTH"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": ">>>",
                "left": {
                  "type": "Identifier",
                  "name": "MAX_ARRAY_LENGTH"
                },
                "right": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseSortedIndex"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "retHighest"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "low"
                    },
                    "init": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "high"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "low"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "number",
                        "raw": "'number'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "<=",
                    "left": {
                      "type": "Identifier",
                      "name": "high"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "HALF_MAX_ARRAY_LENGTH"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "WhileStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "<",
                        "left": {
                          "type": "Identifier",
                          "name": "low"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "high"
                        }
                      },
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "mid"
                                },
                                "init": {
                                  "type": "BinaryExpression",
                                  "operator": ">>>",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "low"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "high"
                                    }
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                  }
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "computed"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "array"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "mid"
                                  }
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "computed"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": null,
                                    "raw": "null"
                                  }
                                },
                                "right": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "isSymbol"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "computed"
                                      }
                                    ]
                                  },
                                  "prefix": true
                                }
                              },
                              "right": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "retHighest"
                                },
                                "consequent": {
                                  "type": "BinaryExpression",
                                  "operator": "<=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "computed"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                },
                                "alternate": {
                                  "type": "BinaryExpression",
                                  "operator": "<",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "computed"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                }
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "low"
                                    },
                                    "right": {
                                      "type": "BinaryExpression",
                                      "operator": "+",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "mid"
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "high"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "mid"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "high"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseSortedIndexBy"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ],
                      "body": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    },
                    {
                      "type": "Identifier",
                      "name": "retHighest"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseSortedIndex"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for the maximum length and index of an array. "
        },
        {
          "type": "Block",
          "value": "*\n * The base implementation of `sortedIndex` and `sortedLastIndex` which\n * performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseSortedIndexBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isSymbol.js",
            "raw": "'../isSymbol.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "MAX_ARRAY_LENGTH"
              },
              "init": {
                "type": "Literal",
                "value": 4294967295,
                "raw": "4294967295"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "MAX_ARRAY_INDEX"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "-",
                "left": {
                  "type": "Identifier",
                  "name": "MAX_ARRAY_LENGTH"
                },
                "right": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseSortedIndexBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "retHighest"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "iteratee"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "low"
                    },
                    "init": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "high"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "valIsNaN"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "valIsNull"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "valIsSymbol"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isSymbol"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "valIsUndefined"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "low"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "high"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "setLow"
                          },
                          "init": null
                        }
                      ],
                      "kind": "let"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "mid"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Math"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "floor"
                              }
                            },
                            "arguments": [
                              {
                                "type": "BinaryExpression",
                                "operator": "/",
                                "left": {
                                  "type": "BinaryExpression",
                                  "operator": "+",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "low"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "high"
                                  }
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 2,
                                  "raw": "2"
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "computed"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "iteratee"
                            },
                            "arguments": [
                              {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "array"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "mid"
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othIsDefined"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "!==",
                            "left": {
                              "type": "Identifier",
                              "name": "computed"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othIsNull"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "computed"
                            },
                            "right": {
                              "type": "Literal",
                              "value": null,
                              "raw": "null"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othIsReflexive"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "computed"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "computed"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othIsSymbol"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isSymbol"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "computed"
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "valIsNaN"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "setLow"
                              },
                              "right": {
                                "type": "LogicalExpression",
                                "operator": "||",
                                "left": {
                                  "type": "Identifier",
                                  "name": "retHighest"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "othIsReflexive"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "Identifier",
                          "name": "valIsUndefined"
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "setLow"
                                },
                                "right": {
                                  "type": "LogicalExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "othIsReflexive"
                                  },
                                  "right": {
                                    "type": "LogicalExpression",
                                    "operator": "||",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "retHighest"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "othIsDefined"
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        },
                        "alternate": {
                          "type": "IfStatement",
                          "test": {
                            "type": "Identifier",
                            "name": "valIsNull"
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "setLow"
                                  },
                                  "right": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "LogicalExpression",
                                      "operator": "&&",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "othIsReflexive"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "othIsDefined"
                                      }
                                    },
                                    "right": {
                                      "type": "LogicalExpression",
                                      "operator": "||",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "retHighest"
                                      },
                                      "right": {
                                        "type": "UnaryExpression",
                                        "operator": "!",
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "othIsNull"
                                        },
                                        "prefix": true
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          "alternate": {
                            "type": "IfStatement",
                            "test": {
                              "type": "Identifier",
                              "name": "valIsSymbol"
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "setLow"
                                    },
                                    "right": {
                                      "type": "LogicalExpression",
                                      "operator": "&&",
                                      "left": {
                                        "type": "LogicalExpression",
                                        "operator": "&&",
                                        "left": {
                                          "type": "LogicalExpression",
                                          "operator": "&&",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "othIsReflexive"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "othIsDefined"
                                          }
                                        },
                                        "right": {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "othIsNull"
                                          },
                                          "prefix": true
                                        }
                                      },
                                      "right": {
                                        "type": "LogicalExpression",
                                        "operator": "||",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "retHighest"
                                        },
                                        "right": {
                                          "type": "UnaryExpression",
                                          "operator": "!",
                                          "argument": {
                                            "type": "Identifier",
                                            "name": "othIsSymbol"
                                          },
                                          "prefix": true
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": {
                              "type": "IfStatement",
                              "test": {
                                "type": "LogicalExpression",
                                "operator": "||",
                                "left": {
                                  "type": "Identifier",
                                  "name": "othIsNull"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "othIsSymbol"
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "setLow"
                                      },
                                      "right": {
                                        "type": "Literal",
                                        "value": false,
                                        "raw": "false"
                                      }
                                    }
                                  }
                                ]
                              },
                              "alternate": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "setLow"
                                      },
                                      "right": {
                                        "type": "ConditionalExpression",
                                        "test": {
                                          "type": "Identifier",
                                          "name": "retHighest"
                                        },
                                        "consequent": {
                                          "type": "BinaryExpression",
                                          "operator": "<=",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "computed"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "value"
                                          }
                                        },
                                        "alternate": {
                                          "type": "BinaryExpression",
                                          "operator": "<",
                                          "left": {
                                            "type": "Identifier",
                                            "name": "computed"
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "value"
                                          }
                                        }
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "setLow"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "low"
                              },
                              "right": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                  "type": "Identifier",
                                  "name": "mid"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 1,
                                  "raw": "1"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "high"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "mid"
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Math"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "min"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "high"
                    },
                    {
                      "type": "Identifier",
                      "name": "MAX_ARRAY_INDEX"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseSortedIndexBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for the maximum length and index of an array. "
        },
        {
          "type": "Block",
          "value": "*\n * The base implementation of `sortedIndexBy` and `sortedLastIndexBy`\n * which invokes `iteratee` for `value` and each element of `array` to compute\n * their sort ranking. The iteratee is invoked with one argument (value).\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {Function} iteratee The iteratee invoked per element.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseSortedUniq.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "eq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../eq.js",
            "raw": "'../eq.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseSortedUniq"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "seen"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "resIndex"
                    },
                    "init": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "array"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        },
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "computed"
                          },
                          "init": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "iteratee"
                            },
                            "consequent": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "iteratee"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              ]
                            },
                            "alternate": {
                              "type": "Identifier",
                              "name": "value"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "index"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "eq"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "computed"
                              },
                              {
                                "type": "Identifier",
                                "name": "seen"
                              }
                            ]
                          },
                          "prefix": true
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "seen"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "computed"
                              }
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "resIndex"
                                  },
                                  "prefix": false
                                }
                              },
                              "right": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "value"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                  }
                                },
                                "consequent": {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                },
                                "alternate": {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseSortedUniq"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `sortedUniq` and `sortedUniqBy`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseSum.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseSum"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "ForOfStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "array"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "current"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "iteratee"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "value"
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "!==",
                        "left": {
                          "type": "Identifier",
                          "name": "current"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "result"
                              },
                              "right": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "undefined"
                                  }
                                },
                                "consequent": {
                                  "type": "Identifier",
                                  "name": "current"
                                },
                                "alternate": {
                                  "type": "BinaryExpression",
                                  "operator": "+",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "result"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "current"
                                  }
                                }
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseSum"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `sum` and `sumBy`.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {number} Returns the sum.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseToNumber.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isSymbol.js",
            "raw": "'../isSymbol.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "NAN"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "/",
                "left": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseToNumber"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "number",
                    "raw": "'number'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isSymbol"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "NAN"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "UnaryExpression",
                  "operator": "+",
                  "argument": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "prefix": true
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseToNumber"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "*\n * The base implementation of `toNumber` which doesn't ensure correct\n * conversions of binary, hexadecimal, or octal string values.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseToString.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isSymbol.js",
            "raw": "'../isSymbol.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "INFINITY"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "/",
                "left": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1"
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "symbolToString"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Symbol"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "toString"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseToString"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "string",
                    "raw": "'string'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Array"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "isArray"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "TemplateLiteral",
                        "quasis": [
                          {
                            "type": "TemplateElement",
                            "value": {
                              "raw": "",
                              "cooked": ""
                            },
                            "tail": false
                          },
                          {
                            "type": "TemplateElement",
                            "value": {
                              "raw": "",
                              "cooked": ""
                            },
                            "tail": true
                          }
                        ],
                        "expressions": [
                          {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "map"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "baseToString"
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isSymbol"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "symbolToString"
                        },
                        "consequent": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "symbolToString"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "call"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "",
                          "raw": "''"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "TemplateLiteral",
                      "quasis": [
                        {
                          "type": "TemplateElement",
                          "value": {
                            "raw": "",
                            "cooked": ""
                          },
                          "tail": false
                        },
                        {
                          "type": "TemplateElement",
                          "value": {
                            "raw": "",
                            "cooked": ""
                          },
                          "tail": true
                        }
                      ],
                      "expressions": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "result"
                      },
                      "right": {
                        "type": "Literal",
                        "value": "0",
                        "raw": "'0'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "/",
                        "left": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "value"
                        }
                      },
                      "right": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Identifier",
                          "name": "INFINITY"
                        },
                        "prefix": true
                      }
                    }
                  },
                  "consequent": {
                    "type": "Literal",
                    "value": "-0",
                    "raw": "'-0'"
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "result"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseToString"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "* Used to convert symbols to primitives and strings. "
        },
        {
          "type": "Block",
          "value": "*\n * The base implementation of `toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n "
        },
        {
          "type": "Line",
          "value": " Exit early for strings to avoid a performance hit in some environments."
        },
        {
          "type": "Line",
          "value": " Recursively convert values (susceptible to call stack limits)."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseUniq.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "SetCache"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./SetCache.js",
            "raw": "'./SetCache.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayIncludes"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./arrayIncludes.js",
            "raw": "'./arrayIncludes.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayIncludesWith"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./arrayIncludesWith.js",
            "raw": "'./arrayIncludesWith.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cacheHas"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cacheHas.js",
            "raw": "'./cacheHas.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createSet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./createSet.js",
            "raw": "'./createSet.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "setToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./setToArray.js",
            "raw": "'./setToArray.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "LARGE_ARRAY_SIZE"
              },
              "init": {
                "type": "Literal",
                "value": 200,
                "raw": "200"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseUniq"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "comparator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "includes"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "arrayIncludes"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isCommon"
                    },
                    "init": {
                      "type": "Literal",
                      "value": true,
                      "raw": "true"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "seen"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "result"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "comparator"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "isCommon"
                        },
                        "right": {
                          "type": "Literal",
                          "value": false,
                          "raw": "false"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "includes"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "arrayIncludesWith"
                        }
                      }
                    }
                  ]
                },
                "alternate": {
                  "type": "IfStatement",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": ">=",
                    "left": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "LARGE_ARRAY_SIZE"
                    }
                  },
                  "consequent": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "set"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "Identifier",
                                "name": "iteratee"
                              },
                              "consequent": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              },
                              "alternate": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "createSet"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "array"
                                  }
                                ]
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "Identifier",
                          "name": "set"
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "setToArray"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "set"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "isCommon"
                          },
                          "right": {
                            "type": "Literal",
                            "value": false,
                            "raw": "false"
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "includes"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "cacheHas"
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "seen"
                          },
                          "right": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "SetCache"
                            },
                            "arguments": []
                          }
                        }
                      }
                    ]
                  },
                  "alternate": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "seen"
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "iteratee"
                            },
                            "consequent": {
                              "type": "ArrayExpression",
                              "elements": []
                            },
                            "alternate": {
                              "type": "Identifier",
                              "name": "result"
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              },
              {
                "type": "LabeledStatement",
                "label": {
                  "type": "Identifier",
                  "name": "outer"
                },
                "body": {
                  "type": "WhileStatement",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "UpdateExpression",
                      "operator": "++",
                      "argument": {
                        "type": "Identifier",
                        "name": "index"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  },
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "computed"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "Identifier",
                                "name": "iteratee"
                              },
                              "consequent": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              },
                              "alternate": {
                                "type": "Identifier",
                                "name": "value"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "||",
                              "left": {
                                "type": "Identifier",
                                "name": "comparator"
                              },
                              "right": {
                                "type": "BinaryExpression",
                                "operator": "!==",
                                "left": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                }
                              }
                            },
                            "consequent": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          }
                        }
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "Identifier",
                            "name": "isCommon"
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "computed"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "computed"
                            }
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "seenIndex"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "seen"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "length"
                                    }
                                  }
                                }
                              ],
                              "kind": "let"
                            },
                            {
                              "type": "WhileStatement",
                              "test": {
                                "type": "UpdateExpression",
                                "operator": "--",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "seenIndex"
                                },
                                "prefix": false
                              },
                              "body": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "seen"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "seenIndex"
                                        }
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "computed"
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "ContinueStatement",
                                          "label": {
                                            "type": "Identifier",
                                            "name": "outer"
                                          }
                                        }
                                      ]
                                    },
                                    "alternate": null
                                  }
                                ]
                              }
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "Identifier",
                                "name": "iteratee"
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "seen"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "push"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "computed"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "result"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "push"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "alternate": {
                          "type": "IfStatement",
                          "test": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "includes"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "seen"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "computed"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "comparator"
                                }
                              ]
                            },
                            "prefix": true
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!==",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "seen"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "result"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "seen"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "push"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "computed"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "push"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "value"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "alternate": null
                        }
                      }
                    ]
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseUniq"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as the size to enable large array optimizations. "
        },
        {
          "type": "Block",
          "value": "*\n * The base implementation of `uniqBy`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseUnset.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castPath"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./castPath.js",
            "raw": "'./castPath.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "last"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../last.js",
            "raw": "'../last.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "parent"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./parent.js",
            "raw": "'./parent.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toKey.js",
            "raw": "'./toKey.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseUnset"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "path"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "castPath"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "parent"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "path"
                      }
                    ]
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "delete",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "property": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "toKey"
                        },
                        "arguments": [
                          {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "last"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "path"
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "prefix": true
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseUnset"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The property path to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseUpdate.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseGet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseGet.js",
            "raw": "'./baseGet.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseSet.js",
            "raw": "'./baseSet.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseUpdate"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "updater"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseSet"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    },
                    {
                      "type": "Identifier",
                      "name": "path"
                    },
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "updater"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "baseGet"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            },
                            {
                              "type": "Identifier",
                              "name": "path"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "name": "customizer"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseUpdate"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `update`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to update.\n * @param {Function} updater The function to produce the updated value.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseValues.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseValues"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "props"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "props"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "consequent": {
                    "type": "ArrayExpression",
                    "elements": []
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "props"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "map"
                      }
                    },
                    "arguments": [
                      {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [
                          {
                            "type": "Identifier",
                            "name": "key"
                          }
                        ],
                        "body": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "key"
                          }
                        },
                        "generator": false,
                        "expression": true,
                        "async": false
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseValues"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of `values` and `valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseWhile.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "slice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../slice.js",
            "raw": "'../slice.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseWhile"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            },
            {
              "type": "Identifier",
              "name": "isDrop"
            },
            {
              "type": "Identifier",
              "name": "fromRight"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "fromRight"
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "alternate": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        "prefix": true
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "Identifier",
                      "name": "fromRight"
                    },
                    "consequent": {
                      "type": "UpdateExpression",
                      "operator": "--",
                      "argument": {
                        "type": "Identifier",
                        "name": "index"
                      },
                      "prefix": false
                    },
                    "alternate": {
                      "type": "BinaryExpression",
                      "operator": "<",
                      "left": {
                        "type": "UpdateExpression",
                        "operator": "++",
                        "argument": {
                          "type": "Identifier",
                          "name": "index"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "predicate"
                    },
                    "arguments": [
                      {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "index"
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "index"
                      },
                      {
                        "type": "Identifier",
                        "name": "array"
                      }
                    ]
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": []
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "Identifier",
                    "name": "isDrop"
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "slice"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "fromRight"
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "index"
                        }
                      },
                      {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "fromRight"
                        },
                        "consequent": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "Identifier",
                            "name": "index"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          }
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    ]
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "slice"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "fromRight"
                        },
                        "consequent": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "Identifier",
                            "name": "index"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          }
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      },
                      {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "fromRight"
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "length"
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "index"
                        }
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseWhile"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of methods like `dropWhile` and `takeWhile`.\n *\n * @private\n * @param {Array} array The array to query.\n * @param {Function} predicate The function invoked per iteration.\n * @param {boolean} [isDrop] Specify dropping elements instead of taking them.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Array} Returns the slice of `array`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseXor.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseDifference"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseDifference.js",
            "raw": "'./baseDifference.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseFlatten.js",
            "raw": "'./baseFlatten.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseUniq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseUniq.js",
            "raw": "'./baseUniq.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseXor"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "arrays"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "comparator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "arrays"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 2,
                    "raw": "2"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "length"
                        },
                        "consequent": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "baseUniq"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "arrays"
                              },
                              "property": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              }
                            }
                          ]
                        },
                        "alternate": {
                          "type": "ArrayExpression",
                          "elements": []
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "length"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "arrays"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othIndex"
                          },
                          "init": {
                            "type": "UnaryExpression",
                            "operator": "-",
                            "argument": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            },
                            "prefix": true
                          }
                        }
                      ],
                      "kind": "let"
                    },
                    {
                      "type": "WhileStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "<",
                        "left": {
                          "type": "UpdateExpression",
                          "operator": "++",
                          "argument": {
                            "type": "Identifier",
                            "name": "othIndex"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      },
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "!=",
                              "left": {
                                "type": "Identifier",
                                "name": "othIndex"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "result"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "index"
                                      }
                                    },
                                    "right": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "baseDifference"
                                      },
                                      "arguments": [
                                        {
                                          "type": "LogicalExpression",
                                          "operator": "||",
                                          "left": {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "result"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "index"
                                            }
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "array"
                                          }
                                        },
                                        {
                                          "type": "MemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "arrays"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "othIndex"
                                          }
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "iteratee"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "comparator"
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseUniq"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseFlatten"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "result"
                        },
                        {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    },
                    {
                      "type": "Identifier",
                      "name": "comparator"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseXor"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The base implementation of methods like `xor` which accepts an array of\n * arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of values.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/baseZipObject.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "baseZipObject"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "props"
            },
            {
              "type": "Identifier",
              "name": "values"
            },
            {
              "type": "Identifier",
              "name": "assignFunc"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "props"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "valsLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "values"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "init": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "<",
                              "left": {
                                "type": "Identifier",
                                "name": "index"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "valsLength"
                              }
                            },
                            "consequent": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "values"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            },
                            "alternate": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "assignFunc"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "result"
                          },
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "props"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "baseZipObject"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This base implementation of `zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/cacheHas.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "cacheHas"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "cache"
            },
            {
              "type": "Identifier",
              "name": "key"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "cache"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "has"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "key"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "cacheHas"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/castArrayLikeObject.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isArrayLikeObject.js",
            "raw": "'../isArrayLikeObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "castArrayLikeObject"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isArrayLikeObject"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "castArrayLikeObject"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Casts `value` to an empty array if it's not an array like object.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array|Object} Returns the cast array-like object.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/castPath.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isKey.js",
            "raw": "'./isKey.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringToPath"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./stringToPath.js",
            "raw": "'./stringToPath.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "castPath"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Array"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "isArray"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isKey"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      },
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "stringToPath"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "castPath"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/castSlice.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "slice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../slice.js",
            "raw": "'../slice.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "castSlice"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "start"
            },
            {
              "type": "Identifier",
              "name": "end"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "end"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "end"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "end"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "Identifier",
                        "name": "start"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": ">=",
                      "left": {
                        "type": "Identifier",
                        "name": "end"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "array"
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "slice"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "start"
                      },
                      {
                        "type": "Identifier",
                        "name": "end"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "castSlice"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/charsEndIndex.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIndexOf"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseIndexOf.js",
            "raw": "'./baseIndexOf.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "charsEndIndex"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "strSymbols"
            },
            {
              "type": "Identifier",
              "name": "chrSymbols"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "strSymbols"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "--",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": false
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": ">",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseIndexOf"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "chrSymbols"
                        },
                        {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "strSymbols"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      ]
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": []
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "index"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "charsEndIndex"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Used by `trim` and `trimEnd` to get the index of the last string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the last unmatched string symbol.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/charsStartIndex.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIndexOf"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseIndexOf.js",
            "raw": "'./baseIndexOf.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "charsStartIndex"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "strSymbols"
            },
            {
              "type": "Identifier",
              "name": "chrSymbols"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "strSymbols"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "UpdateExpression",
                      "operator": "++",
                      "argument": {
                        "type": "Identifier",
                        "name": "index"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": ">",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseIndexOf"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "chrSymbols"
                        },
                        {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "strSymbols"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      ]
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": []
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "index"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "charsStartIndex"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Used by `trim` and `trimStart` to get the index of the first string symbol\n * that is not found in the character symbols.\n *\n * @private\n * @param {Array} strSymbols The string symbols to inspect.\n * @param {Array} chrSymbols The character symbols to find.\n * @returns {number} Returns the index of the first unmatched string symbol.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/cloneArrayBuffer.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "cloneArrayBuffer"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "arrayBuffer"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "arrayBuffer"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "constructor"
                        }
                      },
                      "arguments": [
                        {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "arrayBuffer"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "byteLength"
                          }
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Uint8Array"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "result"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "set"
                    }
                  },
                  "arguments": [
                    {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Uint8Array"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrayBuffer"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "cloneArrayBuffer"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/cloneBuffer.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "root"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./root.js",
            "raw": "'./root.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "freeExports"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "exports"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "object",
                        "raw": "'object'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "exports"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "exports"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "nodeType"
                      }
                    },
                    "prefix": true
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "exports"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "freeModule"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "Identifier",
                        "name": "freeExports"
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "Identifier",
                            "name": "module"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Literal",
                          "value": "object",
                          "raw": "'object'"
                        }
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "module"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "module"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "nodeType"
                      }
                    },
                    "prefix": true
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "module"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "moduleExports"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "Identifier",
                  "name": "freeModule"
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "freeModule"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "exports"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "freeExports"
                  }
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "Buffer"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "Identifier",
                  "name": "moduleExports"
                },
                "consequent": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "root"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "Buffer"
                  }
                },
                "alternate": {
                  "type": "Identifier",
                  "name": "undefined"
                }
              }
            },
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "allocUnsafe"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "Identifier",
                  "name": "Buffer"
                },
                "consequent": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Buffer"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "allocUnsafe"
                  }
                },
                "alternate": {
                  "type": "Identifier",
                  "name": "undefined"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "cloneBuffer"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "buffer"
            },
            {
              "type": "Identifier",
              "name": "isDeep"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "isDeep"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "buffer"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "slice"
                          }
                        },
                        "arguments": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "buffer"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "allocUnsafe"
                      },
                      "consequent": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "allocUnsafe"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "length"
                          }
                        ]
                      },
                      "alternate": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "buffer"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "constructor"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "length"
                          }
                        ]
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "buffer"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "copy"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "result"
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "cloneBuffer"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Detect free variable `exports`. "
        },
        {
          "type": "Block",
          "value": "* Detect free variable `module`. "
        },
        {
          "type": "Block",
          "value": "* Detect the popular CommonJS extension `module.exports`. "
        },
        {
          "type": "Block",
          "value": "* Built-in value references. "
        },
        {
          "type": "Block",
          "value": "*\n * Creates a clone of `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/cloneDataView.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cloneArrayBuffer"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cloneArrayBuffer.js",
            "raw": "'./cloneArrayBuffer.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "cloneDataView"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "dataView"
            },
            {
              "type": "Identifier",
              "name": "isDeep"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "buffer"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "isDeep"
                      },
                      "consequent": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "cloneArrayBuffer"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "dataView"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "buffer"
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "dataView"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "buffer"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "NewExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "dataView"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "constructor"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "buffer"
                    },
                    {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "dataView"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "byteOffset"
                      }
                    },
                    {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "dataView"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "byteLength"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "cloneDataView"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/cloneRegExp.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reFlags"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/\\w*$/",
                "regex": {
                  "pattern": "\\w*$",
                  "flags": ""
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "cloneRegExp"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "regexp"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "regexp"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "constructor"
                        }
                      },
                      "arguments": [
                        {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "regexp"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "source"
                          }
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "reFlags"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "exec"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "regexp"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "lastIndex"
                    }
                  },
                  "right": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "regexp"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "lastIndex"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "cloneRegExp"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to match `RegExp` flags from their coerced string values. "
        },
        {
          "type": "Block",
          "value": "*\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/cloneSymbol.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "symbolValueOf"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Symbol"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "valueOf"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "cloneSymbol"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "symbol"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "symbolValueOf"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "call"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "symbol"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "cloneSymbol"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to convert symbols to primitives and strings. "
        },
        {
          "type": "Block",
          "value": "*\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/cloneTypedArray.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cloneArrayBuffer"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cloneArrayBuffer.js",
            "raw": "'./cloneArrayBuffer.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "cloneTypedArray"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "typedArray"
            },
            {
              "type": "Identifier",
              "name": "isDeep"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "buffer"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "isDeep"
                      },
                      "consequent": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "cloneArrayBuffer"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "typedArray"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "buffer"
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "typedArray"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "buffer"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "NewExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "typedArray"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "constructor"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "buffer"
                    },
                    {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "typedArray"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "byteOffset"
                      }
                    },
                    {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "typedArray"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "cloneTypedArray"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/compareAscending.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isSymbol.js",
            "raw": "'../isSymbol.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "compareAscending"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "other"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!==",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "other"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "valIsDefined"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "!==",
                            "left": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "valIsNull"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "right": {
                              "type": "Literal",
                              "value": null,
                              "raw": "null"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "valIsReflexive"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "value"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "valIsSymbol"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isSymbol"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "value"
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othIsDefined"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "!==",
                            "left": {
                              "type": "Identifier",
                              "name": "other"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othIsNull"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "other"
                            },
                            "right": {
                              "type": "Literal",
                              "value": null,
                              "raw": "null"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othIsReflexive"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "other"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "other"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othIsSymbol"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isSymbol"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "other"
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "val"
                          },
                          "init": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "==",
                              "left": {
                                "type": "UnaryExpression",
                                "operator": "typeof",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "prefix": true
                              },
                              "right": {
                                "type": "Literal",
                                "value": "string",
                                "raw": "'string'"
                              }
                            },
                            "consequent": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "localeCompare"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "other"
                                }
                              ]
                            },
                            "alternate": {
                              "type": "UnaryExpression",
                              "operator": "-",
                              "argument": {
                                "type": "Identifier",
                                "name": "other"
                              },
                              "prefix": true
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "||",
                            "left": {
                              "type": "LogicalExpression",
                              "operator": "||",
                              "left": {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "LogicalExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "othIsNull"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "othIsSymbol"
                                      },
                                      "prefix": true
                                    }
                                  },
                                  "right": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "valIsSymbol"
                                    },
                                    "prefix": true
                                  }
                                },
                                "right": {
                                  "type": "BinaryExpression",
                                  "operator": ">",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "val"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                  }
                                }
                              },
                              "right": {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "LogicalExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "LogicalExpression",
                                      "operator": "&&",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "valIsSymbol"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "othIsDefined"
                                      }
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "othIsReflexive"
                                    }
                                  },
                                  "right": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "othIsNull"
                                    },
                                    "prefix": true
                                  }
                                },
                                "right": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "othIsSymbol"
                                  },
                                  "prefix": true
                                }
                              }
                            },
                            "right": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "Identifier",
                                  "name": "valIsNull"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "othIsDefined"
                                }
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "othIsReflexive"
                              }
                            }
                          },
                          "right": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "Identifier",
                                "name": "valIsDefined"
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "othIsReflexive"
                            }
                          }
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "valIsReflexive"
                          },
                          "prefix": true
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "||",
                            "left": {
                              "type": "LogicalExpression",
                              "operator": "||",
                              "left": {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "LogicalExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "valIsNull"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "UnaryExpression",
                                      "operator": "!",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "valIsSymbol"
                                      },
                                      "prefix": true
                                    }
                                  },
                                  "right": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "othIsSymbol"
                                    },
                                    "prefix": true
                                  }
                                },
                                "right": {
                                  "type": "BinaryExpression",
                                  "operator": "<",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "val"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                  }
                                }
                              },
                              "right": {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "LogicalExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "LogicalExpression",
                                      "operator": "&&",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "othIsSymbol"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "valIsDefined"
                                      }
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "valIsReflexive"
                                    }
                                  },
                                  "right": {
                                    "type": "UnaryExpression",
                                    "operator": "!",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "valIsNull"
                                    },
                                    "prefix": true
                                  }
                                },
                                "right": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "valIsSymbol"
                                  },
                                  "prefix": true
                                }
                              }
                            },
                            "right": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "Identifier",
                                  "name": "othIsNull"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "valIsDefined"
                                }
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "valIsReflexive"
                              }
                            }
                          },
                          "right": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "Identifier",
                                "name": "othIsDefined"
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "valIsReflexive"
                            }
                          }
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "othIsReflexive"
                          },
                          "prefix": true
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "UnaryExpression",
                              "operator": "-",
                              "argument": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                              },
                              "prefix": true
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "compareAscending"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/compareMultiple.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "compareAscending"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./compareAscending.js",
            "raw": "'./compareAscending.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "compareMultiple"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "other"
            },
            {
              "type": "Identifier",
              "name": "orders"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "objCriteria"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "criteria"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "othCriteria"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "other"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "criteria"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "objCriteria"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "ordersLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "orders"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "order"
                          },
                          "init": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "<",
                              "left": {
                                "type": "Identifier",
                                "name": "index"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "ordersLength"
                              }
                            },
                            "consequent": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "orders"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": null,
                              "raw": "null"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "cmpFn"
                          },
                          "init": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "Identifier",
                                "name": "order"
                              },
                              "right": {
                                "type": "BinaryExpression",
                                "operator": "===",
                                "left": {
                                  "type": "UnaryExpression",
                                  "operator": "typeof",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "order"
                                  },
                                  "prefix": true
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "function",
                                  "raw": "'function'"
                                }
                              }
                            },
                            "consequent": {
                              "type": "Identifier",
                              "name": "order"
                            },
                            "alternate": {
                              "type": "Identifier",
                              "name": "compareAscending"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "cmpFn"
                            },
                            "arguments": [
                              {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "objCriteria"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "index"
                                }
                              },
                              {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "othCriteria"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "index"
                                }
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "result"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "Identifier",
                                "name": "order"
                              },
                              "right": {
                                "type": "BinaryExpression",
                                "operator": "!==",
                                "left": {
                                  "type": "UnaryExpression",
                                  "operator": "typeof",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "order"
                                  },
                                  "prefix": true
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "function",
                                  "raw": "'function'"
                                }
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "BinaryExpression",
                                    "operator": "*",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    "right": {
                                      "type": "ConditionalExpression",
                                      "test": {
                                        "type": "BinaryExpression",
                                        "operator": "==",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "order"
                                        },
                                        "right": {
                                          "type": "Literal",
                                          "value": "desc",
                                          "raw": "'desc'"
                                        }
                                      },
                                      "consequent": {
                                        "type": "UnaryExpression",
                                        "operator": "-",
                                        "argument": {
                                          "type": "Literal",
                                          "value": 1,
                                          "raw": "1"
                                        },
                                        "prefix": true
                                      },
                                      "alternate": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                      }
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "result"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "-",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "index"
                    }
                  },
                  "right": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "other"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "index"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "compareMultiple"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Used by `orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {(string|function)[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n "
        },
        {
          "type": "Line",
          "value": " Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications"
        },
        {
          "type": "Line",
          "value": " that causes it, under certain circumstances, to provide the same value for"
        },
        {
          "type": "Line",
          "value": " `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247"
        },
        {
          "type": "Line",
          "value": " for more details."
        },
        {
          "type": "Line",
          "value": ""
        },
        {
          "type": "Line",
          "value": " This also ensures a stable sort in V8 and other engines."
        },
        {
          "type": "Line",
          "value": " See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/composeArgs.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "composeArgs"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "args"
            },
            {
              "type": "Identifier",
              "name": "partials"
            },
            {
              "type": "Identifier",
              "name": "holders"
            },
            {
              "type": "Identifier",
              "name": "isCurried"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "argsLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "args"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "holdersLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "holders"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "leftLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "partials"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "argsIndex"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "leftIndex"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "rangeLength"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Math"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "max"
                        }
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "operator": "-",
                          "left": {
                            "type": "Identifier",
                            "name": "argsLength"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "holdersLength"
                          }
                        },
                        {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      ]
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "Identifier",
                            "name": "leftLength"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "rangeLength"
                          }
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isUncurried"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "Identifier",
                        "name": "isCurried"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "leftIndex"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "leftLength"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "leftIndex"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "partials"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "leftIndex"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "argsIndex"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "holdersLength"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "Identifier",
                          "name": "isUncurried"
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "Identifier",
                            "name": "argsIndex"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "argsLength"
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "holders"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "argsIndex"
                                  }
                                }
                              },
                              "right": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "args"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "argsIndex"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "rangeLength"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                              "type": "Identifier",
                              "name": "leftIndex"
                            },
                            "prefix": false
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "args"
                          },
                          "property": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                              "type": "Identifier",
                              "name": "argsIndex"
                            },
                            "prefix": false
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "composeArgs"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/composeArgsRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "composeArgsRight"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "args"
            },
            {
              "type": "Identifier",
              "name": "partials"
            },
            {
              "type": "Identifier",
              "name": "holders"
            },
            {
              "type": "Identifier",
              "name": "isCurried"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "argsIndex"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "holdersIndex"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "rightIndex"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "argsLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "args"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "holdersLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "holders"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "rightLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "partials"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "rangeLength"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Math"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "max"
                        }
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "operator": "-",
                          "left": {
                            "type": "Identifier",
                            "name": "argsLength"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "holdersLength"
                          }
                        },
                        {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "Identifier",
                            "name": "rangeLength"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "rightLength"
                          }
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isUncurried"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "Identifier",
                        "name": "isCurried"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "argsIndex"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "rangeLength"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "argsIndex"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "args"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "argsIndex"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "offset"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "argsIndex"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "rightIndex"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "rightLength"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                              "type": "Identifier",
                              "name": "offset"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "rightIndex"
                            }
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "partials"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "rightIndex"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "holdersIndex"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "holdersLength"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "Identifier",
                          "name": "isUncurried"
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "Identifier",
                            "name": "argsIndex"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "argsLength"
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "BinaryExpression",
                                  "operator": "+",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "offset"
                                  },
                                  "right": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "holders"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "holdersIndex"
                                    }
                                  }
                                }
                              },
                              "right": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "args"
                                },
                                "property": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "argsIndex"
                                  },
                                  "prefix": false
                                }
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "composeArgsRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This function is like `composeArgs` except that the arguments composition\n * is tailored for `partialRight`.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to append to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/copyArray.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "copyArray"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "source"
            },
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "source"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "Identifier",
                    "name": "array"
                  },
                  "right": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "array"
                    },
                    "right": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "length"
                        }
                      ]
                    }
                  }
                }
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "source"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "array"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "copyArray"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/copyObject.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "assignValue"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./assignValue.js",
            "raw": "'./assignValue.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseAssignValue"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseAssignValue.js",
            "raw": "'./baseAssignValue.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "copyObject"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "source"
            },
            {
              "type": "Identifier",
              "name": "props"
            },
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isNew"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  }
                }
              },
              {
                "type": "ForOfStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "key"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "props"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "newValue"
                          },
                          "init": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "customizer"
                            },
                            "consequent": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "customizer"
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "key"
                                  }
                                },
                                {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "source"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "key"
                                  }
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "source"
                                }
                              ]
                            },
                            "alternate": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          }
                        }
                      ],
                      "kind": "let"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "Identifier",
                          "name": "newValue"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "newValue"
                              },
                              "right": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "source"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "isNew"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "baseAssignValue"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "newValue"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "assignValue"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "newValue"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "object"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "copyObject"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/copySymbols.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "copyObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./copyObject.js",
            "raw": "'./copyObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getSymbols"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./getSymbols.js",
            "raw": "'./getSymbols.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "copySymbols"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "source"
            },
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "copyObject"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "source"
                    },
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getSymbols"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "source"
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "name": "object"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "copySymbols"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/copySymbolsIn.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "copyObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./copyObject.js",
            "raw": "'./copyObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getSymbolsIn"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./getSymbolsIn.js",
            "raw": "'./getSymbolsIn.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "copySymbolsIn"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "source"
            },
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "copyObject"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "source"
                    },
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getSymbolsIn"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "source"
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "name": "object"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "copySymbolsIn"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/createAssigner.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isIterateeCall"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isIterateeCall.js",
            "raw": "'./isIterateeCall.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "createAssigner"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "assigner"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    },
                    {
                      "type": "RestElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "sources"
                      }
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "init": {
                              "type": "UnaryExpression",
                              "operator": "-",
                              "argument": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                              },
                              "prefix": true
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "length"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "sources"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "length"
                              }
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "customizer"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": ">",
                                "left": {
                                  "type": "Identifier",
                                  "name": "length"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 1,
                                  "raw": "1"
                                }
                              },
                              "consequent": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "sources"
                                },
                                "property": {
                                  "type": "BinaryExpression",
                                  "operator": "-",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "length"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                  }
                                }
                              },
                              "alternate": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "guard"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": ">",
                                "left": {
                                  "type": "Identifier",
                                  "name": "length"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 2,
                                  "raw": "2"
                                }
                              },
                              "consequent": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "sources"
                                },
                                "property": {
                                  "type": "Literal",
                                  "value": 2,
                                  "raw": "2"
                                }
                              },
                              "alternate": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "customizer"
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": ">",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "assigner"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "length"
                                  }
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 3,
                                  "raw": "3"
                                }
                              },
                              "right": {
                                "type": "BinaryExpression",
                                "operator": "==",
                                "left": {
                                  "type": "UnaryExpression",
                                  "operator": "typeof",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "customizer"
                                  },
                                  "prefix": true
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "function",
                                  "raw": "'function'"
                                }
                              }
                            },
                            "consequent": {
                              "type": "SequenceExpression",
                              "expressions": [
                                {
                                  "type": "UpdateExpression",
                                  "operator": "--",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "length"
                                  },
                                  "prefix": false
                                },
                                {
                                  "type": "Identifier",
                                  "name": "customizer"
                                }
                              ]
                            },
                            "alternate": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          }
                        }
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "Identifier",
                            "name": "guard"
                          },
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isIterateeCall"
                            },
                            "arguments": [
                              {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "sources"
                                },
                                "property": {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                }
                              },
                              {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "sources"
                                },
                                "property": {
                                  "type": "Literal",
                                  "value": 1,
                                  "raw": "1"
                                }
                              },
                              {
                                "type": "Identifier",
                                "name": "guard"
                              }
                            ]
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "customizer"
                                },
                                "right": {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "<",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "length"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 3,
                                      "raw": "3"
                                    }
                                  },
                                  "consequent": {
                                    "type": "Identifier",
                                    "name": "undefined"
                                  },
                                  "alternate": {
                                    "type": "Identifier",
                                    "name": "customizer"
                                  }
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "length"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 1,
                                  "raw": "1"
                                }
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "Object"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "object"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "type": "WhileStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        },
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "source"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "sources"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "index"
                                    }
                                  }
                                }
                              ],
                              "kind": "const"
                            },
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "Identifier",
                                "name": "source"
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "assigner"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "object"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "source"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "index"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "customizer"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            }
                          ]
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Identifier",
                          "name": "object"
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "createAssigner"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function like `assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/createCaseFirst.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castSlice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./castSlice.js",
            "raw": "'./castSlice.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "hasUnicode"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./hasUnicode.js",
            "raw": "'./hasUnicode.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./stringToArray.js",
            "raw": "'./stringToArray.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "createCaseFirst"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "methodName"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "string"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "string"
                          },
                          "prefix": true
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Literal",
                                "value": "",
                                "raw": "''"
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "strSymbols"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "hasUnicode"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "string"
                                  }
                                ]
                              },
                              "consequent": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "stringToArray"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "string"
                                  }
                                ]
                              },
                              "alternate": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "chr"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "Identifier",
                                "name": "strSymbols"
                              },
                              "consequent": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "strSymbols"
                                },
                                "property": {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                }
                              },
                              "alternate": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "string"
                                },
                                "property": {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                }
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "trailing"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "Identifier",
                                "name": "strSymbols"
                              },
                              "consequent": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "castSlice"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "strSymbols"
                                      },
                                      {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                      }
                                    ]
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "join"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Literal",
                                    "value": "",
                                    "raw": "''"
                                  }
                                ]
                              },
                              "alternate": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "string"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "slice"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                  }
                                ]
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "chr"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "methodName"
                              }
                            },
                            "arguments": []
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "trailing"
                          }
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "createCaseFirst"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function like `lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/createMathOperation.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseToNumber"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseToNumber.js",
            "raw": "'./baseToNumber.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseToString"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseToString.js",
            "raw": "'./baseToString.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "createMathOperation"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "operator"
            },
            {
              "type": "Identifier",
              "name": "defaultValue"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "Identifier",
                      "name": "other"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "other"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Identifier",
                                "name": "defaultValue"
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "!==",
                            "left": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "other"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Identifier",
                                "name": "value"
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "!==",
                            "left": {
                              "type": "Identifier",
                              "name": "other"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Identifier",
                                "name": "other"
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "typeof",
                              "argument": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "Literal",
                              "value": "string",
                              "raw": "'string'"
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "typeof",
                              "argument": {
                                "type": "Identifier",
                                "name": "other"
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "Literal",
                              "value": "string",
                              "raw": "'string'"
                            }
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "baseToString"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "value"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "other"
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "baseToString"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "other"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "alternate": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "baseToNumber"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "value"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "other"
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "baseToNumber"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "other"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "operator"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            },
                            {
                              "type": "Identifier",
                              "name": "other"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "createMathOperation"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that performs a mathematical operation on two values.\n *\n * @private\n * @param {Function} operator The function to perform the operation.\n * @param {number} [defaultValue] The value used for `undefined` arguments.\n * @returns {Function} Returns the new mathematical operation function.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/createPadding.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "repeat"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../repeat.js",
            "raw": "'../repeat.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseToString"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseToString.js",
            "raw": "'./baseToString.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castSlice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./castSlice.js",
            "raw": "'./castSlice.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "hasUnicode"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./hasUnicode.js",
            "raw": "'./hasUnicode.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringSize"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./stringSize.js",
            "raw": "'./stringSize.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./stringToArray.js",
            "raw": "'./stringToArray.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "createPadding"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "length"
            },
            {
              "type": "Identifier",
              "name": "chars"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "chars"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "chars"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": " ",
                      "raw": "' '"
                    },
                    "alternate": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseToString"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "chars"
                        }
                      ]
                    }
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "charsLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "chars"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "charsLength"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 2,
                    "raw": "2"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "charsLength"
                        },
                        "consequent": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "repeat"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "chars"
                            },
                            {
                              "type": "Identifier",
                              "name": "length"
                            }
                          ]
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "chars"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "repeat"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "chars"
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Math"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "ceil"
                            }
                          },
                          "arguments": [
                            {
                              "type": "BinaryExpression",
                              "operator": "/",
                              "left": {
                                "type": "Identifier",
                                "name": "length"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "stringSize"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "chars"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "hasUnicode"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "chars"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "castSlice"
                        },
                        "arguments": [
                          {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "stringToArray"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "result"
                              }
                            ]
                          },
                          {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          },
                          {
                            "type": "Identifier",
                            "name": "length"
                          }
                        ]
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "join"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "",
                        "raw": "''"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "result"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "slice"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      {
                        "type": "Identifier",
                        "name": "length"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "createPadding"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates the padding for `string` based on `length`. The `chars` string\n * is truncated if the number of characters exceeds `length`.\n *\n * @private\n * @param {number} length The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padding for `string`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/createRange.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseRange"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseRange.js",
            "raw": "'./baseRange.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toFinite"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../toFinite.js",
            "raw": "'../toFinite.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "createRange"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "fromRight"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "start"
                    },
                    {
                      "type": "Identifier",
                      "name": "end"
                    },
                    {
                      "type": "Identifier",
                      "name": "step"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "start"
                          },
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "toFinite"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "start"
                              }
                            ]
                          }
                        }
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Identifier",
                            "name": "end"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "undefined"
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "end"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "start"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "start"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                }
                              }
                            }
                          ]
                        },
                        "alternate": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "end"
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "toFinite"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "end"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "step"
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "Identifier",
                                "name": "step"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            },
                            "consequent": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": "<",
                                "left": {
                                  "type": "Identifier",
                                  "name": "start"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "end"
                                }
                              },
                              "consequent": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                              },
                              "alternate": {
                                "type": "UnaryExpression",
                                "operator": "-",
                                "argument": {
                                  "type": "Literal",
                                  "value": 1,
                                  "raw": "1"
                                },
                                "prefix": true
                              }
                            },
                            "alternate": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "toFinite"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "step"
                                }
                              ]
                            }
                          }
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "baseRange"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "start"
                            },
                            {
                              "type": "Identifier",
                              "name": "end"
                            },
                            {
                              "type": "Identifier",
                              "name": "step"
                            },
                            {
                              "type": "Identifier",
                              "name": "fromRight"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "createRange"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a `range` or `rangeRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new range function.\n "
        },
        {
          "type": "Line",
          "value": " Ensure the sign of `-0` is preserved."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/createRound.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "createRound"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "methodName"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "Math"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "methodName"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "number"
                    },
                    {
                      "type": "Identifier",
                      "name": "precision"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "precision"
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "==",
                              "left": {
                                "type": "Identifier",
                                "name": "precision"
                              },
                              "right": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            },
                            "consequent": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            },
                            "alternate": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "BinaryExpression",
                                "operator": ">=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "precision"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                }
                              },
                              "consequent": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Math"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "min"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "precision"
                                  },
                                  {
                                    "type": "Literal",
                                    "value": 292,
                                    "raw": "292"
                                  }
                                ]
                              },
                              "alternate": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Math"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "max"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "precision"
                                  },
                                  {
                                    "type": "UnaryExpression",
                                    "operator": "-",
                                    "argument": {
                                      "type": "Literal",
                                      "value": 292,
                                      "raw": "292"
                                    },
                                    "prefix": true
                                  }
                                ]
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "Identifier",
                          "name": "precision"
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "pair"
                                  },
                                  "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "TemplateLiteral",
                                        "quasis": [
                                          {
                                            "type": "TemplateElement",
                                            "value": {
                                              "raw": "",
                                              "cooked": ""
                                            },
                                            "tail": false
                                          },
                                          {
                                            "type": "TemplateElement",
                                            "value": {
                                              "raw": "e",
                                              "cooked": "e"
                                            },
                                            "tail": true
                                          }
                                        ],
                                        "expressions": [
                                          {
                                            "type": "Identifier",
                                            "name": "number"
                                          }
                                        ]
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "split"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "e",
                                        "raw": "'e'"
                                      }
                                    ]
                                  }
                                }
                              ],
                              "kind": "let"
                            },
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "value"
                                  },
                                  "init": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "func"
                                    },
                                    "arguments": [
                                      {
                                        "type": "TemplateLiteral",
                                        "quasis": [
                                          {
                                            "type": "TemplateElement",
                                            "value": {
                                              "raw": "",
                                              "cooked": ""
                                            },
                                            "tail": false
                                          },
                                          {
                                            "type": "TemplateElement",
                                            "value": {
                                              "raw": "e",
                                              "cooked": "e"
                                            },
                                            "tail": false
                                          },
                                          {
                                            "type": "TemplateElement",
                                            "value": {
                                              "raw": "",
                                              "cooked": ""
                                            },
                                            "tail": true
                                          }
                                        ],
                                        "expressions": [
                                          {
                                            "type": "MemberExpression",
                                            "computed": true,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "pair"
                                            },
                                            "property": {
                                              "type": "Literal",
                                              "value": 0,
                                              "raw": "0"
                                            }
                                          },
                                          {
                                            "type": "BinaryExpression",
                                            "operator": "+",
                                            "left": {
                                              "type": "UnaryExpression",
                                              "operator": "+",
                                              "argument": {
                                                "type": "MemberExpression",
                                                "computed": true,
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "pair"
                                                },
                                                "property": {
                                                  "type": "Literal",
                                                  "value": 1,
                                                  "raw": "1"
                                                }
                                              },
                                              "prefix": true
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "precision"
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              ],
                              "kind": "const"
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "pair"
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "TemplateLiteral",
                                      "quasis": [
                                        {
                                          "type": "TemplateElement",
                                          "value": {
                                            "raw": "",
                                            "cooked": ""
                                          },
                                          "tail": false
                                        },
                                        {
                                          "type": "TemplateElement",
                                          "value": {
                                            "raw": "e",
                                            "cooked": "e"
                                          },
                                          "tail": true
                                        }
                                      ],
                                      "expressions": [
                                        {
                                          "type": "Identifier",
                                          "name": "value"
                                        }
                                      ]
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "split"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "e",
                                      "raw": "'e'"
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "UnaryExpression",
                                "operator": "+",
                                "argument": {
                                  "type": "TemplateLiteral",
                                  "quasis": [
                                    {
                                      "type": "TemplateElement",
                                      "value": {
                                        "raw": "",
                                        "cooked": ""
                                      },
                                      "tail": false
                                    },
                                    {
                                      "type": "TemplateElement",
                                      "value": {
                                        "raw": "e",
                                        "cooked": "e"
                                      },
                                      "tail": false
                                    },
                                    {
                                      "type": "TemplateElement",
                                      "value": {
                                        "raw": "",
                                        "cooked": ""
                                      },
                                      "tail": true
                                    }
                                  ],
                                  "expressions": [
                                    {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "pair"
                                      },
                                      "property": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0"
                                      }
                                    },
                                    {
                                      "type": "BinaryExpression",
                                      "operator": "-",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "+",
                                        "argument": {
                                          "type": "MemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "pair"
                                          },
                                          "property": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                          }
                                        },
                                        "prefix": true
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "precision"
                                      }
                                    }
                                  ]
                                },
                                "prefix": true
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "func"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "number"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "createRound"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function like `round`.\n *\n * @private\n * @param {string} methodName The name of the `Math` method to use when rounding.\n * @returns {Function} Returns the new round function.\n "
        },
        {
          "type": "Line",
          "value": " Shift with exponential notation to avoid floating-point issues."
        },
        {
          "type": "Line",
          "value": " See [MDN](https://mdn.io/round#Examples) for more details."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/createSet.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "setToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./setToArray.js",
            "raw": "'./setToArray.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "INFINITY"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "/",
                "left": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1"
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "createSet"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "Set"
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "/",
                      "left": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "right": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "setToArray"
                          },
                          "arguments": [
                            {
                              "type": "NewExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "Set"
                              },
                              "arguments": [
                                {
                                  "type": "ArrayExpression",
                                  "elements": [
                                    null,
                                    {
                                      "type": "UnaryExpression",
                                      "operator": "-",
                                      "argument": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0"
                                      },
                                      "prefix": true
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        "property": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "INFINITY"
                    }
                  }
                },
                "consequent": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "values"
                    }
                  ],
                  "body": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Set"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "values"
                      }
                    ]
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                },
                "alternate": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "body": []
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "createSet"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "*\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/customDefaultsMerge.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseMerge"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseMerge.js",
            "raw": "'./baseMerge.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isObject.js",
            "raw": "'../isObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "customDefaultsMerge"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "objValue"
            },
            {
              "type": "Identifier",
              "name": "srcValue"
            },
            {
              "type": "Identifier",
              "name": "key"
            },
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "source"
            },
            {
              "type": "Identifier",
              "name": "stack"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isObject"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "objValue"
                      }
                    ]
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isObject"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "srcValue"
                      }
                    ]
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "stack"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "set"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "srcValue"
                          },
                          {
                            "type": "Identifier",
                            "name": "objValue"
                          }
                        ]
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "baseMerge"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "objValue"
                          },
                          {
                            "type": "Identifier",
                            "name": "srcValue"
                          },
                          {
                            "type": "Identifier",
                            "name": "undefined"
                          },
                          {
                            "type": "Identifier",
                            "name": "customDefaultsMerge"
                          },
                          {
                            "type": "Identifier",
                            "name": "stack"
                          }
                        ]
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "stack"
                          },
                          "property": {
                            "type": "Literal",
                            "value": "delete",
                            "raw": "'delete'"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "srcValue"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "objValue"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "customDefaultsMerge"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Used by `defaultsDeep` to customize its `merge` use to merge source\n * objects into destination objects that are passed thru.\n *\n * @private\n * @param {*} objValue The destination value.\n * @param {*} srcValue The source value.\n * @param {string} key The key of the property to merge.\n * @param {Object} object The parent object of `objValue`.\n * @param {Object} source The parent object of `srcValue`.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n * @returns {*} Returns the value to assign.\n "
        },
        {
          "type": "Line",
          "value": " Recursively merge objects and arrays (susceptible to call stack limits)."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/deburrLetter.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "basePropertyOf"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./basePropertyOf.js",
            "raw": "'./basePropertyOf.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "deburredLetters"
              },
              "init": {
                "type": "ObjectExpression",
                "properties": [
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "À",
                      "raw": "'\\xc0'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "A",
                      "raw": "'A'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Á",
                      "raw": "'\\xc1'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "A",
                      "raw": "'A'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Â",
                      "raw": "'\\xc2'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "A",
                      "raw": "'A'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ã",
                      "raw": "'\\xc3'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "A",
                      "raw": "'A'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ä",
                      "raw": "'\\xc4'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "A",
                      "raw": "'A'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Å",
                      "raw": "'\\xc5'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "A",
                      "raw": "'A'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "à",
                      "raw": "'\\xe0'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "a",
                      "raw": "'a'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "á",
                      "raw": "'\\xe1'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "a",
                      "raw": "'a'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "â",
                      "raw": "'\\xe2'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "a",
                      "raw": "'a'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ã",
                      "raw": "'\\xe3'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "a",
                      "raw": "'a'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ä",
                      "raw": "'\\xe4'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "a",
                      "raw": "'a'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "å",
                      "raw": "'\\xe5'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "a",
                      "raw": "'a'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ç",
                      "raw": "'\\xc7'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "C",
                      "raw": "'C'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ç",
                      "raw": "'\\xe7'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "c",
                      "raw": "'c'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ð",
                      "raw": "'\\xd0'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "D",
                      "raw": "'D'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ð",
                      "raw": "'\\xf0'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "d",
                      "raw": "'d'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "È",
                      "raw": "'\\xc8'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "E",
                      "raw": "'E'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "É",
                      "raw": "'\\xc9'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "E",
                      "raw": "'E'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ê",
                      "raw": "'\\xca'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "E",
                      "raw": "'E'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ë",
                      "raw": "'\\xcb'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "E",
                      "raw": "'E'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "è",
                      "raw": "'\\xe8'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "e",
                      "raw": "'e'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "é",
                      "raw": "'\\xe9'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "e",
                      "raw": "'e'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ê",
                      "raw": "'\\xea'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "e",
                      "raw": "'e'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ë",
                      "raw": "'\\xeb'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "e",
                      "raw": "'e'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ì",
                      "raw": "'\\xcc'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "I",
                      "raw": "'I'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Í",
                      "raw": "'\\xcd'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "I",
                      "raw": "'I'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Î",
                      "raw": "'\\xce'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "I",
                      "raw": "'I'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ï",
                      "raw": "'\\xcf'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "I",
                      "raw": "'I'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ì",
                      "raw": "'\\xec'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "i",
                      "raw": "'i'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "í",
                      "raw": "'\\xed'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "i",
                      "raw": "'i'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "î",
                      "raw": "'\\xee'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "i",
                      "raw": "'i'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ï",
                      "raw": "'\\xef'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "i",
                      "raw": "'i'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ñ",
                      "raw": "'\\xd1'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "N",
                      "raw": "'N'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ñ",
                      "raw": "'\\xf1'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "n",
                      "raw": "'n'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ò",
                      "raw": "'\\xd2'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "O",
                      "raw": "'O'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ó",
                      "raw": "'\\xd3'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "O",
                      "raw": "'O'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ô",
                      "raw": "'\\xd4'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "O",
                      "raw": "'O'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Õ",
                      "raw": "'\\xd5'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "O",
                      "raw": "'O'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ö",
                      "raw": "'\\xd6'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "O",
                      "raw": "'O'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ø",
                      "raw": "'\\xd8'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "O",
                      "raw": "'O'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ò",
                      "raw": "'\\xf2'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "o",
                      "raw": "'o'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ó",
                      "raw": "'\\xf3'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "o",
                      "raw": "'o'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ô",
                      "raw": "'\\xf4'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "o",
                      "raw": "'o'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "õ",
                      "raw": "'\\xf5'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "o",
                      "raw": "'o'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ö",
                      "raw": "'\\xf6'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "o",
                      "raw": "'o'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ø",
                      "raw": "'\\xf8'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "o",
                      "raw": "'o'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ù",
                      "raw": "'\\xd9'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "U",
                      "raw": "'U'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ú",
                      "raw": "'\\xda'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "U",
                      "raw": "'U'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Û",
                      "raw": "'\\xdb'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "U",
                      "raw": "'U'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ü",
                      "raw": "'\\xdc'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "U",
                      "raw": "'U'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ù",
                      "raw": "'\\xf9'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "u",
                      "raw": "'u'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ú",
                      "raw": "'\\xfa'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "u",
                      "raw": "'u'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "û",
                      "raw": "'\\xfb'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "u",
                      "raw": "'u'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ü",
                      "raw": "'\\xfc'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "u",
                      "raw": "'u'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ý",
                      "raw": "'\\xdd'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "Y",
                      "raw": "'Y'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ý",
                      "raw": "'\\xfd'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "y",
                      "raw": "'y'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ÿ",
                      "raw": "'\\xff'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "y",
                      "raw": "'y'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Æ",
                      "raw": "'\\xc6'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "Ae",
                      "raw": "'Ae'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "æ",
                      "raw": "'\\xe6'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "ae",
                      "raw": "'ae'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Þ",
                      "raw": "'\\xde'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "Th",
                      "raw": "'Th'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "þ",
                      "raw": "'\\xfe'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "th",
                      "raw": "'th'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ß",
                      "raw": "'\\xdf'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "ss",
                      "raw": "'ss'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ā",
                      "raw": "'\\u0100'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "A",
                      "raw": "'A'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ă",
                      "raw": "'\\u0102'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "A",
                      "raw": "'A'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ą",
                      "raw": "'\\u0104'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "A",
                      "raw": "'A'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ā",
                      "raw": "'\\u0101'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "a",
                      "raw": "'a'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ă",
                      "raw": "'\\u0103'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "a",
                      "raw": "'a'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ą",
                      "raw": "'\\u0105'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "a",
                      "raw": "'a'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ć",
                      "raw": "'\\u0106'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "C",
                      "raw": "'C'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ĉ",
                      "raw": "'\\u0108'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "C",
                      "raw": "'C'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ċ",
                      "raw": "'\\u010a'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "C",
                      "raw": "'C'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Č",
                      "raw": "'\\u010c'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "C",
                      "raw": "'C'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ć",
                      "raw": "'\\u0107'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "c",
                      "raw": "'c'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ĉ",
                      "raw": "'\\u0109'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "c",
                      "raw": "'c'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ċ",
                      "raw": "'\\u010b'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "c",
                      "raw": "'c'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "č",
                      "raw": "'\\u010d'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "c",
                      "raw": "'c'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ď",
                      "raw": "'\\u010e'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "D",
                      "raw": "'D'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Đ",
                      "raw": "'\\u0110'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "D",
                      "raw": "'D'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ď",
                      "raw": "'\\u010f'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "d",
                      "raw": "'d'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "đ",
                      "raw": "'\\u0111'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "d",
                      "raw": "'d'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ē",
                      "raw": "'\\u0112'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "E",
                      "raw": "'E'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ĕ",
                      "raw": "'\\u0114'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "E",
                      "raw": "'E'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ė",
                      "raw": "'\\u0116'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "E",
                      "raw": "'E'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ę",
                      "raw": "'\\u0118'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "E",
                      "raw": "'E'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ě",
                      "raw": "'\\u011a'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "E",
                      "raw": "'E'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ē",
                      "raw": "'\\u0113'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "e",
                      "raw": "'e'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ĕ",
                      "raw": "'\\u0115'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "e",
                      "raw": "'e'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ė",
                      "raw": "'\\u0117'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "e",
                      "raw": "'e'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ę",
                      "raw": "'\\u0119'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "e",
                      "raw": "'e'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ě",
                      "raw": "'\\u011b'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "e",
                      "raw": "'e'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ĝ",
                      "raw": "'\\u011c'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "G",
                      "raw": "'G'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ğ",
                      "raw": "'\\u011e'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "G",
                      "raw": "'G'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ġ",
                      "raw": "'\\u0120'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "G",
                      "raw": "'G'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ģ",
                      "raw": "'\\u0122'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "G",
                      "raw": "'G'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ĝ",
                      "raw": "'\\u011d'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "g",
                      "raw": "'g'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ğ",
                      "raw": "'\\u011f'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "g",
                      "raw": "'g'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ġ",
                      "raw": "'\\u0121'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "g",
                      "raw": "'g'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ģ",
                      "raw": "'\\u0123'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "g",
                      "raw": "'g'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ĥ",
                      "raw": "'\\u0124'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "H",
                      "raw": "'H'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ħ",
                      "raw": "'\\u0126'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "H",
                      "raw": "'H'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ĥ",
                      "raw": "'\\u0125'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "h",
                      "raw": "'h'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ħ",
                      "raw": "'\\u0127'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "h",
                      "raw": "'h'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ĩ",
                      "raw": "'\\u0128'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "I",
                      "raw": "'I'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ī",
                      "raw": "'\\u012a'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "I",
                      "raw": "'I'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ĭ",
                      "raw": "'\\u012c'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "I",
                      "raw": "'I'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Į",
                      "raw": "'\\u012e'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "I",
                      "raw": "'I'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "İ",
                      "raw": "'\\u0130'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "I",
                      "raw": "'I'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ĩ",
                      "raw": "'\\u0129'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "i",
                      "raw": "'i'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ī",
                      "raw": "'\\u012b'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "i",
                      "raw": "'i'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ĭ",
                      "raw": "'\\u012d'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "i",
                      "raw": "'i'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "į",
                      "raw": "'\\u012f'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "i",
                      "raw": "'i'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ı",
                      "raw": "'\\u0131'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "i",
                      "raw": "'i'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ĵ",
                      "raw": "'\\u0134'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "J",
                      "raw": "'J'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ĵ",
                      "raw": "'\\u0135'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "j",
                      "raw": "'j'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ķ",
                      "raw": "'\\u0136'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "K",
                      "raw": "'K'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ķ",
                      "raw": "'\\u0137'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "k",
                      "raw": "'k'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ĸ",
                      "raw": "'\\u0138'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "k",
                      "raw": "'k'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ĺ",
                      "raw": "'\\u0139'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "L",
                      "raw": "'L'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ļ",
                      "raw": "'\\u013b'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "L",
                      "raw": "'L'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ľ",
                      "raw": "'\\u013d'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "L",
                      "raw": "'L'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ŀ",
                      "raw": "'\\u013f'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "L",
                      "raw": "'L'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ł",
                      "raw": "'\\u0141'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "L",
                      "raw": "'L'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ĺ",
                      "raw": "'\\u013a'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "l",
                      "raw": "'l'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ļ",
                      "raw": "'\\u013c'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "l",
                      "raw": "'l'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ľ",
                      "raw": "'\\u013e'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "l",
                      "raw": "'l'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ŀ",
                      "raw": "'\\u0140'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "l",
                      "raw": "'l'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ł",
                      "raw": "'\\u0142'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "l",
                      "raw": "'l'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ń",
                      "raw": "'\\u0143'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "N",
                      "raw": "'N'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ņ",
                      "raw": "'\\u0145'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "N",
                      "raw": "'N'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ň",
                      "raw": "'\\u0147'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "N",
                      "raw": "'N'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ŋ",
                      "raw": "'\\u014a'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "N",
                      "raw": "'N'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ń",
                      "raw": "'\\u0144'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "n",
                      "raw": "'n'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ņ",
                      "raw": "'\\u0146'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "n",
                      "raw": "'n'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ň",
                      "raw": "'\\u0148'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "n",
                      "raw": "'n'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ŋ",
                      "raw": "'\\u014b'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "n",
                      "raw": "'n'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ō",
                      "raw": "'\\u014c'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "O",
                      "raw": "'O'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ŏ",
                      "raw": "'\\u014e'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "O",
                      "raw": "'O'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ő",
                      "raw": "'\\u0150'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "O",
                      "raw": "'O'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ō",
                      "raw": "'\\u014d'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "o",
                      "raw": "'o'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ŏ",
                      "raw": "'\\u014f'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "o",
                      "raw": "'o'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ő",
                      "raw": "'\\u0151'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "o",
                      "raw": "'o'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ŕ",
                      "raw": "'\\u0154'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "R",
                      "raw": "'R'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ŗ",
                      "raw": "'\\u0156'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "R",
                      "raw": "'R'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ř",
                      "raw": "'\\u0158'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "R",
                      "raw": "'R'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ŕ",
                      "raw": "'\\u0155'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "r",
                      "raw": "'r'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ŗ",
                      "raw": "'\\u0157'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "r",
                      "raw": "'r'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ř",
                      "raw": "'\\u0159'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "r",
                      "raw": "'r'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ś",
                      "raw": "'\\u015a'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "S",
                      "raw": "'S'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ŝ",
                      "raw": "'\\u015c'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "S",
                      "raw": "'S'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ş",
                      "raw": "'\\u015e'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "S",
                      "raw": "'S'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Š",
                      "raw": "'\\u0160'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "S",
                      "raw": "'S'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ś",
                      "raw": "'\\u015b'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "s",
                      "raw": "'s'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ŝ",
                      "raw": "'\\u015d'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "s",
                      "raw": "'s'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ş",
                      "raw": "'\\u015f'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "s",
                      "raw": "'s'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "š",
                      "raw": "'\\u0161'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "s",
                      "raw": "'s'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ţ",
                      "raw": "'\\u0162'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "T",
                      "raw": "'T'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ť",
                      "raw": "'\\u0164'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "T",
                      "raw": "'T'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ŧ",
                      "raw": "'\\u0166'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "T",
                      "raw": "'T'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ţ",
                      "raw": "'\\u0163'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "t",
                      "raw": "'t'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ť",
                      "raw": "'\\u0165'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "t",
                      "raw": "'t'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ŧ",
                      "raw": "'\\u0167'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "t",
                      "raw": "'t'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ũ",
                      "raw": "'\\u0168'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "U",
                      "raw": "'U'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ū",
                      "raw": "'\\u016a'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "U",
                      "raw": "'U'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ŭ",
                      "raw": "'\\u016c'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "U",
                      "raw": "'U'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ů",
                      "raw": "'\\u016e'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "U",
                      "raw": "'U'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ű",
                      "raw": "'\\u0170'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "U",
                      "raw": "'U'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ų",
                      "raw": "'\\u0172'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "U",
                      "raw": "'U'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ũ",
                      "raw": "'\\u0169'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "u",
                      "raw": "'u'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ū",
                      "raw": "'\\u016b'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "u",
                      "raw": "'u'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ŭ",
                      "raw": "'\\u016d'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "u",
                      "raw": "'u'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ů",
                      "raw": "'\\u016f'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "u",
                      "raw": "'u'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ű",
                      "raw": "'\\u0171'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "u",
                      "raw": "'u'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ų",
                      "raw": "'\\u0173'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "u",
                      "raw": "'u'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ŵ",
                      "raw": "'\\u0174'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "W",
                      "raw": "'W'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ŵ",
                      "raw": "'\\u0175'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "w",
                      "raw": "'w'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ŷ",
                      "raw": "'\\u0176'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "Y",
                      "raw": "'Y'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ŷ",
                      "raw": "'\\u0177'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "y",
                      "raw": "'y'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ÿ",
                      "raw": "'\\u0178'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "Y",
                      "raw": "'Y'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ź",
                      "raw": "'\\u0179'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "Z",
                      "raw": "'Z'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ż",
                      "raw": "'\\u017b'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "Z",
                      "raw": "'Z'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ž",
                      "raw": "'\\u017d'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "Z",
                      "raw": "'Z'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ź",
                      "raw": "'\\u017a'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "z",
                      "raw": "'z'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ż",
                      "raw": "'\\u017c'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "z",
                      "raw": "'z'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ž",
                      "raw": "'\\u017e'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "z",
                      "raw": "'z'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Ĳ",
                      "raw": "'\\u0132'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "IJ",
                      "raw": "'IJ'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ĳ",
                      "raw": "'\\u0133'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "ij",
                      "raw": "'ij'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "Œ",
                      "raw": "'\\u0152'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "Oe",
                      "raw": "'Oe'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "œ",
                      "raw": "'\\u0153'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "oe",
                      "raw": "'oe'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ŉ",
                      "raw": "'\\u0149'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "'n",
                      "raw": "\"'n\""
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "ſ",
                      "raw": "'\\u017f'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "s",
                      "raw": "'s'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "deburrLetter"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "basePropertyOf"
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "deburredLetters"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "deburrLetter"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to map Latin Unicode letters to basic Latin letters. "
        },
        {
          "type": "Line",
          "value": " Latin-1 Supplement block."
        },
        {
          "type": "Line",
          "value": " Latin Extended-A block."
        },
        {
          "type": "Block",
          "value": "*\n * Used by `deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/equalArrays.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "SetCache"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./SetCache.js",
            "raw": "'./SetCache.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "some"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../some.js",
            "raw": "'../some.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "cacheHas"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./cacheHas.js",
            "raw": "'./cacheHas.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "COMPARE_PARTIAL_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "COMPARE_UNORDERED_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 2,
                "raw": "2"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "equalArrays"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "other"
            },
            {
              "type": "Identifier",
              "name": "bitmask"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            },
            {
              "type": "Identifier",
              "name": "equalFunc"
            },
            {
              "type": "Identifier",
              "name": "stack"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isPartial"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "&",
                      "left": {
                        "type": "Identifier",
                        "name": "bitmask"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "COMPARE_PARTIAL_FLAG"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "arrLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "othLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "other"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "Identifier",
                      "name": "arrLength"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "othLength"
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "Identifier",
                        "name": "isPartial"
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                          "type": "Identifier",
                          "name": "othLength"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "arrLength"
                        }
                      }
                    },
                    "prefix": true
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": false,
                        "raw": "false"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "stacked"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "stack"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "get"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "array"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "stacked"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "stack"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "get"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "other"
                      }
                    ]
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "stacked"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "other"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "Literal",
                      "value": true,
                      "raw": "true"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "seen"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "&",
                        "left": {
                          "type": "Identifier",
                          "name": "bitmask"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "COMPARE_UNORDERED_FLAG"
                        }
                      },
                      "consequent": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "SetCache"
                        },
                        "arguments": []
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "stack"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "set"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "Identifier",
                      "name": "other"
                    }
                  ]
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "stack"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "set"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "other"
                    },
                    {
                      "type": "Identifier",
                      "name": "array"
                    }
                  ]
                }
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "arrLength"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "compared"
                          },
                          "init": null
                        }
                      ],
                      "kind": "let"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "arrValue"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "array"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othValue"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "other"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "customizer"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "compared"
                              },
                              "right": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "isPartial"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "customizer"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "othValue"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "arrValue"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "index"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "other"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "array"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "stack"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "customizer"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "arrValue"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "othValue"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "index"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "array"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "other"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "stack"
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "!==",
                        "left": {
                          "type": "Identifier",
                          "name": "compared"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "Identifier",
                              "name": "compared"
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ContinueStatement",
                                  "label": null
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "result"
                              },
                              "right": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                              }
                            }
                          },
                          {
                            "type": "BreakStatement",
                            "label": null
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "seen"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "some"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "other"
                                  },
                                  {
                                    "type": "ArrowFunctionExpression",
                                    "id": null,
                                    "params": [
                                      {
                                        "type": "Identifier",
                                        "name": "othValue"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "othIndex"
                                      }
                                    ],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [
                                        {
                                          "type": "IfStatement",
                                          "test": {
                                            "type": "LogicalExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "UnaryExpression",
                                              "operator": "!",
                                              "argument": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "cacheHas"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "seen"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "othIndex"
                                                  }
                                                ]
                                              },
                                              "prefix": true
                                            },
                                            "right": {
                                              "type": "LogicalExpression",
                                              "operator": "||",
                                              "left": {
                                                "type": "BinaryExpression",
                                                "operator": "===",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "arrValue"
                                                },
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "othValue"
                                                }
                                              },
                                              "right": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "equalFunc"
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "arrValue"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "othValue"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "bitmask"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "customizer"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "stack"
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          "consequent": {
                                            "type": "BlockStatement",
                                            "body": [
                                              {
                                                "type": "ReturnStatement",
                                                "argument": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "seen"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "push"
                                                    }
                                                  },
                                                  "arguments": [
                                                    {
                                                      "type": "Identifier",
                                                      "name": "othIndex"
                                                    }
                                                  ]
                                                }
                                              }
                                            ]
                                          },
                                          "alternate": null
                                        }
                                      ]
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "async": false
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": false,
                                      "raw": "false"
                                    }
                                  }
                                },
                                {
                                  "type": "BreakStatement",
                                  "label": null
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "LogicalExpression",
                            "operator": "||",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "Identifier",
                                "name": "arrValue"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "othValue"
                              }
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "equalFunc"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "arrValue"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "othValue"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "bitmask"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "customizer"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "stack"
                                }
                              ]
                            }
                          },
                          "prefix": true
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": false,
                                  "raw": "false"
                                }
                              }
                            },
                            {
                              "type": "BreakStatement",
                              "label": null
                            }
                          ]
                        },
                        "alternate": null
                      }
                    }
                  ]
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "stack"
                    },
                    "property": {
                      "type": "Literal",
                      "value": "delete",
                      "raw": "'delete'"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    }
                  ]
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "stack"
                    },
                    "property": {
                      "type": "Literal",
                      "value": "delete",
                      "raw": "'delete'"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "other"
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "equalArrays"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for value comparisons. "
        },
        {
          "type": "Block",
          "value": "*\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n "
        },
        {
          "type": "Line",
          "value": " Assume cyclic values are equal."
        },
        {
          "type": "Line",
          "value": " Ignore non-index properties."
        },
        {
          "type": "Line",
          "value": " Recursively compare arrays (susceptible to call stack limits)."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/equalByTag.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "eq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../eq.js",
            "raw": "'../eq.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "equalArrays"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./equalArrays.js",
            "raw": "'./equalArrays.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "mapToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./mapToArray.js",
            "raw": "'./mapToArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "setToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./setToArray.js",
            "raw": "'./setToArray.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "COMPARE_PARTIAL_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "COMPARE_UNORDERED_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 2,
                "raw": "2"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "boolTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Boolean]",
                "raw": "'[object Boolean]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "dateTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Date]",
                "raw": "'[object Date]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "errorTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Error]",
                "raw": "'[object Error]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "mapTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Map]",
                "raw": "'[object Map]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "numberTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Number]",
                "raw": "'[object Number]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "regexpTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object RegExp]",
                "raw": "'[object RegExp]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "setTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Set]",
                "raw": "'[object Set]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "stringTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object String]",
                "raw": "'[object String]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "symbolTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Symbol]",
                "raw": "'[object Symbol]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "arrayBufferTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object ArrayBuffer]",
                "raw": "'[object ArrayBuffer]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "dataViewTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object DataView]",
                "raw": "'[object DataView]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "symbolValueOf"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Symbol"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "valueOf"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "equalByTag"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "other"
            },
            {
              "type": "Identifier",
              "name": "tag"
            },
            {
              "type": "Identifier",
              "name": "bitmask"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            },
            {
              "type": "Identifier",
              "name": "equalFunc"
            },
            {
              "type": "Identifier",
              "name": "stack"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "SwitchStatement",
                "discriminant": {
                  "type": "Identifier",
                  "name": "tag"
                },
                "cases": [
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "dataViewTag"
                    },
                    "consequent": [
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "!=",
                            "left": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "byteLength"
                              }
                            },
                            "right": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "other"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "byteLength"
                              }
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "!=",
                            "left": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "byteOffset"
                              }
                            },
                            "right": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "other"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "byteOffset"
                              }
                            }
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "right": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "buffer"
                            }
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "other"
                          },
                          "right": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "other"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "buffer"
                            }
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "arrayBufferTag"
                    },
                    "consequent": [
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "!=",
                            "left": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "byteLength"
                              }
                            },
                            "right": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "other"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "byteLength"
                              }
                            }
                          },
                          "right": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "equalFunc"
                              },
                              "arguments": [
                                {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Uint8Array"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "object"
                                    }
                                  ]
                                },
                                {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Uint8Array"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "other"
                                    }
                                  ]
                                }
                              ]
                            },
                            "prefix": true
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Literal",
                          "value": true,
                          "raw": "true"
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "boolTag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "dateTag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "numberTag"
                    },
                    "consequent": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "eq"
                          },
                          "arguments": [
                            {
                              "type": "UnaryExpression",
                              "operator": "+",
                              "argument": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "prefix": true
                            },
                            {
                              "type": "UnaryExpression",
                              "operator": "+",
                              "argument": {
                                "type": "Identifier",
                                "name": "other"
                              },
                              "prefix": true
                            }
                          ]
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "errorTag"
                    },
                    "consequent": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "name"
                              }
                            },
                            "right": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "other"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "name"
                              }
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "message"
                              }
                            },
                            "right": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "other"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "message"
                              }
                            }
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "regexpTag"
                    },
                    "consequent": []
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "stringTag"
                    },
                    "consequent": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "BinaryExpression",
                          "operator": "==",
                          "left": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "right": {
                            "type": "TemplateLiteral",
                            "quasis": [
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": true
                              }
                            ],
                            "expressions": [
                              {
                                "type": "Identifier",
                                "name": "other"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "mapTag"
                    },
                    "consequent": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "convert"
                            },
                            "init": {
                              "type": "Identifier",
                              "name": "mapToArray"
                            }
                          }
                        ],
                        "kind": "let"
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "setTag"
                    },
                    "consequent": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "isPartial"
                            },
                            "init": {
                              "type": "BinaryExpression",
                              "operator": "&",
                              "left": {
                                "type": "Identifier",
                                "name": "bitmask"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "COMPARE_PARTIAL_FLAG"
                              }
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "Identifier",
                            "name": "convert"
                          },
                          "right": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "Identifier",
                              "name": "convert"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "setToArray"
                            }
                          }
                        }
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "!=",
                            "left": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "size"
                              }
                            },
                            "right": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "other"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "size"
                              }
                            }
                          },
                          "right": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                              "type": "Identifier",
                              "name": "isPartial"
                            },
                            "prefix": true
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "stacked"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "stack"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "get"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "Identifier",
                          "name": "stacked"
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "BinaryExpression",
                                "operator": "==",
                                "left": {
                                  "type": "Identifier",
                                  "name": "stacked"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "other"
                                }
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "|=",
                          "left": {
                            "type": "Identifier",
                            "name": "bitmask"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "COMPARE_UNORDERED_FLAG"
                          }
                        }
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "stack"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "set"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            },
                            {
                              "type": "Identifier",
                              "name": "other"
                            }
                          ]
                        }
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "equalArrays"
                              },
                              "arguments": [
                                {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "convert"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "object"
                                    }
                                  ]
                                },
                                {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "convert"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "other"
                                    }
                                  ]
                                },
                                {
                                  "type": "Identifier",
                                  "name": "bitmask"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "customizer"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "equalFunc"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "stack"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "stack"
                            },
                            "property": {
                              "type": "Literal",
                              "value": "delete",
                              "raw": "'delete'"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            }
                          ]
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Identifier",
                          "name": "result"
                        }
                      }
                    ]
                  },
                  {
                    "type": "SwitchCase",
                    "test": {
                      "type": "Identifier",
                      "name": "symbolTag"
                    },
                    "consequent": [
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "Identifier",
                          "name": "symbolValueOf"
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "BinaryExpression",
                                "operator": "==",
                                "left": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "symbolValueOf"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "call"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "object"
                                    }
                                  ]
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "symbolValueOf"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "call"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "other"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "alternate": null
                      }
                    ]
                  }
                ]
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Literal",
                  "value": false,
                  "raw": "false"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "equalByTag"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for value comparisons. "
        },
        {
          "type": "Block",
          "value": "* `Object#toString` result references. "
        },
        {
          "type": "Block",
          "value": "* Used to convert symbols to primitives and strings. "
        },
        {
          "type": "Block",
          "value": "*\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n "
        },
        {
          "type": "Line",
          "value": " Coerce booleans to `1` or `0` and dates to milliseconds."
        },
        {
          "type": "Line",
          "value": " Invalid dates are coerced to `NaN`."
        },
        {
          "type": "Line",
          "value": " Coerce regexes to strings and treat strings, primitives and objects,"
        },
        {
          "type": "Line",
          "value": " as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring"
        },
        {
          "type": "Line",
          "value": " for more details."
        },
        {
          "type": "Line",
          "value": " Assume cyclic values are equal."
        },
        {
          "type": "Line",
          "value": " Recursively compare objects (susceptible to call stack limits)."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/equalObjects.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getAllKeys"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./getAllKeys.js",
            "raw": "'./getAllKeys.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "COMPARE_PARTIAL_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasOwnProperty"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "hasOwnProperty"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "equalObjects"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "other"
            },
            {
              "type": "Identifier",
              "name": "bitmask"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            },
            {
              "type": "Identifier",
              "name": "equalFunc"
            },
            {
              "type": "Identifier",
              "name": "stack"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isPartial"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "&",
                      "left": {
                        "type": "Identifier",
                        "name": "bitmask"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "COMPARE_PARTIAL_FLAG"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "objProps"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getAllKeys"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "objLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "objProps"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "othProps"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getAllKeys"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "other"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "othLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "othProps"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "Identifier",
                      "name": "objLength"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "othLength"
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "Identifier",
                      "name": "isPartial"
                    },
                    "prefix": true
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": false,
                        "raw": "false"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "key"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "objLength"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "index"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "key"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "objProps"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        }
                      }
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "Identifier",
                            "name": "isPartial"
                          },
                          "consequent": {
                            "type": "BinaryExpression",
                            "operator": "in",
                            "left": {
                              "type": "Identifier",
                              "name": "key"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "other"
                            }
                          },
                          "alternate": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "hasOwnProperty"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "call"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "other"
                              },
                              {
                                "type": "Identifier",
                                "name": "key"
                              }
                            ]
                          }
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": false,
                              "raw": "false"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "stacked"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "stack"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "get"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "stacked"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "stack"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "get"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "other"
                      }
                    ]
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "stacked"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "other"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "Literal",
                      "value": true,
                      "raw": "true"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "stack"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "set"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    },
                    {
                      "type": "Identifier",
                      "name": "other"
                    }
                  ]
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "stack"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "set"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "other"
                    },
                    {
                      "type": "Identifier",
                      "name": "object"
                    }
                  ]
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "compared"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "skipCtor"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "isPartial"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "objLength"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "key"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "objProps"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        }
                      }
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "objValue"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othValue"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "other"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "customizer"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "compared"
                              },
                              "right": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "isPartial"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "customizer"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "othValue"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "objValue"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "other"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "object"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "stack"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "customizer"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "objValue"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "othValue"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "object"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "other"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "stack"
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "compared"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          },
                          "consequent": {
                            "type": "LogicalExpression",
                            "operator": "||",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "Identifier",
                                "name": "objValue"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "othValue"
                              }
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "equalFunc"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "objValue"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "othValue"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "bitmask"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "customizer"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "stack"
                                }
                              ]
                            }
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "compared"
                          }
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "result"
                              },
                              "right": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                              }
                            }
                          },
                          {
                            "type": "BreakStatement",
                            "label": null
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "Identifier",
                          "name": "skipCtor"
                        },
                        "right": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "skipCtor"
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "Identifier",
                              "name": "key"
                            },
                            "right": {
                              "type": "Literal",
                              "value": "constructor",
                              "raw": "'constructor'"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "result"
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "Identifier",
                      "name": "skipCtor"
                    },
                    "prefix": true
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "objCtor"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "constructor"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "othCtor"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "other"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "constructor"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "!=",
                            "left": {
                              "type": "Identifier",
                              "name": "objCtor"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "othCtor"
                            }
                          },
                          "right": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "in",
                              "left": {
                                "type": "Literal",
                                "value": "constructor",
                                "raw": "'constructor'"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "object"
                              }
                            },
                            "right": {
                              "type": "BinaryExpression",
                              "operator": "in",
                              "left": {
                                "type": "Literal",
                                "value": "constructor",
                                "raw": "'constructor'"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "other"
                              }
                            }
                          }
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "LogicalExpression",
                                "operator": "&&",
                                "left": {
                                  "type": "BinaryExpression",
                                  "operator": "==",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "Identifier",
                                      "name": "objCtor"
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "function",
                                    "raw": "'function'"
                                  }
                                },
                                "right": {
                                  "type": "BinaryExpression",
                                  "operator": "instanceof",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "objCtor"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "objCtor"
                                  }
                                }
                              },
                              "right": {
                                "type": "BinaryExpression",
                                "operator": "==",
                                "left": {
                                  "type": "UnaryExpression",
                                  "operator": "typeof",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "othCtor"
                                  },
                                  "prefix": true
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "function",
                                  "raw": "'function'"
                                }
                              }
                            },
                            "right": {
                              "type": "BinaryExpression",
                              "operator": "instanceof",
                              "left": {
                                "type": "Identifier",
                                "name": "othCtor"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "othCtor"
                              }
                            }
                          },
                          "prefix": true
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "result"
                              },
                              "right": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "stack"
                    },
                    "property": {
                      "type": "Literal",
                      "value": "delete",
                      "raw": "'delete'"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    }
                  ]
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "stack"
                    },
                    "property": {
                      "type": "Literal",
                      "value": "delete",
                      "raw": "'delete'"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "other"
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "equalObjects"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for value comparisons. "
        },
        {
          "type": "Block",
          "value": "* Used to check objects for own properties. "
        },
        {
          "type": "Block",
          "value": "*\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n "
        },
        {
          "type": "Line",
          "value": " Assume cyclic values are equal."
        },
        {
          "type": "Line",
          "value": " Recursively compare objects (susceptible to call stack limits)."
        },
        {
          "type": "Line",
          "value": " Non `Object` object instances with different constructors are not equal."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/freeGlobal.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "freeGlobal"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "global"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "object",
                        "raw": "'object'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "global"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "global"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "Object"
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "Object"
                    }
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "global"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "freeGlobal"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Detect free variable `global` from Node.js. "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/getAllKeys.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getSymbols"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./getSymbols.js",
            "raw": "'./getSymbols.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "keys"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../keys.js",
            "raw": "'../keys.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "getAllKeys"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "keys"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "isArray"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "push"
                          }
                        },
                        "arguments": [
                          {
                            "type": "SpreadElement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "getSymbols"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "getAllKeys"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/getAllKeysIn.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getSymbolsIn"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./getSymbolsIn.js",
            "raw": "'./getSymbolsIn.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "getAllKeysIn"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ForInStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "key"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "object"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "push"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "key"
                          }
                        ]
                      }
                    }
                  ]
                },
                "each": false
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "isArray"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "push"
                          }
                        },
                        "arguments": [
                          {
                            "type": "SpreadElement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "getSymbolsIn"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "getAllKeysIn"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of own and inherited enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/getHolder.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "getHolder"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "func"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "func"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "placeholder"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "getHolder"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the argument placeholder value for `func`.\n *\n * @private\n * @param {Function} func The function to inspect.\n * @returns {*} Returns the placeholder value.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/getMatchData.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isStrictComparable"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isStrictComparable.js",
            "raw": "'./isStrictComparable.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "keys"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../keys.js",
            "raw": "'../keys.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "getMatchData"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "keys"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "result"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "key"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "length"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        },
                        "right": {
                          "type": "ArrayExpression",
                          "elements": [
                            {
                              "type": "Identifier",
                              "name": "key"
                            },
                            {
                              "type": "Identifier",
                              "name": "value"
                            },
                            {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "isStrictComparable"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "getMatchData"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/getSymbols.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "propertyIsEnumerable"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "propertyIsEnumerable"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "nativeGetSymbols"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "Object"
                },
                "property": {
                  "type": "Identifier",
                  "name": "getOwnPropertySymbols"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "getSymbols"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "nativeGetSymbols"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "filter"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "symbol"
                        }
                      ],
                      "body": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "propertyIsEnumerable"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "call"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          },
                          {
                            "type": "Identifier",
                            "name": "symbol"
                          }
                        ]
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "getSymbols"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Built-in value references. "
        },
        {
          "type": "Block",
          "value": " Built-in method references for those with the same name as other `lodash` methods. "
        },
        {
          "type": "Block",
          "value": "*\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/getSymbolsIn.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getSymbols"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./getSymbols.js",
            "raw": "'./getSymbols.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "getSymbolsIn"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "Identifier",
                  "name": "object"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "push"
                          }
                        },
                        "arguments": [
                          {
                            "type": "SpreadElement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "getSymbols"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "object"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "getPrototypeOf"
                            }
                          },
                          "arguments": [
                            {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "Object"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "getSymbolsIn"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/getTag.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "toString"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "toString"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "getTag"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "undefined"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "[object Undefined]",
                          "raw": "'[object Undefined]'"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "[object Null]",
                          "raw": "'[object Null]'"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "toString"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "call"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "getTag"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/hasUnicode.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsAstralRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ud800-\\udfff",
                "raw": "'\\\\ud800-\\\\udfff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u0300-\\u036f",
                "raw": "'\\\\u0300-\\\\u036f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reComboHalfMarksRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ufe20-\\ufe2f",
                "raw": "'\\\\ufe20-\\\\ufe2f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboSymbolsRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u20d0-\\u20ff",
                "raw": "'\\\\u20d0-\\\\u20ff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksExtendedRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u1ab0-\\u1aff",
                "raw": "'\\\\u1ab0-\\\\u1aff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksSupplementRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u1dc0-\\u1dff",
                "raw": "'\\\\u1dc0-\\\\u1dff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboRange"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "Identifier",
                        "name": "rsComboMarksRange"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "reComboHalfMarksRange"
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "rsComboSymbolsRange"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "rsComboMarksExtendedRange"
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "rsComboMarksSupplementRange"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsVarRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ufe0e\\ufe0f",
                "raw": "'\\\\ufe0e\\\\ufe0f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsZWJ"
              },
              "init": {
                "type": "Literal",
                "value": "\\u200d",
                "raw": "'\\\\u200d'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reHasUnicode"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "RegExp"
                },
                "arguments": [
                  {
                    "type": "TemplateLiteral",
                    "quasis": [
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "[",
                          "cooked": "["
                        },
                        "tail": false
                      },
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "]",
                          "cooked": "]"
                        },
                        "tail": true
                      }
                    ],
                    "expressions": [
                      {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                              "type": "Identifier",
                              "name": "rsZWJ"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "rsAstralRange"
                            }
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "rsComboRange"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "rsVarRange"
                        }
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "hasUnicode"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "reHasUnicode"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "test"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "string"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "hasUnicode"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose unicode character classes. "
        },
        {
          "type": "Block",
          "value": "* Used to compose unicode capture groups. "
        },
        {
          "type": "Block",
          "value": "* Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/initCloneObject.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isPrototype"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isPrototype.js",
            "raw": "'./isPrototype.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "initCloneObject"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "constructor"
                          }
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isPrototype"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          }
                        ]
                      },
                      "prefix": true
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "create"
                      }
                    },
                    "arguments": [
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Object"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "getPrototypeOf"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          }
                        ]
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ObjectExpression",
                    "properties": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "initCloneObject"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/isFlattenable.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArguments"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isArguments.js",
            "raw": "'../isArguments.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "spreadableSymbol"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "Symbol"
                },
                "property": {
                  "type": "Identifier",
                  "name": "isConcatSpreadable"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isFlattenable"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "isArray"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isArguments"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "spreadableSymbol"
                          }
                        }
                      },
                      "prefix": true
                    },
                    "prefix": true
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isFlattenable"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Built-in value reference. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/isIndex.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "MAX_SAFE_INTEGER"
              },
              "init": {
                "type": "Literal",
                "value": 9007199254740991,
                "raw": "9007199254740991"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reIsUint"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/^(?:0|[1-9]\\d*)$/",
                "regex": {
                  "pattern": "^(?:0|[1-9]\\d*)$",
                  "flags": ""
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isIndex"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "length"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "type"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "MAX_SAFE_INTEGER"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "Identifier",
                          "name": "length"
                        },
                        "prefix": true
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "type"
                        },
                        "right": {
                          "type": "Literal",
                          "value": "number",
                          "raw": "'number'"
                        }
                      },
                      "right": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "!=",
                          "left": {
                            "type": "Identifier",
                            "name": "type"
                          },
                          "right": {
                            "type": "Literal",
                            "value": "symbol",
                            "raw": "'symbol'"
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "reIsUint"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "test"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        }
                      }
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "-",
                          "argument": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          },
                          "prefix": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "%",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "<",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isIndex"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "* Used to detect unsigned integer values. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/isIterateeCall.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isArrayLike.js",
            "raw": "'../isArrayLike.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isIndex.js",
            "raw": "'./isIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isObject.js",
            "raw": "'../isObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "eq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../eq.js",
            "raw": "'../eq.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isIterateeCall"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "index"
            },
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isObject"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": false,
                        "raw": "false"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "type"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "Identifier",
                        "name": "index"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "type"
                    },
                    "right": {
                      "type": "Literal",
                      "value": "number",
                      "raw": "'number'"
                    }
                  },
                  "consequent": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isArrayLike"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isIndex"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "index"
                        },
                        {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        }
                      ]
                    }
                  },
                  "alternate": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "type"
                      },
                      "right": {
                        "type": "Literal",
                        "value": "string",
                        "raw": "'string'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "in",
                      "left": {
                        "type": "Identifier",
                        "name": "index"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "object"
                      }
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "eq"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Literal",
                  "value": false,
                  "raw": "false"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isIterateeCall"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/isKey.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isSymbol.js",
            "raw": "'../isSymbol.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reIsDeepProp"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/",
                "regex": {
                  "pattern": "\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]",
                  "flags": ""
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reIsPlainProp"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/^\\w*$/",
                "regex": {
                  "pattern": "^\\w*$",
                  "flags": ""
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isKey"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Array"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "isArray"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": false,
                        "raw": "false"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "type"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "type"
                        },
                        "right": {
                          "type": "Literal",
                          "value": "number",
                          "raw": "'number'"
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "type"
                        },
                        "right": {
                          "type": "Literal",
                          "value": "boolean",
                          "raw": "'boolean'"
                        }
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isSymbol"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "reIsPlainProp"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "test"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "reIsDeepProp"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "test"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "prefix": true
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "in",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isKey"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to match property names within property paths. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/isPrototype.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "objectProto"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "Object"
                },
                "property": {
                  "type": "Identifier",
                  "name": "prototype"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isPrototype"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "Ctor"
                    },
                    "init": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "constructor"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "proto"
                    },
                    "init": {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "==",
                          "left": {
                            "type": "UnaryExpression",
                            "operator": "typeof",
                            "argument": {
                              "type": "Identifier",
                              "name": "Ctor"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Literal",
                            "value": "function",
                            "raw": "'function'"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Ctor"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "prototype"
                          }
                        }
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "objectProto"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "proto"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isPrototype"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used for built-in method references. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/isStrictComparable.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isObject.js",
            "raw": "'../isObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isStrictComparable"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "value"
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isObject"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "prefix": true
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isStrictComparable"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/iteratorToArray.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "iteratorToArray"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "iterator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "data"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "data"
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "iterator"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "next"
                          }
                        },
                        "arguments": []
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "done"
                    }
                  },
                  "prefix": true
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "push"
                          }
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "data"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "value"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "iteratorToArray"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `iterator` to an array.\n *\n * @private\n * @param {Object} iterator The iterator to convert.\n * @returns {Array} Returns the converted array.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/mapToArray.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "mapToArray"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "map"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "map"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "size"
                          }
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "map"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "forEach"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        },
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "index"
                                  },
                                  "prefix": true
                                }
                              },
                              "right": {
                                "type": "ArrayExpression",
                                "elements": [
                                  {
                                    "type": "Identifier",
                                    "name": "key"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "mapToArray"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/matchesStrictComparable.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "matchesStrictComparable"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "key"
            },
            {
              "type": "Identifier",
              "name": "srcValue"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "==",
                          "left": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "right": {
                            "type": "Literal",
                            "value": null,
                            "raw": "null"
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Literal",
                                "value": false,
                                "raw": "false"
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "key"
                              }
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "srcValue"
                            }
                          },
                          "right": {
                            "type": "LogicalExpression",
                            "operator": "||",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "!==",
                              "left": {
                                "type": "Identifier",
                                "name": "srcValue"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            },
                            "right": {
                              "type": "BinaryExpression",
                              "operator": "in",
                              "left": {
                                "type": "Identifier",
                                "name": "key"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "Object"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "object"
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "matchesStrictComparable"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/memoizeCapped.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "memoize"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../memoize.js",
            "raw": "'../memoize.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "MAX_MEMOIZE_SIZE"
              },
              "init": {
                "type": "Literal",
                "value": 500,
                "raw": "500"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "memoizeCapped"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "func"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "memoize"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "func"
                        },
                        {
                          "type": "ArrowFunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "key"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "VariableDeclaration",
                                "declarations": [
                                  {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "ObjectPattern",
                                      "properties": [
                                        {
                                          "type": "Property",
                                          "key": {
                                            "type": "Identifier",
                                            "name": "cache"
                                          },
                                          "computed": false,
                                          "value": {
                                            "type": "Identifier",
                                            "name": "cache"
                                          },
                                          "kind": "init",
                                          "method": false,
                                          "shorthand": true
                                        }
                                      ]
                                    },
                                    "init": {
                                      "type": "Identifier",
                                      "name": "result"
                                    }
                                  }
                                ],
                                "kind": "const"
                              },
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "===",
                                  "left": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "cache"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "size"
                                    }
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "MAX_MEMOIZE_SIZE"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "cache"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "clear"
                                          }
                                        },
                                        "arguments": []
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "memoizeCapped"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as the maximum memoize cache size. "
        },
        {
          "type": "Block",
          "value": "*\n * A specialized version of `memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/metaMap.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "NewExpression",
            "callee": {
              "type": "Identifier",
              "name": "WeakMap"
            },
            "arguments": []
          }
        }
      ],
      "sourceType": "module",
      "comments": []
    }
  },
  {
    "filePath": "./projects/lodash/.internal/nodeTypes.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "freeGlobal"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./freeGlobal.js",
            "raw": "'./freeGlobal.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "freeExports"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "exports"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "object",
                        "raw": "'object'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "exports"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "exports"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "nodeType"
                      }
                    },
                    "prefix": true
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "exports"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "freeModule"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "Identifier",
                        "name": "freeExports"
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "Identifier",
                            "name": "module"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Literal",
                          "value": "object",
                          "raw": "'object'"
                        }
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "module"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "module"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "nodeType"
                      }
                    },
                    "prefix": true
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "module"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "moduleExports"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "Identifier",
                  "name": "freeModule"
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "freeModule"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "exports"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "freeExports"
                  }
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "freeProcess"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "Identifier",
                  "name": "moduleExports"
                },
                "right": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "freeGlobal"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "process"
                  }
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "nodeTypes"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "TryStatement",
                        "block": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "VariableDeclaration",
                              "declarations": [
                                {
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "typesHelper"
                                  },
                                  "init": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "LogicalExpression",
                                      "operator": "&&",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "freeModule"
                                      },
                                      "right": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "freeModule"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "require"
                                        }
                                      }
                                    },
                                    "right": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "freeModule"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "require"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "util",
                                            "raw": "'util'"
                                          }
                                        ]
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "types"
                                      }
                                    }
                                  }
                                }
                              ],
                              "kind": "const"
                            },
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "typesHelper"
                                },
                                "consequent": {
                                  "type": "Identifier",
                                  "name": "typesHelper"
                                },
                                "alternate": {
                                  "type": "LogicalExpression",
                                  "operator": "&&",
                                  "left": {
                                    "type": "LogicalExpression",
                                    "operator": "&&",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "freeProcess"
                                    },
                                    "right": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "freeProcess"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "binding"
                                      }
                                    }
                                  },
                                  "right": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "freeProcess"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "binding"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Literal",
                                        "value": "util",
                                        "raw": "'util'"
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        },
                        "handler": {
                          "type": "CatchClause",
                          "param": {
                            "type": "Identifier",
                            "name": "e"
                          },
                          "body": {
                            "type": "BlockStatement",
                            "body": []
                          }
                        },
                        "finalizer": null
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                },
                "arguments": []
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "nodeTypes"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Detect free variable `exports`. "
        },
        {
          "type": "Block",
          "value": "* Detect free variable `module`. "
        },
        {
          "type": "Block",
          "value": "* Detect the popular CommonJS extension `module.exports`. "
        },
        {
          "type": "Block",
          "value": "* Detect free variable `process` from Node.js. "
        },
        {
          "type": "Block",
          "value": "* Used to access faster Node.js helpers. "
        },
        {
          "type": "Block",
          "value": " Detect public `util.types` helpers for Node.js v10+. "
        },
        {
          "type": "Block",
          "value": " Node.js deprecation code: DEP0103. "
        },
        {
          "type": "Block",
          "value": " Legacy process.binding('util') for Node.js earlier than v10. "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/parent.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseGet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./baseGet.js",
            "raw": "'./baseGet.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "slice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../slice.js",
            "raw": "'../slice.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "parent"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "path"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": 2,
                      "raw": "2"
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseGet"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "slice"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "path"
                          },
                          {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          },
                          {
                            "type": "UnaryExpression",
                            "operator": "-",
                            "argument": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            },
                            "prefix": true
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "parent"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the parent value at `path` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path to get the parent value of.\n * @returns {*} Returns the parent value.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/reEscape.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reEscape"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/<%-([\\s\\S]+?)%>/g",
                "regex": {
                  "pattern": "<%-([\\s\\S]+?)%>",
                  "flags": "g"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "reEscape"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to match template delimiters. "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/reEvaluate.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reEvaluate"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/<%([\\s\\S]+?)%>/g",
                "regex": {
                  "pattern": "<%([\\s\\S]+?)%>",
                  "flags": "g"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "reEvaluate"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to match template delimiters. "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/reInterpolate.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reInterpolate"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/<%=([\\s\\S]+?)%>/g",
                "regex": {
                  "pattern": "<%=([\\s\\S]+?)%>",
                  "flags": "g"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "reInterpolate"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to match template delimiters. "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/root.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "freeGlobal"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./freeGlobal.js",
            "raw": "'./freeGlobal.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "freeGlobalThis"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "globalThis"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "object",
                        "raw": "'object'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "globalThis"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "globalThis"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "Object"
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "Object"
                    }
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "globalThis"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "freeSelf"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "self"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "object",
                        "raw": "'object'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "self"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "self"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "Object"
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "Object"
                    }
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "self"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "root"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "Identifier",
                      "name": "freeGlobalThis"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "freeGlobal"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "freeSelf"
                  }
                },
                "right": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Function"
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "return this",
                        "raw": "'return this'"
                      }
                    ]
                  },
                  "arguments": []
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "root"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": " global globalThis, self "
        },
        {
          "type": "Block",
          "value": "* Detect free variable `globalThis` "
        },
        {
          "type": "Block",
          "value": "* Detect free variable `self`. "
        },
        {
          "type": "Block",
          "value": "* Used as a reference to the global object. "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/setToArray.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "setToArray"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "set"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "set"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "size"
                          }
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "set"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "forEach"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "index"
                                  },
                                  "prefix": true
                                }
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "value"
                              }
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "setToArray"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/setToPairs.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "setToPairs"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "set"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "set"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "size"
                          }
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "set"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "forEach"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "index"
                                  },
                                  "prefix": true
                                }
                              },
                              "right": {
                                "type": "ArrayExpression",
                                "elements": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "setToPairs"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `set` to its value-value pairs.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the value-value pairs.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/setToString.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "setToString"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "func"
            },
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "defineProperty"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "func"
                    },
                    {
                      "type": "Literal",
                      "value": "toString",
                      "raw": "'toString'"
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "configurable",
                            "raw": "'configurable'"
                          },
                          "computed": false,
                          "value": {
                            "type": "Literal",
                            "value": true,
                            "raw": "true"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": false
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "enumerable",
                            "raw": "'enumerable'"
                          },
                          "computed": false,
                          "value": {
                            "type": "Literal",
                            "value": false,
                            "raw": "false"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": false
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "value",
                            "raw": "'value'"
                          },
                          "computed": false,
                          "value": {
                            "type": "ArrowFunctionExpression",
                            "id": null,
                            "params": [],
                            "body": {
                              "type": "Identifier",
                              "name": "string"
                            },
                            "generator": false,
                            "expression": true,
                            "async": false
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": false
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "writable",
                            "raw": "'writable'"
                          },
                          "computed": false,
                          "value": {
                            "type": "Literal",
                            "value": true,
                            "raw": "true"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": false
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "setToString"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/strictIndexOf.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "strictIndexOf"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "fromIndex"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "Identifier",
                        "name": "fromIndex"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "value"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "UnaryExpression",
                  "operator": "-",
                  "argument": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1"
                  },
                  "prefix": true
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "strictIndexOf"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * A specialized version of `indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/strictLastIndexOf.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "strictLastIndexOf"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "fromIndex"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "Identifier",
                        "name": "fromIndex"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "index"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "value"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "index"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "strictLastIndexOf"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * A specialized version of `lastIndexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/stringSize.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "asciiSize"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./asciiSize.js",
            "raw": "'./asciiSize.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "hasUnicode"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./hasUnicode.js",
            "raw": "'./hasUnicode.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "unicodeSize"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./unicodeSize.js",
            "raw": "'./unicodeSize.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "stringSize"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "hasUnicode"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "string"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "unicodeSize"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "string"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "asciiSize"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "string"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "stringSize"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the number of symbols in `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the string size.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/stringToArray.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "asciiToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./asciiToArray.js",
            "raw": "'./asciiToArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "hasUnicode"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./hasUnicode.js",
            "raw": "'./hasUnicode.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "unicodeToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./unicodeToArray.js",
            "raw": "'./unicodeToArray.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "stringToArray"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "hasUnicode"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "string"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "unicodeToArray"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "string"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "asciiToArray"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "string"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "stringToArray"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/stringToPath.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "memoizeCapped"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./memoizeCapped.js",
            "raw": "'./memoizeCapped.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "charCodeOfDot"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Literal",
                    "value": ".",
                    "raw": "'.'"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "charCodeAt"
                  }
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reEscapeChar"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/\\\\(\\\\)?/g",
                "regex": {
                  "pattern": "\\\\(\\\\)?",
                  "flags": "g"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rePropName"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "RegExp"
                },
                "arguments": [
                  {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "+",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                  "type": "BinaryExpression",
                                  "operator": "+",
                                  "left": {
                                    "type": "Literal",
                                    "value": "[^.[\\]]+",
                                    "raw": "'[^.[\\\\]]+'"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "|",
                                    "raw": "'|'"
                                  }
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "\\[(?:",
                                  "raw": "'\\\\[(?:'"
                                }
                              },
                              "right": {
                                "type": "Literal",
                                "value": "([^\"'][^[]*)",
                                "raw": "'([^\"\\'][^[]*)'"
                              }
                            },
                            "right": {
                              "type": "Literal",
                              "value": "|",
                              "raw": "'|'"
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": "([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2",
                            "raw": "'([\"\\'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2'"
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": ")\\]",
                          "raw": "')\\\\]'"
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": "|",
                        "raw": "'|'"
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": "(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))",
                      "raw": "'(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))'"
                    }
                  },
                  {
                    "type": "Literal",
                    "value": "g",
                    "raw": "'g'"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "stringToPath"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "memoizeCapped"
                },
                "arguments": [
                  {
                    "type": "ArrowFunctionExpression",
                    "id": null,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "string"
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "result"
                              },
                              "init": {
                                "type": "ArrayExpression",
                                "elements": []
                              }
                            }
                          ],
                          "kind": "const"
                        },
                        {
                          "type": "IfStatement",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "string"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "charCodeAt"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                }
                              ]
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "charCodeOfDot"
                            }
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "push"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": "",
                                      "raw": "''"
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "alternate": null
                        },
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "string"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "replace"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "rePropName"
                              },
                              {
                                "type": "ArrowFunctionExpression",
                                "id": null,
                                "params": [
                                  {
                                    "type": "Identifier",
                                    "name": "match"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "expression"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "quote"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "subString"
                                  }
                                ],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "VariableDeclaration",
                                      "declarations": [
                                        {
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "key"
                                          },
                                          "init": {
                                            "type": "Identifier",
                                            "name": "match"
                                          }
                                        }
                                      ],
                                      "kind": "let"
                                    },
                                    {
                                      "type": "IfStatement",
                                      "test": {
                                        "type": "Identifier",
                                        "name": "quote"
                                      },
                                      "consequent": {
                                        "type": "BlockStatement",
                                        "body": [
                                          {
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "key"
                                              },
                                              "right": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "subString"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "replace"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "reEscapeChar"
                                                  },
                                                  {
                                                    "type": "Literal",
                                                    "value": "$1",
                                                    "raw": "'$1'"
                                                  }
                                                ]
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      "alternate": {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "Identifier",
                                          "name": "expression"
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "Identifier",
                                                  "name": "key"
                                                },
                                                "right": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "computed": false,
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "expression"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "trim"
                                                    }
                                                  },
                                                  "arguments": []
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      }
                                    },
                                    {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "result"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "push"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "key"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "generator": false,
                                "expression": false,
                                "async": false
                              }
                            ]
                          }
                        },
                        {
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "Identifier",
                            "name": "result"
                          }
                        }
                      ]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "stringToPath"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Line",
          "value": " Match anything that isn't a dot or bracket."
        },
        {
          "type": "Line",
          "value": " Or match property names within brackets."
        },
        {
          "type": "Line",
          "value": " Match a non-string expression."
        },
        {
          "type": "Line",
          "value": " Or match strings (supports escaping characters)."
        },
        {
          "type": "Line",
          "value": " Or match \"\" as the space between consecutive dots or empty brackets."
        },
        {
          "type": "Block",
          "value": "*\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/toKey.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "../isSymbol.js",
            "raw": "'../isSymbol.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "INFINITY"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "/",
                "left": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1"
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "toKey"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Literal",
                      "value": "string",
                      "raw": "'string'"
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isSymbol"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "TemplateLiteral",
                      "quasis": [
                        {
                          "type": "TemplateElement",
                          "value": {
                            "raw": "",
                            "cooked": ""
                          },
                          "tail": false
                        },
                        {
                          "type": "TemplateElement",
                          "value": {
                            "raw": "",
                            "cooked": ""
                          },
                          "tail": true
                        }
                      ],
                      "expressions": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "result"
                      },
                      "right": {
                        "type": "Literal",
                        "value": "0",
                        "raw": "'0'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "/",
                        "left": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "value"
                        }
                      },
                      "right": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Identifier",
                          "name": "INFINITY"
                        },
                        "prefix": true
                      }
                    }
                  },
                  "consequent": {
                    "type": "Literal",
                    "value": "-0",
                    "raw": "'-0'"
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "result"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "toKey"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "*\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/unicodeSize.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsAstralRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ud800-\\udfff",
                "raw": "'\\\\ud800-\\\\udfff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u0300-\\u036f",
                "raw": "'\\\\u0300-\\\\u036f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reComboHalfMarksRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ufe20-\\ufe2f",
                "raw": "'\\\\ufe20-\\\\ufe2f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboSymbolsRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u20d0-\\u20ff",
                "raw": "'\\\\u20d0-\\\\u20ff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksExtendedRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u1ab0-\\u1aff",
                "raw": "'\\\\u1ab0-\\\\u1aff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksSupplementRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u1dc0-\\u1dff",
                "raw": "'\\\\u1dc0-\\\\u1dff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboRange"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "Identifier",
                        "name": "rsComboMarksRange"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "reComboHalfMarksRange"
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "rsComboSymbolsRange"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "rsComboMarksExtendedRange"
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "rsComboMarksSupplementRange"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsVarRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ufe0e\\ufe0f",
                "raw": "'\\\\ufe0e\\\\ufe0f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsAstral"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsAstralRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsCombo"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsComboRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsFitz"
              },
              "init": {
                "type": "Literal",
                "value": "\\ud83c[\\udffb-\\udfff]",
                "raw": "'\\\\ud83c[\\\\udffb-\\\\udfff]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsModifier"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "|",
                      "cooked": "|"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")",
                      "cooked": ")"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsCombo"
                  },
                  {
                    "type": "Identifier",
                    "name": "rsFitz"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsNonAstral"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[^",
                      "cooked": "[^"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsAstralRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsRegional"
              },
              "init": {
                "type": "Literal",
                "value": "(?:\\ud83c[\\udde6-\\uddff]){2}",
                "raw": "'(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsSurrPair"
              },
              "init": {
                "type": "Literal",
                "value": "[\\ud800-\\udbff][\\udc00-\\udfff]",
                "raw": "'[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsZWJ"
              },
              "init": {
                "type": "Literal",
                "value": "\\u200d",
                "raw": "'\\\\u200d'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reOptMod"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "",
                      "cooked": ""
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "?",
                      "cooked": "?"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsModifier"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsOptVar"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]?",
                      "cooked": "]?"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsVarRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsOptJoin"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")",
                      "cooked": ")"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")*",
                      "cooked": ")*"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsZWJ"
                  },
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "ArrayExpression",
                        "elements": [
                          {
                            "type": "Identifier",
                            "name": "rsNonAstral"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsRegional"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsSurrPair"
                          }
                        ]
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "join"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "|",
                        "raw": "'|'"
                      }
                    ]
                  },
                  {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "Identifier",
                      "name": "rsOptVar"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "reOptMod"
                    }
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsSeq"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Identifier",
                    "name": "rsOptVar"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "reOptMod"
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "rsOptJoin"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsNonAstralCombo"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "",
                      "cooked": ""
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "",
                      "cooked": ""
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "?",
                      "cooked": "?"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsNonAstral"
                  },
                  {
                    "type": "Identifier",
                    "name": "rsCombo"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsSymbol"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")",
                      "cooked": ")"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "ArrayExpression",
                        "elements": [
                          {
                            "type": "Identifier",
                            "name": "rsNonAstralCombo"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsCombo"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsRegional"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsSurrPair"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsAstral"
                          }
                        ]
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "join"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "|",
                        "raw": "'|'"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reUnicode"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "RegExp"
                },
                "arguments": [
                  {
                    "type": "TemplateLiteral",
                    "quasis": [
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "",
                          "cooked": ""
                        },
                        "tail": false
                      },
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "(?=",
                          "cooked": "(?="
                        },
                        "tail": false
                      },
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": ")|",
                          "cooked": ")|"
                        },
                        "tail": false
                      },
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "",
                          "cooked": ""
                        },
                        "tail": true
                      }
                    ],
                    "expressions": [
                      {
                        "type": "Identifier",
                        "name": "rsFitz"
                      },
                      {
                        "type": "Identifier",
                        "name": "rsFitz"
                      },
                      {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "Identifier",
                          "name": "rsSymbol"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "rsSeq"
                        }
                      }
                    ]
                  },
                  {
                    "type": "Literal",
                    "value": "g",
                    "raw": "'g'"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "unicodeSize"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "reUnicode"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "lastIndex"
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "reUnicode"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "test"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "string"
                    }
                  ]
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "UpdateExpression",
                        "operator": "++",
                        "argument": {
                          "type": "Identifier",
                          "name": "result"
                        },
                        "prefix": true
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "unicodeSize"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose unicode character classes. "
        },
        {
          "type": "Block",
          "value": "* Used to compose unicode capture groups. "
        },
        {
          "type": "Block",
          "value": "* Used to compose unicode regexes. "
        },
        {
          "type": "Block",
          "value": "* Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). "
        },
        {
          "type": "Block",
          "value": "*\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/unicodeToArray.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsAstralRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ud800-\\udfff",
                "raw": "'\\\\ud800-\\\\udfff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u0300-\\u036f",
                "raw": "'\\\\u0300-\\\\u036f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reComboHalfMarksRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ufe20-\\ufe2f",
                "raw": "'\\\\ufe20-\\\\ufe2f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboSymbolsRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u20d0-\\u20ff",
                "raw": "'\\\\u20d0-\\\\u20ff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksExtendedRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u1ab0-\\u1aff",
                "raw": "'\\\\u1ab0-\\\\u1aff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksSupplementRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u1dc0-\\u1dff",
                "raw": "'\\\\u1dc0-\\\\u1dff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboRange"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "Identifier",
                        "name": "rsComboMarksRange"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "reComboHalfMarksRange"
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "rsComboSymbolsRange"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "rsComboMarksExtendedRange"
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "rsComboMarksSupplementRange"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsVarRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ufe0e\\ufe0f",
                "raw": "'\\\\ufe0e\\\\ufe0f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsAstral"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsAstralRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsCombo"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsComboRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsFitz"
              },
              "init": {
                "type": "Literal",
                "value": "\\ud83c[\\udffb-\\udfff]",
                "raw": "'\\\\ud83c[\\\\udffb-\\\\udfff]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsModifier"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "|",
                      "cooked": "|"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")",
                      "cooked": ")"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsCombo"
                  },
                  {
                    "type": "Identifier",
                    "name": "rsFitz"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsNonAstral"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[^",
                      "cooked": "[^"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsAstralRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsRegional"
              },
              "init": {
                "type": "Literal",
                "value": "(?:\\ud83c[\\udde6-\\uddff]){2}",
                "raw": "'(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsSurrPair"
              },
              "init": {
                "type": "Literal",
                "value": "[\\ud800-\\udbff][\\udc00-\\udfff]",
                "raw": "'[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsZWJ"
              },
              "init": {
                "type": "Literal",
                "value": "\\u200d",
                "raw": "'\\\\u200d'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reOptMod"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "",
                      "cooked": ""
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "?",
                      "cooked": "?"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsModifier"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsOptVar"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]?",
                      "cooked": "]?"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsVarRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsOptJoin"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")",
                      "cooked": ")"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")*",
                      "cooked": ")*"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsZWJ"
                  },
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "ArrayExpression",
                        "elements": [
                          {
                            "type": "Identifier",
                            "name": "rsNonAstral"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsRegional"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsSurrPair"
                          }
                        ]
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "join"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "|",
                        "raw": "'|'"
                      }
                    ]
                  },
                  {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "Identifier",
                      "name": "rsOptVar"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "reOptMod"
                    }
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsSeq"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Identifier",
                    "name": "rsOptVar"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "reOptMod"
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "rsOptJoin"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsNonAstralCombo"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "",
                      "cooked": ""
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "",
                      "cooked": ""
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "?",
                      "cooked": "?"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsNonAstral"
                  },
                  {
                    "type": "Identifier",
                    "name": "rsCombo"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsSymbol"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")",
                      "cooked": ")"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "ArrayExpression",
                        "elements": [
                          {
                            "type": "Identifier",
                            "name": "rsNonAstralCombo"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsCombo"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsRegional"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsSurrPair"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsAstral"
                          }
                        ]
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "join"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "|",
                        "raw": "'|'"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reUnicode"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "RegExp"
                },
                "arguments": [
                  {
                    "type": "TemplateLiteral",
                    "quasis": [
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "",
                          "cooked": ""
                        },
                        "tail": false
                      },
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "(?=",
                          "cooked": "(?="
                        },
                        "tail": false
                      },
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": ")|",
                          "cooked": ")|"
                        },
                        "tail": false
                      },
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "",
                          "cooked": ""
                        },
                        "tail": true
                      }
                    ],
                    "expressions": [
                      {
                        "type": "Identifier",
                        "name": "rsFitz"
                      },
                      {
                        "type": "Identifier",
                        "name": "rsFitz"
                      },
                      {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "Identifier",
                          "name": "rsSymbol"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "rsSeq"
                        }
                      }
                    ]
                  },
                  {
                    "type": "Literal",
                    "value": "g",
                    "raw": "'g'"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "unicodeToArray"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "string"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "match"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "reUnicode"
                      }
                    ]
                  },
                  "right": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "unicodeToArray"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose unicode character classes. "
        },
        {
          "type": "Block",
          "value": "* Used to compose unicode capture groups. "
        },
        {
          "type": "Block",
          "value": "* Used to compose unicode regexes. "
        },
        {
          "type": "Block",
          "value": "* Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). "
        },
        {
          "type": "Block",
          "value": "*\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/.internal/unicodeWords.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsAstralRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ud800-\\udfff",
                "raw": "'\\\\ud800-\\\\udfff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u0300-\\u036f",
                "raw": "'\\\\u0300-\\\\u036f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reComboHalfMarksRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ufe20-\\ufe2f",
                "raw": "'\\\\ufe20-\\\\ufe2f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboSymbolsRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u20d0-\\u20ff",
                "raw": "'\\\\u20d0-\\\\u20ff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksExtendedRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u1ab0-\\u1aff",
                "raw": "'\\\\u1ab0-\\\\u1aff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksSupplementRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u1dc0-\\u1dff",
                "raw": "'\\\\u1dc0-\\\\u1dff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboRange"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "Identifier",
                        "name": "rsComboMarksRange"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "reComboHalfMarksRange"
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "rsComboSymbolsRange"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "rsComboMarksExtendedRange"
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "rsComboMarksSupplementRange"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsDingbatRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u2700-\\u27bf",
                "raw": "'\\\\u2700-\\\\u27bf'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsLowerRange"
              },
              "init": {
                "type": "Literal",
                "value": "a-z\\xdf-\\xf6\\xf8-\\xff",
                "raw": "'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsMathOpRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\xac\\xb1\\xd7\\xf7",
                "raw": "'\\\\xac\\\\xb1\\\\xd7\\\\xf7'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsNonCharRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf",
                "raw": "'\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsPunctuationRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u2000-\\u206f",
                "raw": "'\\\\u2000-\\\\u206f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsSpaceRange"
              },
              "init": {
                "type": "Literal",
                "value": " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
                "raw": "' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsUpperRange"
              },
              "init": {
                "type": "Literal",
                "value": "A-Z\\xc0-\\xd6\\xd8-\\xde",
                "raw": "'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsVarRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ufe0e\\ufe0f",
                "raw": "'\\\\ufe0e\\\\ufe0f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsBreakRange"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "Identifier",
                      "name": "rsMathOpRange"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "rsNonCharRange"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "rsPunctuationRange"
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "rsSpaceRange"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsApos"
              },
              "init": {
                "type": "Literal",
                "value": "['’]",
                "raw": "\"['\\u2019]\""
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsBreak"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsBreakRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsCombo"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsComboRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsDigit"
              },
              "init": {
                "type": "Literal",
                "value": "\\d",
                "raw": "'\\\\d'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsDingbat"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsDingbatRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsLower"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsLowerRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsMisc"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[^",
                      "cooked": "[^"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "",
                      "cooked": ""
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsAstralRange"
                  },
                  {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "Identifier",
                            "name": "rsBreakRange"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "rsDigit"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "rsDingbatRange"
                        }
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "rsLowerRange"
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "rsUpperRange"
                    }
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsFitz"
              },
              "init": {
                "type": "Literal",
                "value": "\\ud83c[\\udffb-\\udfff]",
                "raw": "'\\\\ud83c[\\\\udffb-\\\\udfff]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsModifier"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "|",
                      "cooked": "|"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")",
                      "cooked": ")"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsCombo"
                  },
                  {
                    "type": "Identifier",
                    "name": "rsFitz"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsNonAstral"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[^",
                      "cooked": "[^"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsAstralRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsRegional"
              },
              "init": {
                "type": "Literal",
                "value": "(?:\\ud83c[\\udde6-\\uddff]){2}",
                "raw": "'(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsSurrPair"
              },
              "init": {
                "type": "Literal",
                "value": "[\\ud800-\\udbff][\\udc00-\\udfff]",
                "raw": "'[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsUpper"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsUpperRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsZWJ"
              },
              "init": {
                "type": "Literal",
                "value": "\\u200d",
                "raw": "'\\\\u200d'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsMiscLower"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "|",
                      "cooked": "|"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")",
                      "cooked": ")"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsLower"
                  },
                  {
                    "type": "Identifier",
                    "name": "rsMisc"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsMiscUpper"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "|",
                      "cooked": "|"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")",
                      "cooked": ")"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsUpper"
                  },
                  {
                    "type": "Identifier",
                    "name": "rsMisc"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsOptContrLower"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:d|ll|m|re|s|t|ve))?",
                      "cooked": "(?:d|ll|m|re|s|t|ve))?"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsApos"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsOptContrUpper"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:D|LL|M|RE|S|T|VE))?",
                      "cooked": "(?:D|LL|M|RE|S|T|VE))?"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsApos"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reOptMod"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "",
                      "cooked": ""
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "?",
                      "cooked": "?"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsModifier"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsOptVar"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]?",
                      "cooked": "]?"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsVarRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsOptJoin"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")",
                      "cooked": ")"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")*",
                      "cooked": ")*"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsZWJ"
                  },
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "ArrayExpression",
                        "elements": [
                          {
                            "type": "Identifier",
                            "name": "rsNonAstral"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsRegional"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsSurrPair"
                          }
                        ]
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "join"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "|",
                        "raw": "'|'"
                      }
                    ]
                  },
                  {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "Identifier",
                      "name": "rsOptVar"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "reOptMod"
                    }
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsOrdLower"
              },
              "init": {
                "type": "Literal",
                "value": "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",
                "raw": "'\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsOrdUpper"
              },
              "init": {
                "type": "Literal",
                "value": "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])",
                "raw": "'\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsSeq"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Identifier",
                    "name": "rsOptVar"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "reOptMod"
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "rsOptJoin"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsEmoji"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "(?:",
                      "cooked": "(?:"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": ")",
                      "cooked": ")"
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "",
                      "cooked": ""
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "ArrayExpression",
                        "elements": [
                          {
                            "type": "Identifier",
                            "name": "rsDingbat"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsRegional"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsSurrPair"
                          }
                        ]
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "join"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "|",
                        "raw": "'|'"
                      }
                    ]
                  },
                  {
                    "type": "Identifier",
                    "name": "rsSeq"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reUnicodeWords"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "RegExp"
                },
                "arguments": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "ArrayExpression",
                        "elements": [
                          {
                            "type": "TemplateLiteral",
                            "quasis": [
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "?",
                                  "cooked": "?"
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "+",
                                  "cooked": "+"
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "(?=",
                                  "cooked": "(?="
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": ")",
                                  "cooked": ")"
                                },
                                "tail": true
                              }
                            ],
                            "expressions": [
                              {
                                "type": "Identifier",
                                "name": "rsUpper"
                              },
                              {
                                "type": "Identifier",
                                "name": "rsLower"
                              },
                              {
                                "type": "Identifier",
                                "name": "rsOptContrLower"
                              },
                              {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ArrayExpression",
                                    "elements": [
                                      {
                                        "type": "Identifier",
                                        "name": "rsBreak"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "rsUpper"
                                      },
                                      {
                                        "type": "Literal",
                                        "value": "$",
                                        "raw": "'$'"
                                      }
                                    ]
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "join"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Literal",
                                    "value": "|",
                                    "raw": "'|'"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "TemplateLiteral",
                            "quasis": [
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "+",
                                  "cooked": "+"
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "(?=",
                                  "cooked": "(?="
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": ")",
                                  "cooked": ")"
                                },
                                "tail": true
                              }
                            ],
                            "expressions": [
                              {
                                "type": "Identifier",
                                "name": "rsMiscUpper"
                              },
                              {
                                "type": "Identifier",
                                "name": "rsOptContrUpper"
                              },
                              {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "ArrayExpression",
                                    "elements": [
                                      {
                                        "type": "Identifier",
                                        "name": "rsBreak"
                                      },
                                      {
                                        "type": "BinaryExpression",
                                        "operator": "+",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "rsUpper"
                                        },
                                        "right": {
                                          "type": "Identifier",
                                          "name": "rsMiscLower"
                                        }
                                      },
                                      {
                                        "type": "Literal",
                                        "value": "$",
                                        "raw": "'$'"
                                      }
                                    ]
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "join"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Literal",
                                    "value": "|",
                                    "raw": "'|'"
                                  }
                                ]
                              }
                            ]
                          },
                          {
                            "type": "TemplateLiteral",
                            "quasis": [
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "?",
                                  "cooked": "?"
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "+",
                                  "cooked": "+"
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": true
                              }
                            ],
                            "expressions": [
                              {
                                "type": "Identifier",
                                "name": "rsUpper"
                              },
                              {
                                "type": "Identifier",
                                "name": "rsMiscLower"
                              },
                              {
                                "type": "Identifier",
                                "name": "rsOptContrLower"
                              }
                            ]
                          },
                          {
                            "type": "TemplateLiteral",
                            "quasis": [
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "+",
                                  "cooked": "+"
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": true
                              }
                            ],
                            "expressions": [
                              {
                                "type": "Identifier",
                                "name": "rsUpper"
                              },
                              {
                                "type": "Identifier",
                                "name": "rsOptContrUpper"
                              }
                            ]
                          },
                          {
                            "type": "Identifier",
                            "name": "rsOrdUpper"
                          },
                          {
                            "type": "Identifier",
                            "name": "rsOrdLower"
                          },
                          {
                            "type": "TemplateLiteral",
                            "quasis": [
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "+",
                                  "cooked": "+"
                                },
                                "tail": true
                              }
                            ],
                            "expressions": [
                              {
                                "type": "Identifier",
                                "name": "rsDigit"
                              }
                            ]
                          },
                          {
                            "type": "Identifier",
                            "name": "rsEmoji"
                          }
                        ]
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "join"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": "|",
                        "raw": "'|'"
                      }
                    ]
                  },
                  {
                    "type": "Literal",
                    "value": "g",
                    "raw": "'g'"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "unicodeWords"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "match"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "reUnicodeWords"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "unicodeWords"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose unicode character classes. "
        },
        {
          "type": "Block",
          "value": "* Used to compose unicode capture groups. "
        },
        {
          "type": "Block",
          "value": "* Used to compose unicode regexes. "
        },
        {
          "type": "Block",
          "value": "*\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/add.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createMathOperation"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createMathOperation.js",
            "raw": "'./.internal/createMathOperation.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "add"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createMathOperation"
                },
                "arguments": [
                  {
                    "type": "ArrowFunctionExpression",
                    "id": null,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "augend"
                      },
                      {
                        "type": "Identifier",
                        "name": "addend"
                      }
                    ],
                    "body": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "Identifier",
                        "name": "augend"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "addend"
                      }
                    },
                    "generator": false,
                    "expression": true,
                    "async": false
                  },
                  {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "add"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Adds two numbers.\n *\n * @since 3.4.0\n * @category Math\n * @param {number} augend The first number in an addition.\n * @param {number} addend The second number in an addition.\n * @returns {number} Returns the total.\n * @example\n *\n * add(6, 4)\n * // => 10\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/after.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "after"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "n"
            },
            {
              "type": "Identifier",
              "name": "func"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!=",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "function",
                    "raw": "'function'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ThrowStatement",
                      "argument": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "TypeError"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "Expected a function",
                            "raw": "'Expected a function'"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "n"
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "Identifier",
                      "name": "n"
                    },
                    "right": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "RestElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "UpdateExpression",
                            "operator": "--",
                            "argument": {
                              "type": "Identifier",
                              "name": "n"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "func"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "apply"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "ThisExpression"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "args"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "alternate": null
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "after"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The opposite of `before`. This method creates a function that invokes\n * `func` once it's called `n` or more times.\n *\n * @since 0.1.0\n * @category Function\n * @param {number} n The number of calls before `func` is invoked.\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new restricted function.\n * @example\n *\n * const saves = ['profile', 'settings']\n * const done = after(saves.length, () => console.log('done saving!'))\n *\n * forEach(saves, type => asyncSave({ 'type': type, 'complete': done }))\n * // => Logs 'done saving!' after the two async saves have completed.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/at.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseAt"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseAt.js",
            "raw": "'./.internal/baseAt.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "at"
              },
              "init": {
                "type": "ArrowFunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "object"
                  },
                  {
                    "type": "RestElement",
                    "argument": {
                      "type": "Identifier",
                      "name": "paths"
                    }
                  }
                ],
                "body": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseAt"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    },
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseFlatten"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "paths"
                        },
                        {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        }
                      ]
                    }
                  ]
                },
                "generator": false,
                "expression": true,
                "async": false
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "at"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of values corresponding to `paths` of `object`.\n *\n * @since 1.0.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Array} Returns the picked values.\n * @example\n *\n * const object = { 'a': [{ 'b': { 'c': 3 } }, 4] }\n *\n * at(object, ['a[0].b.c', 'a[1]'])\n * // => [3, 4]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/attempt.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isError"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isError.js",
            "raw": "'./isError.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "attempt"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "func"
            },
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "args"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "TryStatement",
                "block": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "func"
                        },
                        "arguments": [
                          {
                            "type": "SpreadElement",
                            "argument": {
                              "type": "Identifier",
                              "name": "args"
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "handler": {
                  "type": "CatchClause",
                  "param": {
                    "type": "Identifier",
                    "name": "e"
                  },
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isError"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "e"
                              }
                            ]
                          },
                          "consequent": {
                            "type": "Identifier",
                            "name": "e"
                          },
                          "alternate": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "Error"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "e"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "finalizer": null
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "attempt"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Attempts to invoke `func`, returning either the result or the caught error\n * object. Any additional arguments are provided to `func` when it's invoked.\n *\n * @since 3.0.0\n * @category Util\n * @param {Function} func The function to attempt.\n * @param {...*} [args] The arguments to invoke `func` with.\n * @returns {*} Returns the `func` result or error object.\n * @example\n *\n * // Avoid throwing errors for invalid selectors.\n * const elements = attempt(selector =>\n *   document.querySelectorAll(selector), '>_>')\n *\n * if (isError(elements)) {\n *   elements = []\n * }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/before.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "before"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "n"
            },
            {
              "type": "Identifier",
              "name": "func"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!=",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "function",
                    "raw": "'function'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ThrowStatement",
                      "argument": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "TypeError"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "Expected a function",
                            "raw": "'Expected a function'"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "RestElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": ">",
                          "left": {
                            "type": "UpdateExpression",
                            "operator": "--",
                            "argument": {
                              "type": "Identifier",
                              "name": "n"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "func"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "apply"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "ThisExpression"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "args"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<=",
                          "left": {
                            "type": "Identifier",
                            "name": "n"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "func"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "undefined"
                                }
                              }
                            }
                          ]
                        },
                        "alternate": null
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Identifier",
                          "name": "result"
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "before"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that invokes `func`, with the `this` binding and arguments\n * of the created function, while it's called less than `n` times. Subsequent\n * calls to the created function return the result of the last `func` invocation.\n *\n * @since 3.0.0\n * @category Function\n * @param {number} n The number of calls at which `func` is no longer invoked.\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new restricted function.\n * @example\n *\n * jQuery(element).on('click', before(5, addContactToList))\n * // => Allows adding up to 4 contacts to the list.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/camelCase.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "upperFirst"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./upperFirst.js",
            "raw": "'./upperFirst.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "words"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./words.js",
            "raw": "'./words.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toString"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toString.js",
            "raw": "'./toString.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "camelCase"
              },
              "init": {
                "type": "ArrowFunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "string"
                  }
                ],
                "body": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "words"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "toString"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "string"
                                }
                              ]
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "replace"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": {},
                              "raw": "/['\\u2019]/g",
                              "regex": {
                                "pattern": "['\\u2019]",
                                "flags": "g"
                              }
                            },
                            {
                              "type": "Literal",
                              "value": "",
                              "raw": "''"
                            }
                          ]
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "reduce"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "result"
                        },
                        {
                          "type": "Identifier",
                          "name": "word"
                        },
                        {
                          "type": "Identifier",
                          "name": "index"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "word"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "word"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "toLowerCase"
                                  }
                                },
                                "arguments": []
                              }
                            }
                          },
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "BinaryExpression",
                              "operator": "+",
                              "left": {
                                "type": "Identifier",
                                "name": "result"
                              },
                              "right": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "index"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "upperFirst"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "word"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "Identifier",
                                  "name": "word"
                                }
                              }
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    },
                    {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  ]
                },
                "generator": false,
                "expression": true,
                "async": false
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "camelCase"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n *\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the camel cased string.\n * @see lowerCase, kebabCase, snakeCase, startCase, upperCase, upperFirst\n * @example\n *\n * camelCase('Foo Bar')\n * // => 'fooBar'\n *\n * camelCase('--foo-bar--')\n * // => 'fooBar'\n *\n * camelCase('__FOO_BAR__')\n * // => 'fooBar'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/capitalize.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "upperFirst"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./upperFirst.js",
            "raw": "'./upperFirst.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toString"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toString.js",
            "raw": "'./toString.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "capitalize"
              },
              "init": {
                "type": "ArrowFunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "string"
                  }
                ],
                "body": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "upperFirst"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "toString"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "string"
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "toLowerCase"
                        }
                      },
                      "arguments": []
                    }
                  ]
                },
                "generator": false,
                "expression": true,
                "async": false
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "capitalize"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * capitalize('FRED')\n * // => 'Fred'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/castArray.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "castArray"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "args"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "args"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "args"
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "isArray"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "castArray"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Casts `value` as an array if it's not one.\n *\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * castArray(1)\n * // => [1]\n *\n * castArray({ 'a': 1 })\n * // => [{ 'a': 1 }]\n *\n * castArray('abc')\n * // => ['abc']\n *\n * castArray(null)\n * // => [null]\n *\n * castArray(undefined)\n * // => [undefined]\n *\n * castArray()\n * // => []\n *\n * const array = [1, 2, 3]\n * console.log(castArray(array) === array)\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/ceil.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createRound"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createRound.js",
            "raw": "'./.internal/createRound.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "ceil"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createRound"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "value": "ceil",
                    "raw": "'ceil'"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "ceil"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Computes `number` rounded up to `precision`. (Round up: the smallest integer greater than or equal to a given number.)\n *\n * @since 3.10.0\n * @category Math\n * @param {number} number The number to round up.\n * @param {number} [precision=0] The precision to round up to.\n * @returns {number} Returns the rounded up number.\n * @example\n *\n * ceil(4.006)\n * // => 5\n *\n * ceil(6.004, 2)\n * // => 6.01\n *\n * ceil(6040, -2)\n * // => 6100\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/chunk.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "slice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./slice.js",
            "raw": "'./slice.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toInteger"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toInteger.js",
            "raw": "'./toInteger.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "chunk"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "AssignmentPattern",
              "left": {
                "type": "Identifier",
                "name": "size"
              },
              "right": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "size"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Math"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "max"
                      }
                    },
                    "arguments": [
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "toInteger"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "size"
                          }
                        ]
                      },
                      {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "Identifier",
                      "name": "size"
                    },
                    "right": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "resIndex"
                    },
                    "init": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Math"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "ceil"
                            }
                          },
                          "arguments": [
                            {
                              "type": "BinaryExpression",
                              "operator": "/",
                              "left": {
                                "type": "Identifier",
                                "name": "length"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "size"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "index"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                              "type": "Identifier",
                              "name": "resIndex"
                            },
                            "prefix": false
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "slice"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "array"
                            },
                            {
                              "type": "Identifier",
                              "name": "index"
                            },
                            {
                              "type": "AssignmentExpression",
                              "operator": "+=",
                              "left": {
                                "type": "Identifier",
                                "name": "index"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "size"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "chunk"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * chunk(['a', 'b', 'c', 'd'], 2)\n * // => [['a', 'b'], ['c', 'd']]\n *\n * chunk(['a', 'b', 'c', 'd'], 3)\n * // => [['a', 'b', 'c'], ['d']]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/clamp.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "clamp"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "number"
            },
            {
              "type": "Identifier",
              "name": "lower"
            },
            {
              "type": "Identifier",
              "name": "upper"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "number"
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "+",
                    "argument": {
                      "type": "Identifier",
                      "name": "number"
                    },
                    "prefix": true
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "lower"
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "+",
                    "argument": {
                      "type": "Identifier",
                      "name": "lower"
                    },
                    "prefix": true
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "upper"
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "+",
                    "argument": {
                      "type": "Identifier",
                      "name": "upper"
                    },
                    "prefix": true
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "lower"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "lower"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "lower"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "lower"
                    },
                    "alternate": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "upper"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "upper"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "upper"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "upper"
                    },
                    "alternate": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "number"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "number"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "number"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "<=",
                            "left": {
                              "type": "Identifier",
                              "name": "number"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "upper"
                            }
                          },
                          "consequent": {
                            "type": "Identifier",
                            "name": "number"
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "upper"
                          }
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "number"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "number"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "lower"
                            }
                          },
                          "consequent": {
                            "type": "Identifier",
                            "name": "number"
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "lower"
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "number"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "clamp"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Clamps `number` within the inclusive `lower` and `upper` bounds.\n *\n * @since 4.0.0\n * @category Number\n * @param {number} number The number to clamp.\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n * @example\n *\n * clamp(-10, -5, 5)\n * // => -5\n *\n * clamp(10, -5, 5)\n * // => 5\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/clone.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseClone"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseClone.js",
            "raw": "'./.internal/baseClone.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "CLONE_SYMBOLS_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 4,
                "raw": "4"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "clone"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseClone"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "Identifier",
                      "name": "CLONE_SYMBOLS_FLAG"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "clone"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for cloning. "
        },
        {
          "type": "Block",
          "value": "*\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. Object inheritance is preserved. An empty object is\n * returned for uncloneable values such as error objects, functions, DOM nodes,\n * and WeakMaps.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see cloneDeep\n * @example\n *\n * const objects = [{ 'a': 1 }, { 'b': 2 }]\n *\n * const shallow = clone(objects)\n * console.log(shallow[0] === objects[0])\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/cloneDeep.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseClone"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseClone.js",
            "raw": "'./.internal/baseClone.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "CLONE_DEEP_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "CLONE_SYMBOLS_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 4,
                "raw": "4"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "cloneDeep"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseClone"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "BinaryExpression",
                      "operator": "|",
                      "left": {
                        "type": "Identifier",
                        "name": "CLONE_DEEP_FLAG"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "CLONE_SYMBOLS_FLAG"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "cloneDeep"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for cloning. "
        },
        {
          "type": "Block",
          "value": "*\n * This method is like `clone` except that it recursively clones `value`.\n * Object inheritance is preserved.\n *\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see clone\n * @example\n *\n * const objects = [{ 'a': 1 }, { 'b': 2 }]\n *\n * const deep = cloneDeep(objects)\n * console.log(deep[0] === objects[0])\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/cloneDeepWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseClone"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseClone.js",
            "raw": "'./.internal/baseClone.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "CLONE_DEEP_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "CLONE_SYMBOLS_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 4,
                "raw": "4"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "cloneDeepWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "customizer"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "customizer"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "customizer"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseClone"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "BinaryExpression",
                      "operator": "|",
                      "left": {
                        "type": "Identifier",
                        "name": "CLONE_DEEP_FLAG"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "CLONE_SYMBOLS_FLAG"
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "customizer"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "cloneDeepWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for cloning. "
        },
        {
          "type": "Block",
          "value": "*\n * This method is like `cloneWith` except that it recursively clones `value`.\n * The customizer is invoked with up to four arguments\n * (value [, index|key, object, stack]).\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @param {Function} [customizer] The function to customize cloning.\n * @returns {*} Returns the deep cloned value.\n * @see cloneWith\n * @example\n *\n * function customizer(value) {\n *   if (isElement(value)) {\n *     return value.cloneNode(true)\n *   }\n * }\n *\n * const el = cloneDeepWith(document.body, customizer)\n *\n * console.log(el === document.body)\n * // => false\n * console.log(el.nodeName)\n * // => 'BODY'\n * console.log(el.childNodes.length)\n * // => 20\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/cloneWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseClone"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseClone.js",
            "raw": "'./.internal/baseClone.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "CLONE_SYMBOLS_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 4,
                "raw": "4"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "cloneWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "customizer"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "customizer"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "customizer"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseClone"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "Identifier",
                      "name": "CLONE_SYMBOLS_FLAG"
                    },
                    {
                      "type": "Identifier",
                      "name": "customizer"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "cloneWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for cloning. "
        },
        {
          "type": "Block",
          "value": "*\n * This method is like `clone` except that it accepts `customizer` which\n * is invoked to produce the cloned value. If `customizer` returns `undefined`,\n * cloning is handled by the method instead. The `customizer` is invoked with\n * one argument (value).\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to clone.\n * @param {Function} [customizer] The function to customize cloning.\n * @returns {*} Returns the cloned value.\n * @see cloneDeepWith\n * @example\n *\n * function customizer(value) {\n *   if (isElement(value)) {\n *     return value.cloneNode(false)\n *   }\n * }\n *\n * const el = cloneWith(document.body, customizer)\n *\n * console.log(el === document.body)\n * // => false\n * console.log(el.nodeName)\n * // => 'BODY'\n * console.log(el.childNodes.length)\n * // => 0\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/compact.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "compact"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "resIndex"
                    },
                    "init": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "array"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ForOfStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "array"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "resIndex"
                                  },
                                  "prefix": false
                                }
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "value"
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "compact"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * compact([0, 1, false, 2, '', 3])\n * // => [1, 2, 3]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/cond.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "cond"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "pairs"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "pairs"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "pairs"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "pairs"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "prefix": true
                    },
                    "consequent": {
                      "type": "ArrayExpression",
                      "elements": []
                    },
                    "alternate": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "map"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "pairs"
                        },
                        {
                          "type": "ArrowFunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "pair"
                            }
                          ],
                          "body": {
                            "type": "BlockStatement",
                            "body": [
                              {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "operator": "!=",
                                  "left": {
                                    "type": "UnaryExpression",
                                    "operator": "typeof",
                                    "argument": {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "pair"
                                      },
                                      "property": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                      }
                                    },
                                    "prefix": true
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": "function",
                                    "raw": "'function'"
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [
                                    {
                                      "type": "ThrowStatement",
                                      "argument": {
                                        "type": "NewExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "TypeError"
                                        },
                                        "arguments": [
                                          {
                                            "type": "Literal",
                                            "value": "Expected a function",
                                            "raw": "'Expected a function'"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                },
                                "alternate": null
                              },
                              {
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "ArrayExpression",
                                  "elements": [
                                    {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "pair"
                                      },
                                      "property": {
                                        "type": "Literal",
                                        "value": 0,
                                        "raw": "0"
                                      }
                                    },
                                    {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "pair"
                                      },
                                      "property": {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "generator": false,
                          "expression": false,
                          "async": false
                        }
                      ]
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "RestElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ForOfStatement",
                        "left": {
                          "type": "VariableDeclaration",
                          "declarations": [
                            {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "pair"
                              },
                              "init": null
                            }
                          ],
                          "kind": "const"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "pairs"
                        },
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "pair"
                                    },
                                    "property": {
                                      "type": "Literal",
                                      "value": 0,
                                      "raw": "0"
                                    }
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "apply"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "ThisExpression"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "args"
                                  }
                                ]
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "MemberExpression",
                                          "computed": true,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "pair"
                                          },
                                          "property": {
                                            "type": "Literal",
                                            "value": 1,
                                            "raw": "1"
                                          }
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "apply"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "ThisExpression"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "args"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "cond"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that iterates over `pairs` and invokes the corresponding\n * function of the first predicate to return truthy. The predicate-function\n * pairs are invoked with the `this` binding and arguments of the created\n * function.\n *\n * @since 4.0.0\n * @category Util\n * @param {Array} pairs The predicate-function pairs.\n * @returns {Function} Returns the new composite function.\n * @example\n *\n * const func = cond([\n *   [matches({ 'a': 1 }),         () => 'matches A'],\n *   [conforms({ 'b': isNumber }), () => 'matches B'],\n *   [() => true,                  () => 'no match']\n * ])\n *\n * func({ 'a': 1, 'b': 2 })\n * // => 'matches A'\n *\n * func({ 'a': 0, 'b': 1 })\n * // => 'matches B'\n *\n * func({ 'a': '1', 'b': '2' })\n * // => 'no match'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/conforms.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseClone"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseClone.js",
            "raw": "'./.internal/baseClone.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseConforms"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseConforms.js",
            "raw": "'./.internal/baseConforms.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "CLONE_DEEP_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "conforms"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "source"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseConforms"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseClone"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "source"
                        },
                        {
                          "type": "Identifier",
                          "name": "CLONE_DEEP_FLAG"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "conforms"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for cloning. "
        },
        {
          "type": "Block",
          "value": "*\n * Creates a function that invokes the predicate properties of `source` with\n * the corresponding property values of a given object, returning `true` if\n * all predicates return truthy, else `false`.\n *\n * **Note:** The created function is equivalent to `conformsTo` with\n * `source` partially applied.\n *\n * @since 4.0.0\n * @category Util\n * @param {Object} source The object of property predicates to conform to.\n * @returns {Function} Returns the new spec function.\n * @example\n *\n * const objects = [\n *   { 'a': 2, 'b': 1 },\n *   { 'a': 1, 'b': 2 }\n * ]\n *\n * filter(objects, conforms({ 'b': function(n) { return n > 1 } }))\n * // => [{ 'a': 1, 'b': 2 }]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/conformsTo.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseConformsTo"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseConformsTo.js",
            "raw": "'./.internal/baseConformsTo.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "keys"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./keys.js",
            "raw": "'./keys.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "conformsTo"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "source"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "source"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseConformsTo"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "source"
                      },
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "keys"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "source"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "conformsTo"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `object` conforms to `source` by invoking the predicate\n * properties of `source` with the corresponding property values of `object`.\n *\n * **Note:** This method is equivalent to `conforms` when `source` is\n * partially applied.\n *\n * @since 4.14.0\n * @category Lang\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property predicates to conform to.\n * @returns {boolean} Returns `true` if `object` conforms, else `false`.\n * @example\n *\n * const object = { 'a': 1, 'b': 2 }\n *\n * conformsTo(object, { 'b': function(n) { return n > 1 } })\n * // => true\n *\n * conformsTo(object, { 'b': function(n) { return n > 2 } })\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/countBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseAssignValue"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseAssignValue.js",
            "raw": "'./.internal/baseAssignValue.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "reduce"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./reduce.js",
            "raw": "'./reduce.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasOwnProperty"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "hasOwnProperty"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "countBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "reduce"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "result"
                        },
                        {
                          "type": "Identifier",
                          "name": "value"
                        },
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "key"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "hasOwnProperty"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "call"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "UpdateExpression",
                                    "operator": "++",
                                    "argument": {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "result"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "key"
                                      }
                                    },
                                    "prefix": true
                                  }
                                }
                              ]
                            },
                            "alternate": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "baseAssignValue"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "result"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "key"
                                      },
                                      {
                                        "type": "Literal",
                                        "value": 1,
                                        "raw": "1"
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "result"
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "countBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to check objects for own properties. "
        },
        {
          "type": "Block",
          "value": "*\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the number of times the key was returned by `iteratee`. The\n * iteratee is invoked with one argument: (value).\n *\n * @since 0.5.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * const users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'betty', 'active': true },\n *   { 'user': 'fred', 'active': false }\n * ]\n *\n * countBy(users, value => value.active);\n * // => { 'true': 2, 'false': 1 }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/create.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "create"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "prototype"
            },
            {
              "type": "Identifier",
              "name": "properties"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "prototype"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "prototype"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    },
                    "alternate": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "prototype"
                        }
                      ]
                    }
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "create"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "prototype"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "properties"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "result"
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "assign"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "result"
                      },
                      {
                        "type": "Identifier",
                        "name": "properties"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "create"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an object that inherits from the `prototype` object. If a\n * `properties` object is given, its own enumerable string keyed properties\n * are assigned to the created object.\n *\n * @since 2.3.0\n * @category Object\n * @param {Object} prototype The object to inherit from.\n * @param {Object} [properties] The properties to assign to the object.\n * @returns {Object} Returns the new object.\n * @example\n *\n * function Shape() {\n *   this.x = 0\n *   this.y = 0\n * }\n *\n * function Circle() {\n *   Shape.call(this)\n * }\n *\n * Circle.prototype = create(Shape.prototype, {\n *   'constructor': Circle\n * })\n *\n * const circle = new Circle\n * circle instanceof Circle\n * // => true\n *\n * circle instanceof Shape\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/debounce.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObject.js",
            "raw": "'./isObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "root"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/root.js",
            "raw": "'./.internal/root.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "debounce"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "func"
            },
            {
              "type": "Identifier",
              "name": "wait"
            },
            {
              "type": "Identifier",
              "name": "options"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "lastArgs"
                    },
                    "init": null
                  },
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "lastThis"
                    },
                    "init": null
                  },
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "maxWait"
                    },
                    "init": null
                  },
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": null
                  },
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "timerId"
                    },
                    "init": null
                  },
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "lastCallTime"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "lastInvokeTime"
                    },
                    "init": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "leading"
                    },
                    "init": {
                      "type": "Literal",
                      "value": false,
                      "raw": "false"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "maxing"
                    },
                    "init": {
                      "type": "Literal",
                      "value": false,
                      "raw": "false"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "trailing"
                    },
                    "init": {
                      "type": "Literal",
                      "value": true,
                      "raw": "true"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "useRAF"
                    },
                    "init": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "wait"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "!==",
                          "left": {
                            "type": "Identifier",
                            "name": "wait"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "root"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "requestAnimationFrame"
                            }
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Literal",
                          "value": "function",
                          "raw": "'function'"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!==",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "function",
                    "raw": "'function'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ThrowStatement",
                      "argument": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "TypeError"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "Expected a function",
                            "raw": "'Expected a function'"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "wait"
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "Identifier",
                        "name": "wait"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isObject"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "options"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "leading"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "options"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "leading"
                              }
                            },
                            "prefix": true
                          },
                          "prefix": true
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "maxing"
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "in",
                          "left": {
                            "type": "Literal",
                            "value": "maxWait",
                            "raw": "'maxWait'"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "options"
                          }
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "maxWait"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "Identifier",
                            "name": "maxing"
                          },
                          "consequent": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Math"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "max"
                              }
                            },
                            "arguments": [
                              {
                                "type": "LogicalExpression",
                                "operator": "||",
                                "left": {
                                  "type": "UnaryExpression",
                                  "operator": "+",
                                  "argument": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "options"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "maxWait"
                                    }
                                  },
                                  "prefix": true
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                }
                              },
                              {
                                "type": "Identifier",
                                "name": "wait"
                              }
                            ]
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "maxWait"
                          }
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "trailing"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "in",
                            "left": {
                              "type": "Literal",
                              "value": "trailing",
                              "raw": "'trailing'"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "options"
                            }
                          },
                          "consequent": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "options"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "trailing"
                                }
                              },
                              "prefix": true
                            },
                            "prefix": true
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "trailing"
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "invokeFunc"
                },
                "params": [
                  {
                    "type": "Identifier",
                    "name": "time"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "args"
                          },
                          "init": {
                            "type": "Identifier",
                            "name": "lastArgs"
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "thisArg"
                          },
                          "init": {
                            "type": "Identifier",
                            "name": "lastThis"
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "lastArgs"
                        },
                        "right": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "lastThis"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "undefined"
                          }
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "lastInvokeTime"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "time"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "result"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "func"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "apply"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "thisArg"
                            },
                            {
                              "type": "Identifier",
                              "name": "args"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "generator": false,
                "expression": false,
                "async": false
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "startTimer"
                },
                "params": [
                  {
                    "type": "Identifier",
                    "name": "pendingFunc"
                  },
                  {
                    "type": "Identifier",
                    "name": "wait"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "useRAF"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "root"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "cancelAnimationFrame"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "timerId"
                                }
                              ]
                            }
                          },
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "root"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "requestAnimationFrame"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "pendingFunc"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "setTimeout"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "pendingFunc"
                          },
                          {
                            "type": "Identifier",
                            "name": "wait"
                          }
                        ]
                      }
                    }
                  ]
                },
                "generator": false,
                "expression": false,
                "async": false
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "cancelTimer"
                },
                "params": [
                  {
                    "type": "Identifier",
                    "name": "id"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "useRAF"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "root"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "cancelAnimationFrame"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "id"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "clearTimeout"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "id"
                          }
                        ]
                      }
                    }
                  ]
                },
                "generator": false,
                "expression": false,
                "async": false
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "leadingEdge"
                },
                "params": [
                  {
                    "type": "Identifier",
                    "name": "time"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "lastInvokeTime"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "time"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "timerId"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "startTimer"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "timerExpired"
                            },
                            {
                              "type": "Identifier",
                              "name": "wait"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "leading"
                        },
                        "consequent": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "invokeFunc"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "time"
                            }
                          ]
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "result"
                        }
                      }
                    }
                  ]
                },
                "generator": false,
                "expression": false,
                "async": false
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "remainingWait"
                },
                "params": [
                  {
                    "type": "Identifier",
                    "name": "time"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "timeSinceLastCall"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "-",
                            "left": {
                              "type": "Identifier",
                              "name": "time"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "lastCallTime"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "timeSinceLastInvoke"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "-",
                            "left": {
                              "type": "Identifier",
                              "name": "time"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "lastInvokeTime"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "timeWaiting"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "-",
                            "left": {
                              "type": "Identifier",
                              "name": "wait"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "timeSinceLastCall"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "maxing"
                        },
                        "consequent": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Math"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "min"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "timeWaiting"
                            },
                            {
                              "type": "BinaryExpression",
                              "operator": "-",
                              "left": {
                                "type": "Identifier",
                                "name": "maxWait"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "timeSinceLastInvoke"
                              }
                            }
                          ]
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "timeWaiting"
                        }
                      }
                    }
                  ]
                },
                "generator": false,
                "expression": false,
                "async": false
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "shouldInvoke"
                },
                "params": [
                  {
                    "type": "Identifier",
                    "name": "time"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "timeSinceLastCall"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "-",
                            "left": {
                              "type": "Identifier",
                              "name": "time"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "lastCallTime"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "timeSinceLastInvoke"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "-",
                            "left": {
                              "type": "Identifier",
                              "name": "time"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "lastInvokeTime"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "||",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "Identifier",
                                "name": "lastCallTime"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            },
                            "right": {
                              "type": "BinaryExpression",
                              "operator": ">=",
                              "left": {
                                "type": "Identifier",
                                "name": "timeSinceLastCall"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "wait"
                              }
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "<",
                            "left": {
                              "type": "Identifier",
                              "name": "timeSinceLastCall"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          }
                        },
                        "right": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "Identifier",
                            "name": "maxing"
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "timeSinceLastInvoke"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "maxWait"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "generator": false,
                "expression": false,
                "async": false
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "timerExpired"
                },
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "time"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Date"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "now"
                              }
                            },
                            "arguments": []
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "shouldInvoke"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "time"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "trailingEdge"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "time"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "timerId"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "startTimer"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "timerExpired"
                            },
                            {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "remainingWait"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "time"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "generator": false,
                "expression": false,
                "async": false
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "trailingEdge"
                },
                "params": [
                  {
                    "type": "Identifier",
                    "name": "time"
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "timerId"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      }
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "Identifier",
                          "name": "trailing"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "lastArgs"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "invokeFunc"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "time"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "lastArgs"
                        },
                        "right": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "lastThis"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "undefined"
                          }
                        }
                      }
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "generator": false,
                "expression": false,
                "async": false
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "cancel"
                },
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "!==",
                        "left": {
                          "type": "Identifier",
                          "name": "timerId"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "cancelTimer"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "timerId"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "lastInvokeTime"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "lastArgs"
                        },
                        "right": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "lastCallTime"
                          },
                          "right": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "Identifier",
                              "name": "lastThis"
                            },
                            "right": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "timerId"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "generator": false,
                "expression": false,
                "async": false
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "flush"
                },
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Identifier",
                            "name": "timerId"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "undefined"
                          }
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "result"
                        },
                        "alternate": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "trailingEdge"
                          },
                          "arguments": [
                            {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Date"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "now"
                                }
                              },
                              "arguments": []
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "generator": false,
                "expression": false,
                "async": false
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "pending"
                },
                "params": [],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "BinaryExpression",
                        "operator": "!==",
                        "left": {
                          "type": "Identifier",
                          "name": "timerId"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      }
                    }
                  ]
                },
                "generator": false,
                "expression": false,
                "async": false
              },
              {
                "type": "FunctionDeclaration",
                "id": {
                  "type": "Identifier",
                  "name": "debounced"
                },
                "params": [
                  {
                    "type": "RestElement",
                    "argument": {
                      "type": "Identifier",
                      "name": "args"
                    }
                  }
                ],
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "time"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Date"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "now"
                              }
                            },
                            "arguments": []
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "isInvoking"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "shouldInvoke"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "time"
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "lastArgs"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "args"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "lastThis"
                        },
                        "right": {
                          "type": "ThisExpression"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "lastCallTime"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "time"
                        }
                      }
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "isInvoking"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "Identifier",
                                "name": "timerId"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "leadingEdge"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "lastCallTime"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "Identifier",
                              "name": "maxing"
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "timerId"
                                    },
                                    "right": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "startTimer"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "timerExpired"
                                        },
                                        {
                                          "type": "Identifier",
                                          "name": "wait"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "invokeFunc"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "lastCallTime"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "Identifier",
                          "name": "timerId"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "timerId"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "startTimer"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "timerExpired"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "wait"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "generator": false,
                "expression": false,
                "async": false
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "debounced"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "cancel"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "cancel"
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "debounced"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "flush"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "flush"
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "debounced"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "pending"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "pending"
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "debounced"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "debounce"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }))\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * jQuery(source).on('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n "
        },
        {
          "type": "Line",
          "value": " Bypass `requestAnimationFrame` by explicitly setting `wait=0`."
        },
        {
          "type": "Line",
          "value": " Reset any `maxWait` timer."
        },
        {
          "type": "Line",
          "value": " Start the timer for the trailing edge."
        },
        {
          "type": "Line",
          "value": " Invoke the leading edge."
        },
        {
          "type": "Line",
          "value": " Either this is the first call, activity has stopped and we're at the"
        },
        {
          "type": "Line",
          "value": " trailing edge, the system time has gone backwards and we're treating"
        },
        {
          "type": "Line",
          "value": " it as the trailing edge, or we've hit the `maxWait` limit."
        },
        {
          "type": "Line",
          "value": " Restart the timer."
        },
        {
          "type": "Line",
          "value": " Only invoke if we have `lastArgs` which means `func` has been"
        },
        {
          "type": "Line",
          "value": " debounced at least once."
        },
        {
          "type": "Line",
          "value": " Handle invocations in a tight loop."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/deburr.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "deburrLetter"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/deburrLetter.js",
            "raw": "'./.internal/deburrLetter.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reLatin"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g",
                "regex": {
                  "pattern": "[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]",
                  "flags": "g"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u0300-\\u036f",
                "raw": "'\\\\u0300-\\\\u036f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reComboHalfMarksRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\ufe20-\\ufe2f",
                "raw": "'\\\\ufe20-\\\\ufe2f'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboSymbolsRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u20d0-\\u20ff",
                "raw": "'\\\\u20d0-\\\\u20ff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksExtendedRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u1ab0-\\u1aff",
                "raw": "'\\\\u1ab0-\\\\u1aff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboMarksSupplementRange"
              },
              "init": {
                "type": "Literal",
                "value": "\\u1dc0-\\u1dff",
                "raw": "'\\\\u1dc0-\\\\u1dff'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsComboRange"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "Identifier",
                        "name": "rsComboMarksRange"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "reComboHalfMarksRange"
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "rsComboSymbolsRange"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "rsComboMarksExtendedRange"
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "rsComboMarksSupplementRange"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rsCombo"
              },
              "init": {
                "type": "TemplateLiteral",
                "quasis": [
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "[",
                      "cooked": "["
                    },
                    "tail": false
                  },
                  {
                    "type": "TemplateElement",
                    "value": {
                      "raw": "]",
                      "cooked": "]"
                    },
                    "tail": true
                  }
                ],
                "expressions": [
                  {
                    "type": "Identifier",
                    "name": "rsComboRange"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reComboMark"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "RegExp"
                },
                "arguments": [
                  {
                    "type": "Identifier",
                    "name": "rsCombo"
                  },
                  {
                    "type": "Literal",
                    "value": "g",
                    "raw": "'g'"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "deburr"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "string"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "string"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "replace"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "reLatin"
                          },
                          {
                            "type": "Identifier",
                            "name": "deburrLetter"
                          }
                        ]
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "replace"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "reComboMark"
                      },
                      {
                        "type": "Literal",
                        "value": "",
                        "raw": "''"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "deburr"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to match Latin Unicode letters (excluding mathematical operators). "
        },
        {
          "type": "Block",
          "value": "* Used to compose unicode character classes. "
        },
        {
          "type": "Block",
          "value": "* Used to compose unicode capture groups. "
        },
        {
          "type": "Block",
          "value": "*\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n "
        },
        {
          "type": "Block",
          "value": "*\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * deburr('déjà vu')\n * // => 'deja vu'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/defaultTo.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "defaultTo"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "defaultValue"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "defaultValue"
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "value"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "defaultTo"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks `value` to determine whether a default value should be returned in\n * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,\n * or `undefined`.\n *\n * @since 4.14.0\n * @category Util\n * @param {*} value The value to check.\n * @param {*} defaultValue The default value.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * defaultTo(1, 10)\n * // => 1\n *\n * defaultTo(undefined, 10)\n * // => 10\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/defaultToAny.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayReduce"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/arrayReduce.js",
            "raw": "'./.internal/arrayReduce.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "defaultTo"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./defaultTo.js",
            "raw": "'./defaultTo.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "defaultToAny"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "defaultValues"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "arrayReduce"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "defaultValues"
                    },
                    {
                      "type": "Identifier",
                      "name": "defaultTo"
                    },
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "defaultToAny"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `defaultTo` except that it accepts multiple default values and returns the first one that is not\n * `NaN`, `null`, or `undefined`.\n *\n * @since 5.0.0\n * @category Util\n * @param {*} value The value to check.\n * @param {...*} defaultValues The default values.\n * @returns {*} Returns the resolved value.\n * @see _.defaultTo\n * @example\n *\n * defaultToAny(1, 10, 20)\n * // => 1\n *\n * defaultToAny(undefined, 10, 20)\n * // => 10\n *\n * defaultToAny(undefined, null, 20)\n * // => 20\n *\n * defaultToAny(undefined, null, NaN)\n * // => NaN\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/defaults.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "eq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./eq.js",
            "raw": "'./eq.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "objectProto"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "Object"
                },
                "property": {
                  "type": "Identifier",
                  "name": "prototype"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasOwnProperty"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "objectProto"
                },
                "property": {
                  "type": "Identifier",
                  "name": "hasOwnProperty"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "defaults"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "sources"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "sources"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "forEach"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "source"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "!=",
                              "left": {
                                "type": "Identifier",
                                "name": "source"
                              },
                              "right": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "source"
                                    },
                                    "right": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "Object"
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "source"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "ForInStatement",
                                  "left": {
                                    "type": "VariableDeclaration",
                                    "declarations": [
                                      {
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "key"
                                        },
                                        "init": null
                                      }
                                    ],
                                    "kind": "const"
                                  },
                                  "right": {
                                    "type": "Identifier",
                                    "name": "source"
                                  },
                                  "body": {
                                    "type": "BlockStatement",
                                    "body": [
                                      {
                                        "type": "VariableDeclaration",
                                        "declarations": [
                                          {
                                            "type": "VariableDeclarator",
                                            "id": {
                                              "type": "Identifier",
                                              "name": "value"
                                            },
                                            "init": {
                                              "type": "MemberExpression",
                                              "computed": true,
                                              "object": {
                                                "type": "Identifier",
                                                "name": "object"
                                              },
                                              "property": {
                                                "type": "Identifier",
                                                "name": "key"
                                              }
                                            }
                                          }
                                        ],
                                        "kind": "const"
                                      },
                                      {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "LogicalExpression",
                                          "operator": "||",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "operator": "===",
                                            "left": {
                                              "type": "Identifier",
                                              "name": "value"
                                            },
                                            "right": {
                                              "type": "Identifier",
                                              "name": "undefined"
                                            }
                                          },
                                          "right": {
                                            "type": "LogicalExpression",
                                            "operator": "&&",
                                            "left": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "eq"
                                              },
                                              "arguments": [
                                                {
                                                  "type": "Identifier",
                                                  "name": "value"
                                                },
                                                {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "objectProto"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  }
                                                }
                                              ]
                                            },
                                            "right": {
                                              "type": "UnaryExpression",
                                              "operator": "!",
                                              "argument": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "hasOwnProperty"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "call"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "object"
                                                  },
                                                  {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  }
                                                ]
                                              },
                                              "prefix": true
                                            }
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [
                                            {
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "AssignmentExpression",
                                                "operator": "=",
                                                "left": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "object"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  }
                                                },
                                                "right": {
                                                  "type": "MemberExpression",
                                                  "computed": true,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "source"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "alternate": null
                                      }
                                    ]
                                  },
                                  "each": false
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "object"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "defaults"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used for built-in method references. "
        },
        {
          "type": "Block",
          "value": "* Used to check objects for own properties. "
        },
        {
          "type": "Block",
          "value": "*\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @since 0.1.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see defaultsDeep\n * @example\n *\n * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 })\n * // => { 'a': 1, 'b': 2 }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/defaultsDeep.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "customDefaultsMerge"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/customDefaultsMerge.js",
            "raw": "'./.internal/customDefaultsMerge.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "mergeWith"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./mergeWith.js",
            "raw": "'./mergeWith.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "defaultsDeep"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "args"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "args"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "push"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "undefined"
                    },
                    {
                      "type": "Identifier",
                      "name": "customDefaultsMerge"
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "mergeWith"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "apply"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "undefined"
                    },
                    {
                      "type": "Identifier",
                      "name": "args"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "defaultsDeep"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `defaults` except that it recursively assigns\n * default properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @since 3.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see defaults\n * @example\n *\n * defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } })\n * // => { 'a': { 'b': 2, 'c': 3 } }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/defer.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "defer"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "func"
            },
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "args"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!=",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "function",
                    "raw": "'function'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ThrowStatement",
                      "argument": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "TypeError"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "Expected a function",
                            "raw": "'Expected a function'"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "setTimeout"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "func"
                    },
                    {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1"
                    },
                    {
                      "type": "SpreadElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "defer"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Defers invoking the `func` until the current call stack has cleared. Any\n * additional arguments are provided to `func` when it's invoked.\n *\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to defer.\n * @param {...*} [args] The arguments to invoke `func` with.\n * @returns {number} Returns the timer id.\n * @example\n *\n * defer(text => console.log(text), 'deferred')\n * // => Logs 'deferred' after one millisecond.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/delay.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "delay"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "func"
            },
            {
              "type": "Identifier",
              "name": "wait"
            },
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "args"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!=",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "function",
                    "raw": "'function'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ThrowStatement",
                      "argument": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "TypeError"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "Expected a function",
                            "raw": "'Expected a function'"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "setTimeout"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "func"
                    },
                    {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "+",
                        "argument": {
                          "type": "Identifier",
                          "name": "wait"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    },
                    {
                      "type": "SpreadElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "delay"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Invokes `func` after `wait` milliseconds. Any additional arguments are\n * provided to `func` when it's invoked.\n *\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to delay.\n * @param {number} wait The number of milliseconds to delay invocation.\n * @param {...*} [args] The arguments to invoke `func` with.\n * @returns {number} Returns the timer id.\n * @example\n *\n * delay(text => console.log(text), 1000, 'later')\n * // => Logs 'later' after one second.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/difference.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseDifference"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseDifference.js",
            "raw": "'./.internal/baseDifference.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLikeObject.js",
            "raw": "'./isArrayLikeObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "difference"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "values"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isArrayLikeObject"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseDifference"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "baseFlatten"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "values"
                          },
                          {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          },
                          {
                            "type": "Identifier",
                            "name": "isArrayLikeObject"
                          },
                          {
                            "type": "Literal",
                            "value": true,
                            "raw": "true"
                          }
                        ]
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "difference"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `pullAll`, this method returns a new array.\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see union, unionBy, unionWith, without, xor, xorBy, xorWith,\n * @example\n *\n * difference([2, 1], [2, 3])\n * // => [1]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/differenceBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseDifference"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseDifference.js",
            "raw": "'./.internal/baseDifference.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLikeObject.js",
            "raw": "'./isArrayLikeObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "last"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./last.js",
            "raw": "'./last.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "differenceBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "values"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "iteratee"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "last"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "values"
                        }
                      ]
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isArrayLikeObject"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "iteratee"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isArrayLikeObject"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseDifference"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "baseFlatten"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "values"
                          },
                          {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          },
                          {
                            "type": "Identifier",
                            "name": "isArrayLikeObject"
                          },
                          {
                            "type": "Literal",
                            "value": true,
                            "raw": "true"
                          }
                        ]
                      },
                      {
                        "type": "Identifier",
                        "name": "iteratee"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "differenceBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `difference` except that it accepts `iteratee` which\n * is invoked for each element of `array` and `values` to generate the criterion\n * by which they're compared. The order and references of result values are\n * determined by the first array. The iteratee is invoked with one argument:\n * (value).\n *\n * **Note:** Unlike `pullAllBy`, this method returns a new array.\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor)\n * // => [1.2]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/differenceWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseDifference"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseDifference.js",
            "raw": "'./.internal/baseDifference.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLikeObject.js",
            "raw": "'./isArrayLikeObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "last"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./last.js",
            "raw": "'./last.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "differenceWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "values"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "comparator"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "last"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "values"
                        }
                      ]
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isArrayLikeObject"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "comparator"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "comparator"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isArrayLikeObject"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseDifference"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "baseFlatten"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "values"
                          },
                          {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          },
                          {
                            "type": "Identifier",
                            "name": "isArrayLikeObject"
                          },
                          {
                            "type": "Literal",
                            "value": true,
                            "raw": "true"
                          }
                        ]
                      },
                      {
                        "type": "Identifier",
                        "name": "undefined"
                      },
                      {
                        "type": "Identifier",
                        "name": "comparator"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "differenceWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `difference` except that it accepts `comparator`\n * which is invoked to compare elements of `array` to `values`. The order and\n * references of result values are determined by the first array. The comparator\n * is invoked with two arguments: (arrVal, othVal).\n *\n * **Note:** Unlike `pullAllWith`, this method returns a new array.\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * const objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n *\n * differenceWith(objects, [{ 'x': 1, 'y': 2 }], isEqual)\n * // => [{ 'x': 2, 'y': 1 }]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/divide.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createMathOperation"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createMathOperation.js",
            "raw": "'./.internal/createMathOperation.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "divide"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createMathOperation"
                },
                "arguments": [
                  {
                    "type": "ArrowFunctionExpression",
                    "id": null,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "dividend"
                      },
                      {
                        "type": "Identifier",
                        "name": "divisor"
                      }
                    ],
                    "body": {
                      "type": "BinaryExpression",
                      "operator": "/",
                      "left": {
                        "type": "Identifier",
                        "name": "dividend"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "divisor"
                      }
                    },
                    "generator": false,
                    "expression": true,
                    "async": false
                  },
                  {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "divide"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Divide two numbers.\n *\n * @since 4.7.0\n * @category Math\n * @param {number} dividend The first number in a division.\n * @param {number} divisor The second number in a division.\n * @returns {number} Returns the quotient.\n * @example\n *\n * divide(6, 4)\n * // => 1.5\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/drop.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "slice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./slice.js",
            "raw": "'./slice.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toInteger"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toInteger.js",
            "raw": "'./toInteger.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "drop"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "AssignmentPattern",
              "left": {
                "type": "Identifier",
                "name": "n"
              },
              "right": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "slice"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "Identifier",
                            "name": "n"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        },
                        "alternate": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "toInteger"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "n"
                            }
                          ]
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "length"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "drop"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * drop([1, 2, 3])\n * // => [2, 3]\n *\n * drop([1, 2, 3], 2)\n * // => [3]\n *\n * drop([1, 2, 3], 5)\n * // => []\n *\n * drop([1, 2, 3], 0)\n * // => [1, 2, 3]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/dropRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "slice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./slice.js",
            "raw": "'./slice.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toInteger"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toInteger.js",
            "raw": "'./toInteger.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "dropRight"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "AssignmentPattern",
              "left": {
                "type": "Identifier",
                "name": "n"
              },
              "right": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "n"
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "-",
                    "left": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "toInteger"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "n"
                        }
                      ]
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "slice"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "Identifier",
                            "name": "n"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "n"
                        }
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "dropRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * dropRight([1, 2, 3])\n * // => [1, 2]\n *\n * dropRight([1, 2, 3], 2)\n * // => [1]\n *\n * dropRight([1, 2, 3], 5)\n * // => []\n *\n * dropRight([1, 2, 3], 0)\n * // => [1, 2, 3]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/dropRightWhile.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseWhile"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseWhile.js",
            "raw": "'./.internal/baseWhile.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "dropRightWhile"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseWhile"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "predicate"
                      },
                      {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                      },
                      {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "dropRightWhile"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a slice of `array` excluding elements dropped from the end.\n * Elements are dropped until `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index, array).\n *\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * const users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': true },\n *   { 'user': 'pebbles', 'active': true }\n * ]\n *\n * dropRightWhile(users, ({ active }) => active)\n * // => objects for ['barney']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/dropWhile.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseWhile"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseWhile.js",
            "raw": "'./.internal/baseWhile.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "dropWhile"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseWhile"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "predicate"
                      },
                      {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "dropWhile"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a slice of `array` excluding elements dropped from the beginning.\n * Elements are dropped until `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index, array).\n *\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * const users = [\n *   { 'user': 'barney',  'active': true },\n *   { 'user': 'fred',    'active': true },\n *   { 'user': 'pebbles', 'active': false }\n * ]\n *\n * dropWhile(users, ({ active }) => active)\n * // => objects for ['pebbles']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/each.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ExportNamedDeclaration",
          "declaration": null,
          "specifiers": [
            {
              "type": "ExportSpecifier",
              "exported": {
                "type": "Identifier",
                "name": "default"
              },
              "local": {
                "type": "Identifier",
                "name": "default"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./forEach.js",
            "raw": "'./forEach.js'"
          }
        }
      ],
      "sourceType": "module",
      "comments": []
    }
  },
  {
    "filePath": "./projects/lodash/eachRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ExportNamedDeclaration",
          "declaration": null,
          "specifiers": [
            {
              "type": "ExportSpecifier",
              "exported": {
                "type": "Identifier",
                "name": "default"
              },
              "local": {
                "type": "Identifier",
                "name": "default"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./forEachRight.js",
            "raw": "'./forEachRight.js'"
          }
        }
      ],
      "sourceType": "module",
      "comments": []
    }
  },
  {
    "filePath": "./projects/lodash/endsWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "endsWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "target"
            },
            {
              "type": "Identifier",
              "name": "position"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "string"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "position"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "position"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "alternate": {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "Identifier",
                        "name": "position"
                      },
                      "prefix": true
                    }
                  }
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "Identifier",
                      "name": "position"
                    },
                    "right": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "Identifier",
                      "name": "position"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "position"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "position"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    }
                  ]
                },
                "alternate": {
                  "type": "IfStatement",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": ">",
                    "left": {
                      "type": "Identifier",
                      "name": "position"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  },
                  "consequent": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "position"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        }
                      }
                    ]
                  },
                  "alternate": null
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "end"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "position"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "-=",
                  "left": {
                    "type": "Identifier",
                    "name": "position"
                  },
                  "right": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "target"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": ">=",
                    "left": {
                      "type": "Identifier",
                      "name": "position"
                    },
                    "right": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "string"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "slice"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "position"
                        },
                        {
                          "type": "Identifier",
                          "name": "end"
                        }
                      ]
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "target"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "endsWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `string` ends with the given target string.\n *\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {string} [target] The string to search for.\n * @param {number} [position=string.length] The position to search up to.\n * @returns {boolean} Returns `true` if `string` ends with `target`,\n *  else `false`.\n * @see includes, startsWith\n * @example\n *\n * endsWith('abc', 'c')\n * // => true\n *\n * endsWith('abc', 'b')\n * // => false\n *\n * endsWith('abc', 'b', 2)\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/eq.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "eq"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "other"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "other"
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "other"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "other"
                      }
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "eq"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * const object = { 'a': 1 }\n * const other = { 'a': 1 }\n *\n * eq(object, object)\n * // => true\n *\n * eq(object, other)\n * // => false\n *\n * eq('a', 'a')\n * // => true\n *\n * eq('a', Object('a'))\n * // => false\n *\n * eq(NaN, NaN)\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/eqDeep.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIsEqual"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseIsEqual.js",
            "raw": "'./.internal/baseIsEqual.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isEqual"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "other"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseIsEqual"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "Identifier",
                      "name": "other"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isEqual"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * const object = { 'a': 1 }\n * const other = { 'a': 1 }\n *\n * isEqual(object, other)\n * // => true\n *\n * object === other\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/escape.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "htmlEscapes"
              },
              "init": {
                "type": "ObjectExpression",
                "properties": [
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "&",
                      "raw": "'&'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "&amp;",
                      "raw": "'&amp;'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "<",
                      "raw": "'<'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "&lt;",
                      "raw": "'&lt;'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": ">",
                      "raw": "'>'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "&gt;",
                      "raw": "'&gt;'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "\"",
                      "raw": "'\"'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "&quot;",
                      "raw": "'&quot;'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "'",
                      "raw": "\"'\""
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "&#39;",
                      "raw": "'&#39;'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reUnescapedHtml"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/[&<>\"']/g",
                "regex": {
                  "pattern": "[&<>\"']",
                  "flags": "g"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reHasUnescapedHtml"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "RegExp"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "reUnescapedHtml"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "source"
                    }
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "escape"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "reHasUnescapedHtml"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "test"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "string"
                        }
                      ]
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "string"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "replace"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "reUnescapedHtml"
                      },
                      {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [
                          {
                            "type": "Identifier",
                            "name": "chr"
                          }
                        ],
                        "body": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "htmlEscapes"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "chr"
                          }
                        },
                        "generator": false,
                        "expression": true,
                        "async": false
                      }
                    ]
                  },
                  "alternate": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "right": {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "escape"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to map characters to HTML entities. "
        },
        {
          "type": "Block",
          "value": "* Used to match HTML entities and HTML characters. "
        },
        {
          "type": "Block",
          "value": "*\n * Converts the characters \"&\", \"<\", \">\", '\"', and \"'\" in `string` to their\n * corresponding HTML entities.\n *\n * **Note:** No other characters are escaped. To escape additional\n * characters use a third-party library like [_he_](https://mths.be/he).\n *\n * Though the \">\" character is escaped for symmetry, characters like\n * \">\" and \"/\" don't need escaping in HTML and have no special meaning\n * unless they're part of a tag or unquoted attribute value. See\n * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)\n * (under \"semi-related fun fact\") for more details.\n *\n * When working with HTML you should always\n * [quote attribute values](http://wonko.com/post/html-escaping) to reduce\n * XSS vectors.\n *\n * @since 0.1.0\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @see escapeRegExp, unescape\n * @example\n *\n * escape('fred, barney, & pebbles')\n * // => 'fred, barney, &amp; pebbles'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/escapeRegExp.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reRegExpChar"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/[\\\\^$.*+?()[\\]{}|]/g",
                "regex": {
                  "pattern": "[\\\\^$.*+?()[\\]{}|]",
                  "flags": "g"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reHasRegExpChar"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "RegExp"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "reRegExpChar"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "source"
                    }
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "escapeRegExp"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "reHasRegExpChar"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "test"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "string"
                        }
                      ]
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "string"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "replace"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "reRegExpChar"
                      },
                      {
                        "type": "Literal",
                        "value": "\\$&",
                        "raw": "'\\\\$&'"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "right": {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "escapeRegExp"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n "
        },
        {
          "type": "Block",
          "value": "*\n * Escapes the `RegExp` special characters \"^\", \"$\", \"\\\", \".\", \"*\", \"+\",\n * \"?\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", and \"|\" in `string`.\n *\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to escape.\n * @returns {string} Returns the escaped string.\n * @see escape, escapeRegExp, unescape\n * @example\n *\n * escapeRegExp('[lodash](https://lodash.com/)')\n * // => '\\[lodash\\]\\(https://lodash\\.com/\\)'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/every.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "every"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "predicate"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "index"
                            },
                            {
                              "type": "Identifier",
                              "name": "array"
                            }
                          ]
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": false,
                              "raw": "false"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Literal",
                  "value": true,
                  "raw": "true"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "every"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `predicate` returns truthy for **all** elements of `array`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index, array).\n *\n * **Note:** This method returns `true` for\n * [empty arrays](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty arrays.\n *\n * @since 5.0.0\n * @category Array\n * @param {Array} array The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * every([true, 1, null, 'yes'], Boolean)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/everyValue.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "everyValue"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "props"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ForOfStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "key"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "props"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "predicate"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "key"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "key"
                            },
                            {
                              "type": "Identifier",
                              "name": "object"
                            }
                          ]
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": false,
                              "raw": "false"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Literal",
                  "value": true,
                  "raw": "true"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "everyValue"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `predicate` returns truthy for **all** properties of `object`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, key, object).\n *\n * **Note:** This method returns `true` for\n * [empty objects](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty objects.\n *\n * @since 5.0.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all properties pass the predicate check,\n *  else `false`.\n * @example\n *\n * everyValue({ 'a': 0, 'b': 'yes', 'c': false }, Boolean)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/filter.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "filter"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "resIndex"
                    },
                    "init": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "array"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "predicate"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          },
                          {
                            "type": "Identifier",
                            "name": "index"
                          },
                          {
                            "type": "Identifier",
                            "name": "array"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "resIndex"
                                  },
                                  "prefix": false
                                }
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "value"
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "filter"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Iterates over elements of `array`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index, array).\n *\n * **Note:** Unlike `remove`, this method returns a new array.\n *\n * @since 5.0.0\n * @category Array\n * @param {Array} array The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see pull, pullAll, pullAllBy, pullAllWith, pullAt, remove, reject\n * @example\n *\n * const users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ]\n *\n * filter(users, ({ active }) => active)\n * // => objects for ['barney']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/filterObject.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "filterObject"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "forEach"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "key"
                                  }
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "predicate"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "result"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "push"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "value"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "filterObject"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Iterates over properties of `object`, returning an array of all elements\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, key, object).\n *\n * If you want an object in return, consider `pickBy`.\n *\n * @since 5.0.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see pickBy, pull, pullAll, pullAllBy, pullAllWith, pullAt, remove, reject\n * @example\n *\n * const object = { 'a': 5, 'b': 8, 'c': 10 }\n *\n * filterObject(object, (n) => !(n % 5))\n * // => [5, 10]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/findKey.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "findKey"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "some"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "key"
                                  }
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "predicate"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "key"
                                    }
                                  }
                                },
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Literal",
                                    "value": true,
                                    "raw": "true"
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "findKey"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `find` except that it returns the key of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @since 1.1.0\n * @category Object\n * @param {Object} object The object to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {string|undefined} Returns the key of the matched element,\n *  else `undefined`.\n * @see find, findIndex, findLast, findLastIndex, findLastKey\n * @example\n *\n * const users = {\n *   'barney':  { 'age': 36, 'active': true },\n *   'fred':    { 'age': 40, 'active': false },\n *   'pebbles': { 'age': 1,  'active': true }\n * }\n *\n * findKey(users, ({ age }) => age < 40)\n * // => 'barney' (iteration order is not guaranteed)\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/findLast.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "findLastIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./findLastIndex.js",
            "raw": "'./findLastIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLike.js",
            "raw": "'./isArrayLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "findLast"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            },
            {
              "type": "Identifier",
              "name": "fromIndex"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "iteratee"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "iterable"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "collection"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isArrayLike"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "collection"
                      }
                    ]
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "collection"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "keys"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "collection"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "iteratee"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "predicate"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "predicate"
                        },
                        "right": {
                          "type": "ArrowFunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "key"
                            }
                          ],
                          "body": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "iteratee"
                            },
                            "arguments": [
                              {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "iterable"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              },
                              {
                                "type": "Identifier",
                                "name": "key"
                              },
                              {
                                "type": "Identifier",
                                "name": "iterable"
                              }
                            ]
                          },
                          "generator": false,
                          "expression": true,
                          "async": false
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "findLastIndex"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "collection"
                        },
                        {
                          "type": "Identifier",
                          "name": "predicate"
                        },
                        {
                          "type": "Identifier",
                          "name": "fromIndex"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": ">",
                    "left": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  },
                  "consequent": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "iterable"
                    },
                    "property": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "iteratee"
                      },
                      "consequent": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "collection"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "index"
                        }
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "index"
                      }
                    }
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "findLast"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `find` except that it iterates over elements of\n * `collection` from right to left.\n *\n * @since 2.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} [fromIndex=collection.length-1] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @see find, findIndex, findKey, findLastIndex, findLastKey\n * @example\n *\n * findLast([1, 2, 3, 4], n => n % 2 == 1)\n * // => 3\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/findLastIndex.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFindIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFindIndex.js",
            "raw": "'./.internal/baseFindIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toInteger"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toInteger.js",
            "raw": "'./toInteger.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "findLastIndex"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            },
            {
              "type": "Identifier",
              "name": "fromIndex"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        "prefix": true
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!==",
                  "left": {
                    "type": "Identifier",
                    "name": "fromIndex"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "index"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "toInteger"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "fromIndex"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "index"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "<",
                            "left": {
                              "type": "Identifier",
                              "name": "fromIndex"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          },
                          "consequent": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Math"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "max"
                              }
                            },
                            "arguments": [
                              {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                  "type": "Identifier",
                                  "name": "length"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "index"
                                }
                              },
                              {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              }
                            ]
                          },
                          "alternate": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Math"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "min"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "index"
                              },
                              {
                                "type": "BinaryExpression",
                                "operator": "-",
                                "left": {
                                  "type": "Identifier",
                                  "name": "length"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 1,
                                  "raw": "1"
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseFindIndex"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "Identifier",
                      "name": "predicate"
                    },
                    {
                      "type": "Identifier",
                      "name": "index"
                    },
                    {
                      "type": "Literal",
                      "value": true,
                      "raw": "true"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "findLastIndex"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `findIndex` except that it iterates over elements\n * of `collection` from right to left.\n *\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} [fromIndex=array.length-1] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @see find, findIndex, findKey, findLast, findLastKey\n * @example\n *\n * const users = [\n *   { 'user': 'barney',  'active': true },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': false }\n * ]\n *\n * findLastIndex(users, ({ user }) => user == 'pebbles')\n * // => 2\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/findLastKey.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFindKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFindKey.js",
            "raw": "'./.internal/baseFindKey.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseForOwnRight"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseForOwnRight.js",
            "raw": "'./.internal/baseForOwnRight.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "findLastKey"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseFindKey"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    },
                    {
                      "type": "Identifier",
                      "name": "predicate"
                    },
                    {
                      "type": "Identifier",
                      "name": "baseForOwnRight"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "findLastKey"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `findKey` except that it iterates over elements of\n * a collection in the opposite order.\n *\n * @since 2.0.0\n * @category Object\n * @param {Object} object The object to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {string|undefined} Returns the key of the matched element,\n *  else `undefined`.\n * @see find, findIndex, findKey, findLast, findLastIndex\n * @example\n *\n * const users = {\n *   'barney':  { 'age': 36, 'active': true },\n *   'fred':    { 'age': 40, 'active': false },\n *   'pebbles': { 'age': 1,  'active': true }\n * }\n *\n * findLastKey(users, ({ age }) => age < 40)\n * // => returns 'pebbles' assuming `findKey` returns 'barney'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/first.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ExportNamedDeclaration",
          "declaration": null,
          "specifiers": [
            {
              "type": "ExportSpecifier",
              "exported": {
                "type": "Identifier",
                "name": "default"
              },
              "local": {
                "type": "Identifier",
                "name": "default"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./head.js",
            "raw": "'./head.js'"
          }
        }
      ],
      "sourceType": "module",
      "comments": []
    }
  },
  {
    "filePath": "./projects/lodash/flatMap.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "flatMap"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseFlatten"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "map"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "collection"
                        },
                        {
                          "type": "Identifier",
                          "name": "iteratee"
                        }
                      ]
                    },
                    {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "flatMap"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @see flatMapDeep, flatMapDepth, flatten, flattenDeep, flattenDepth, map, mapKeys, mapValues\n * @example\n *\n * function duplicate(n) {\n *   return [n, n]\n * }\n *\n * flatMap([1, 2], duplicate)\n * // => [1, 1, 2, 2]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/flatMapDeep.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "INFINITY"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "/",
                "left": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1"
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "flatMapDeep"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseFlatten"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "map"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "collection"
                        },
                        {
                          "type": "Identifier",
                          "name": "iteratee"
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "name": "INFINITY"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "flatMapDeep"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "*\n * This method is like `flatMap` except that it recursively flattens the\n * mapped results.\n *\n * @since 4.7.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @see flatMap, flatMapDepth, flatten, flattenDeep, flattenDepth, map, mapKeys, mapValues\n * @example\n *\n * function duplicate(n) {\n *   return [[[n, n]]]\n * }\n *\n * flatMapDeep([1, 2], duplicate)\n * // => [1, 1, 2, 2]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/flatMapDepth.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "flatMapDepth"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "depth"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "depth"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "depth"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1"
                    },
                    "alternate": {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "Identifier",
                        "name": "depth"
                      },
                      "prefix": true
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseFlatten"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "map"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "collection"
                        },
                        {
                          "type": "Identifier",
                          "name": "iteratee"
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "name": "depth"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "flatMapDepth"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `flatMap` except that it recursively flattens the\n * mapped results up to `depth` times.\n *\n * @since 4.7.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {number} [depth=1] The maximum recursion depth.\n * @returns {Array} Returns the new flattened array.\n * @see flatMap, flatMapDeep, flatten, flattenDeep, flattenDepth, map, mapKeys, mapValues\n * @example\n *\n * function duplicate(n) {\n *   return [[[n, n]]]\n * }\n *\n * flatMapDepth([1, 2], duplicate, 2)\n * // => [[1, 1], [2, 2]]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/flatten.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "flatten"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseFlatten"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "flatten"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Flattens `array` a single level deep.\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @see flatMap, flatMapDeep, flatMapDepth, flattenDeep, flattenDepth\n * @example\n *\n * flatten([1, [2, [3, [4]], 5]])\n * // => [1, 2, [3, [4]], 5]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/flattenDeep.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "INFINITY"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "/",
                "left": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1"
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "flattenDeep"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseFlatten"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "INFINITY"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "flattenDeep"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "*\n * Recursively flattens `array`.\n *\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @see flatMap, flatMapDeep, flatMapDepth, flatten, flattenDepth\n * @example\n *\n * flattenDeep([1, [2, [3, [4]], 5]])\n * // => [1, 2, 3, 4, 5]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/flattenDepth.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "flattenDepth"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "depth"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "depth"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "depth"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1"
                    },
                    "alternate": {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "Identifier",
                        "name": "depth"
                      },
                      "prefix": true
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseFlatten"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "Identifier",
                      "name": "depth"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "flattenDepth"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Recursively flatten `array` up to `depth` times.\n *\n * @since 4.4.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @param {number} [depth=1] The maximum recursion depth.\n * @returns {Array} Returns the new flattened array.\n * @see flatMap, flatMapDeep, flatMapDepth, flattenDeep\n * @example\n *\n * const array = [1, [2, [3, [4]], 5]]\n *\n * flattenDepth(array, 1)\n * // => [1, 2, [3, [4]], 5]\n *\n * flattenDepth(array, 2)\n * // => [1, 2, 3, [4], 5]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/flip.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "flip"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "func"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!=",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "function",
                    "raw": "'function'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ThrowStatement",
                      "argument": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "TypeError"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "Expected a function",
                            "raw": "'Expected a function'"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "RestElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "func"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "apply"
                            }
                          },
                          "arguments": [
                            {
                              "type": "ThisExpression"
                            },
                            {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "args"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "reverse"
                                }
                              },
                              "arguments": []
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "flip"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that invokes `func` with arguments reversed.\n *\n * @since 4.0.0\n * @category Function\n * @param {Function} func The function to flip arguments for.\n * @returns {Function} Returns the new flipped function.\n * @see reverse\n * @example\n *\n * const flipped = flip((...args) => args)\n *\n * flipped('a', 'b', 'c', 'd')\n * // => ['d', 'c', 'b', 'a']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/floor.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createRound"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createRound.js",
            "raw": "'./.internal/createRound.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "floor"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createRound"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "value": "floor",
                    "raw": "'floor'"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "floor"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Computes `number` rounded down to `precision`.\n *\n * @since 3.10.0\n * @category Math\n * @param {number} number The number to round down.\n * @param {number} [precision=0] The precision to round down to.\n * @returns {number} Returns the rounded down number.\n * @example\n *\n * floor(4.006)\n * // => 4\n *\n * floor(0.046, 2)\n * // => 0.04\n *\n * floor(4060, -2)\n * // => 4000\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/flow.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "flow"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "funcs"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "funcs"
                      },
                      "consequent": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "funcs"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      },
                      "alternate": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "index"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "!=",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "funcs"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Literal",
                          "value": "function",
                          "raw": "'function'"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ThrowStatement",
                            "argument": {
                              "type": "NewExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "TypeError"
                              },
                              "arguments": [
                                {
                                  "type": "Literal",
                                  "value": "Expected a function",
                                  "raw": "'Expected a function'"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "RestElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "init": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "init": {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "Identifier",
                                "name": "length"
                              },
                              "consequent": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "funcs"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "index"
                                    }
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "apply"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "ThisExpression"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "args"
                                  }
                                ]
                              },
                              "alternate": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "args"
                                },
                                "property": {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                }
                              }
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "WhileStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        },
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "funcs"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "index"
                                      }
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "call"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "ThisExpression"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "result"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Identifier",
                          "name": "result"
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "flow"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Composes a function that returns the result of invoking the given functions\n * with the `this` binding of the created function, where each successive\n * invocation is supplied the return value of the previous.\n *\n * @since 3.0.0\n * @category Util\n * @param {Function[]} [funcs] The functions to invoke.\n * @returns {Function} Returns the new composite function.\n * @see flowRight\n * @example\n *\n * import add from 'lodash/add'\n * \n * function square(n) {\n *   return n * n\n * }\n *\n * const addSquare = flow(add, square)\n * addSquare(1, 2)\n * // => 9\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/flowRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "flow"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./flow.js",
            "raw": "'./flow.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "flowRight"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "funcs"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "flow"
                  },
                  "arguments": [
                    {
                      "type": "SpreadElement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "funcs"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "reverse"
                          }
                        },
                        "arguments": []
                      }
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "flowRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `flow` except that it composes a function that\n * invokes the given functions from right to left.\n *\n * @since 3.0.0\n * @category Util\n * @param {Function[]} [funcs] The functions to invoke.\n * @returns {Function} Returns the new composite function.\n * @see flow\n * @example\n *\n * import add from 'lodash/add'\n * \n * function square(n) {\n *   return n * n\n * }\n *\n * const addSquare = flowRight(square, add)\n * addSquare(1, 2)\n * // => 9\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/forEach.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayEach"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/arrayEach.js",
            "raw": "'./.internal/arrayEach.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseEach"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseEach.js",
            "raw": "'./.internal/baseEach.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "forEach"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "isArray"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "collection"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "arrayEach"
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "baseEach"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "func"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "forEach"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Iterates over elements of `collection` and invokes `iteratee` for each element.\n * The iteratee is invoked with three arguments: (value, index|key, collection).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n * property are iterated like arrays. To avoid this behavior use `forIn`\n * or `forOwn` for object iteration.\n *\n * @since 0.1.0\n * @alias each\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n * @see forEachRight, forIn, forInRight, forOwn, forOwnRight\n * @example\n *\n * forEach([1, 2], value => console.log(value))\n * // => Logs `1` then `2`.\n *\n * forEach({ 'a': 1, 'b': 2 }, (value, key) => console.log(key))\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/forEachRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayEachRight"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/arrayEachRight.js",
            "raw": "'./.internal/arrayEachRight.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseEachRight"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseEachRight.js",
            "raw": "'./.internal/baseEachRight.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "forEachRight"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "isArray"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "collection"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "arrayEachRight"
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "baseEachRight"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "func"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "forEachRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `forEach` except that it iterates over elements of\n * `collection` from right to left.\n *\n * @since 2.0.0\n * @alias eachRight\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n * @see forEach, forIn, forInRight, forOwn, forOwnRight\n * @example\n *\n * forEachRight([1, 2], value => console.log(value))\n * // => Logs `2` then `1`.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/forOwn.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "forOwn"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "forEach"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "iteratee"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key"
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "key"
                          },
                          {
                            "type": "Identifier",
                            "name": "object"
                          }
                        ]
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "forOwn"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Iterates over own enumerable string keyed properties of an object and\n * invokes `iteratee` for each property. The iteratee is invoked with three\n * arguments: (value, key, object). Iteratee functions may exit iteration\n * early by explicitly returning `false`.\n *\n * @since 0.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @see forEach, forEachRight, forIn, forInRight, forOwnRight\n * @example\n *\n * function Foo() {\n *   this.a = 1\n *   this.b = 2\n * }\n *\n * Foo.prototype.c = 3\n *\n * forOwn(new Foo, function(value, key) {\n *   console.log(key)\n * })\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/forOwnRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "forOwnRight"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": null
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "props"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "props"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "UpdateExpression",
                  "operator": "--",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": false
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "iteratee"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "props"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "length"
                              }
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "iteratee"
                          },
                          {
                            "type": "Identifier",
                            "name": "object"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "forOwnRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `forOwn` except that it iterates over properties of\n * `object` in the opposite order.\n *\n * @since 2.0.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n * @see forEach, forEachRight, forIn, forInRight, forOwn\n * @example\n *\n * function Foo() {\n *   this.a = 1\n *   this.b = 2\n * }\n *\n * Foo.prototype.c = 3\n *\n * forOwnRight(new Foo, function(value, key) {\n *   console.log(key)\n * })\n * // => Logs 'b' then 'a' assuming `forOwn` logs 'a' then 'b'.\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/fromEntries.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "fromEntries"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "pairs"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "pairs"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ForOfStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "pair"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "pairs"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "pair"
                            },
                            "property": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "pair"
                          },
                          "property": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "fromEntries"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The inverse of `entries`is method returns an object composed\n * from key-value `pairs`.\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} pairs The key-value pairs.\n * @returns {Object} Returns the new object.\n * @example\n *\n * fromEntries([['a', 1], ['b', 2]])\n * // => { 'a': 1, 'b': 2 }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/functions.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "functions"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "filter"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key"
                            }
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Literal",
                          "value": "function",
                          "raw": "'function'"
                        }
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "functions"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of function property names from own enumerable properties\n * of `object`.\n *\n * @since 0.1.0\n * @category Object\n * @param {Object} object The object to inspect.\n * @returns {Array} Returns the function names.\n * @see functionsIn\n * @example\n *\n * function Foo() {\n *   this.a = () => 'a'\n *   this.b = () => 'b'\n * }\n *\n * Foo.prototype.c = () => 'c'\n *\n * functions(new Foo)\n * // => ['a', 'b']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/get.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseGet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseGet.js",
            "raw": "'./.internal/baseGet.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "get"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "defaultValue"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "object"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "undefined"
                      },
                      "alternate": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "baseGet"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          },
                          {
                            "type": "Identifier",
                            "name": "path"
                          }
                        ]
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "defaultValue"
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "result"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "get"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @see has, hasIn, set, unset\n * @example\n *\n * const object = { 'a': [{ 'b': { 'c': 3 } }] }\n *\n * get(object, 'a[0].b.c')\n * // => 3\n *\n * get(object, ['a', '0', 'b', 'c'])\n * // => 3\n *\n * get(object, 'a.b.c', 'default')\n * // => 'default'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/groupBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseAssignValue"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseAssignValue.js",
            "raw": "'./.internal/baseAssignValue.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "reduce"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./reduce.js",
            "raw": "'./reduce.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasOwnProperty"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "hasOwnProperty"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "groupBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "reduce"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "result"
                        },
                        {
                          "type": "Identifier",
                          "name": "value"
                        },
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "key"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "hasOwnProperty"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "call"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "result"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "key"
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "push"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "value"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "baseAssignValue"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "result"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "key"
                                      },
                                      {
                                        "type": "ArrayExpression",
                                        "elements": [
                                          {
                                            "type": "Identifier",
                                            "name": "value"
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "result"
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "groupBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to check objects for own properties. "
        },
        {
          "type": "Block",
          "value": "*\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * groupBy([6.1, 4.2, 6.3], Math.floor)\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/gt.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "gt"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "other"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "string",
                        "raw": "'string'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "other"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "string",
                        "raw": "'string'"
                      }
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "+",
                          "argument": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "prefix": true
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "other"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "+",
                          "argument": {
                            "type": "Identifier",
                            "name": "other"
                          },
                          "prefix": true
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": ">",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "other"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "gt"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is greater than `other`.\n *\n * @since 3.9.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than `other`,\n *  else `false`.\n * @see gte, lt, lte\n * @example\n *\n * gt(3, 1)\n * // => true\n *\n * gt(3, 3)\n * // => false\n *\n * gt(1, 3)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/gte.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "gte"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "other"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "string",
                        "raw": "'string'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "other"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "string",
                        "raw": "'string'"
                      }
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "+",
                          "argument": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "prefix": true
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "other"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "+",
                          "argument": {
                            "type": "Identifier",
                            "name": "other"
                          },
                          "prefix": true
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": ">=",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "other"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "gte"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is greater than or equal to `other`.\n *\n * @since 3.9.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is greater than or equal to\n *  `other`, else `false`.\n * @see gt, lt, lte\n * @example\n *\n * gte(3, 1)\n * // => true\n *\n * gte(3, 3)\n * // => true\n *\n * gte(1, 3)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/has.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasOwnProperty"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "hasOwnProperty"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "has"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "key"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "hasOwnProperty"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "call"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "key"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "has"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to check objects for own properties. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `key` is a direct property of `object`.\n *\n * @since 0.1.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n * @see hasIn, hasPath, hasPathIn\n * @example\n *\n * const object = { 'a': { 'b': 2 } }\n * const other = create({ 'a': create({ 'b': 2 }) })\n *\n * has(object, 'a')\n * // => true\n *\n * has(other, 'a')\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/hasIn.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "hasIn"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "key"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "in",
                    "left": {
                      "type": "Identifier",
                      "name": "key"
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "hasIn"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n * @see has, hasPath, hasPathIn\n * @example\n *\n * const object = create({ 'a': create({ 'b': 2 }) })\n *\n * hasIn(object, 'a')\n * // => true\n *\n * hasIn(object, 'b')\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/hasPath.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castPath"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/castPath.js",
            "raw": "'./.internal/castPath.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArguments"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArguments.js",
            "raw": "'./isArguments.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/isIndex.js",
            "raw": "'./.internal/isIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isLength"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isLength.js",
            "raw": "'./isLength.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/toKey.js",
            "raw": "'./.internal/toKey.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasOwnProperty"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "hasOwnProperty"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "hasPath"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "path"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "castPath"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "path"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "Literal",
                      "value": false,
                      "raw": "false"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "key"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "key"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "toKey"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "path"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "right": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "!=",
                              "left": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "right": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "hasOwnProperty"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "call"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "object"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            }
                          }
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "BreakStatement",
                            "label": null
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "object"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "key"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "Identifier",
                    "name": "result"
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "UpdateExpression",
                      "operator": "++",
                      "argument": {
                        "type": "Identifier",
                        "name": "index"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    },
                    "alternate": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "prefix": true
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isLength"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "length"
                          }
                        ]
                      }
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isIndex"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "key"
                        },
                        {
                          "type": "Identifier",
                          "name": "length"
                        }
                      ]
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "isArray"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isArguments"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "hasPath"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to check objects for own properties. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `path` is a direct property of `object`.\n *\n * @since 5.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @see has, hasIn, hasPathIn\n * @example\n *\n * const object = { 'a': { 'b': 2 } }\n * const other = create({ 'a': create({ 'b': 2 }) })\n *\n * hasPath(object, 'a.b')\n * // => true\n *\n * hasPath(object, ['a', 'b'])\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/hasPathIn.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castPath"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/castPath.js",
            "raw": "'./.internal/castPath.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArguments"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArguments.js",
            "raw": "'./isArguments.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/isIndex.js",
            "raw": "'./.internal/isIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isLength"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isLength.js",
            "raw": "'./isLength.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/toKey.js",
            "raw": "'./.internal/toKey.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "hasPathIn"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "path"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "castPath"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "path"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "Literal",
                      "value": false,
                      "raw": "false"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "key"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "key"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "toKey"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "path"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "right": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "!=",
                              "left": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "right": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            },
                            "right": {
                              "type": "BinaryExpression",
                              "operator": "in",
                              "left": {
                                "type": "Identifier",
                                "name": "key"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "Object"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "object"
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "prefix": true
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "BreakStatement",
                            "label": null
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "object"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "key"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "Identifier",
                    "name": "result"
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "UpdateExpression",
                      "operator": "++",
                      "argument": {
                        "type": "Identifier",
                        "name": "index"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    },
                    "alternate": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "prefix": true
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isLength"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "length"
                          }
                        ]
                      }
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isIndex"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "key"
                        },
                        {
                          "type": "Identifier",
                          "name": "length"
                        }
                      ]
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "isArray"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isArguments"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "hasPathIn"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `path` is a direct property of `object`.\n *\n * @since 5.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @see has, hasIn hasPath\n * @example\n *\n * const object = { 'a': { 'b': 2 } }\n * const other = create({ 'a': create({ 'b': 2 }) })\n *\n * hasPathIn(object, 'a.b')\n * // => true\n *\n * hasPathIn(object, ['a', 'b'])\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/head.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "head"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "array"
                    },
                    "property": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "head"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the first element of `array`.\n *\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @see last\n * @example\n *\n * head([1, 2, 3])\n * // => 1\n *\n * head([])\n * // => undefined\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/inRange.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseInRange"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseInRange.js",
            "raw": "'./.internal/baseInRange.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "inRange"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "number"
            },
            {
              "type": "Identifier",
              "name": "start"
            },
            {
              "type": "Identifier",
              "name": "end"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "end"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "end"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "start"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "start"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseInRange"
                  },
                  "arguments": [
                    {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "Identifier",
                        "name": "number"
                      },
                      "prefix": true
                    },
                    {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "Identifier",
                        "name": "start"
                      },
                      "prefix": true
                    },
                    {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "Identifier",
                        "name": "end"
                      },
                      "prefix": true
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "inRange"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `number` is between `start` and up to, but not including, `end`. If\n * `end` is not specified, it's set to `start` with `start` then set to `0`.\n * If `start` is greater than `end` the params are swapped to support\n * negative ranges.\n *\n * @since 3.3.0\n * @category Number\n * @param {number} number The number to check.\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n * @see range, rangeRight\n * @example\n *\n * inRange(3, 2, 4)\n * // => true\n *\n * inRange(4, 8)\n * // => true\n *\n * inRange(4, 2)\n * // => false\n *\n * inRange(2, 2)\n * // => false\n *\n * inRange(1.2, 2)\n * // => true\n *\n * inRange(5.2, 4)\n * // => false\n *\n * inRange(-3, -2, -6)\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/indexOf.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIndexOf"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseIndexOf.js",
            "raw": "'./.internal/baseIndexOf.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toInteger"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toInteger.js",
            "raw": "'./toInteger.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "indexOf"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "fromIndex"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        "prefix": true
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "fromIndex"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "toInteger"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "fromIndex"
                          }
                        ]
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "index"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "index"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Math"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "max"
                            }
                          },
                          "arguments": [
                            {
                              "type": "BinaryExpression",
                              "operator": "+",
                              "left": {
                                "type": "Identifier",
                                "name": "length"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            },
                            {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseIndexOf"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "Identifier",
                      "name": "index"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "indexOf"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * indexOf([1, 2, 1, 2], 2)\n * // => 1\n *\n * // Search from the `fromIndex`.\n * indexOf([1, 2, 1, 2], 2, 2)\n * // => 3\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/initial.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "slice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./slice.js",
            "raw": "'./slice.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "initial"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "slice"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        "prefix": true
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "initial"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets all but the last element of `array`.\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * initial([1, 2, 3])\n * // => [1, 2]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/intersection.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIntersection"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseIntersection.js",
            "raw": "'./.internal/baseIntersection.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/castArrayLikeObject.js",
            "raw": "'./.internal/castArrayLikeObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "intersection"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "arrays"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "mapped"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "map"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        {
                          "type": "Identifier",
                          "name": "castArrayLikeObject"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "mapped"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "mapped"
                        },
                        "property": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      },
                      "right": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        "property": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseIntersection"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "mapped"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "intersection"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of unique values that are included in all given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * intersection([2, 1], [2, 3])\n * // => [2]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/intersectionBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIntersection"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseIntersection.js",
            "raw": "'./.internal/baseIntersection.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/castArrayLikeObject.js",
            "raw": "'./.internal/castArrayLikeObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "last"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./last.js",
            "raw": "'./last.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "intersectionBy"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "arrays"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "iteratee"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "last"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrays"
                        }
                      ]
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "mapped"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "map"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        {
                          "type": "Identifier",
                          "name": "castArrayLikeObject"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "iteratee"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "last"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "mapped"
                      }
                    ]
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "iteratee"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      }
                    }
                  ]
                },
                "alternate": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "mapped"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop"
                          }
                        },
                        "arguments": []
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "mapped"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "mapped"
                        },
                        "property": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      },
                      "right": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        "property": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseIntersection"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "mapped"
                      },
                      {
                        "type": "Identifier",
                        "name": "iteratee"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "intersectionBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `intersection` except that it accepts `iteratee`\n * which is invoked for each element of each `arrays` to generate the criterion\n * by which they're compared. The order and references of result values are\n * determined by the first array. The iteratee is invoked with one argument:\n * (value).\n *\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor)\n * // => [2.1]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/intersectionWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIntersection"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseIntersection.js",
            "raw": "'./.internal/baseIntersection.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/castArrayLikeObject.js",
            "raw": "'./.internal/castArrayLikeObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "last"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./last.js",
            "raw": "'./last.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "intersectionWith"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "arrays"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "comparator"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "last"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrays"
                        }
                      ]
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "mapped"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "map"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        {
                          "type": "Identifier",
                          "name": "castArrayLikeObject"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "comparator"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "comparator"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "comparator"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "comparator"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "mapped"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop"
                          }
                        },
                        "arguments": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "mapped"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "mapped"
                        },
                        "property": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      },
                      "right": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        "property": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseIntersection"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "mapped"
                      },
                      {
                        "type": "Identifier",
                        "name": "undefined"
                      },
                      {
                        "type": "Identifier",
                        "name": "comparator"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "intersectionWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `intersection` except that it accepts `comparator`\n * which is invoked to compare elements of `arrays`. The order and references\n * of result values are determined by the first array. The comparator is\n * invoked with two arguments: (arrVal, othVal).\n *\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * const objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n * const others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }]\n *\n * intersectionWith(objects, others, isEqual)\n * // => [{ 'x': 1, 'y': 2 }]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/invert.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "toString"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "toString"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "invert"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "forEach"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "key"
                                  }
                                }
                              }
                            ],
                            "kind": "let"
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "LogicalExpression",
                              "operator": "&&",
                              "left": {
                                "type": "BinaryExpression",
                                "operator": "!=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": null,
                                  "raw": "null"
                                }
                              },
                              "right": {
                                "type": "BinaryExpression",
                                "operator": "!=",
                                "left": {
                                  "type": "UnaryExpression",
                                  "operator": "typeof",
                                  "argument": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "toString"
                                    }
                                  },
                                  "prefix": true
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": "function",
                                  "raw": "'function'"
                                }
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    "right": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "computed": false,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "toString"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "call"
                                        }
                                      },
                                      "arguments": [
                                        {
                                          "type": "Identifier",
                                          "name": "value"
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "key"
                              }
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "invert"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an object composed of the inverted keys and values of `object`.\n * If `object` contains duplicate values, subsequent values overwrite\n * property assignments of previous values.\n *\n * @since 0.7.0\n * @category Object\n * @param {Object} object The object to invert.\n * @returns {Object} Returns the new inverted object.\n * @example\n *\n * const object = { 'a': 1, 'b': 2, 'c': 1 }\n *\n * invert(object)\n * // => { '1': 'c', '2': 'b' }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/invertBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasOwnProperty"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "hasOwnProperty"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "invertBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "forEach"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "iteratee"
                                  },
                                  "arguments": [
                                    {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "object"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "key"
                                      }
                                    }
                                  ]
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "hasOwnProperty"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "call"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "MemberExpression",
                                        "computed": true,
                                        "object": {
                                          "type": "Identifier",
                                          "name": "result"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "value"
                                        }
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "push"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "key"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "result"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "value"
                                      }
                                    },
                                    "right": {
                                      "type": "ArrayExpression",
                                      "elements": [
                                        {
                                          "type": "Identifier",
                                          "name": "key"
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "invertBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to check objects for own properties. "
        },
        {
          "type": "Block",
          "value": "*\n * This method is like `invert` except that the inverted object is generated\n * from the results of running each element of `object` thru `iteratee`. The\n * corresponding inverted value of each inverted key is an array of keys\n * responsible for generating the inverted value. The iteratee is invoked\n * with one argument: (value).\n *\n * @since 4.1.0\n * @category Object\n * @param {Object} object The object to invert.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Object} Returns the new inverted object.\n * @example\n *\n * const object = { 'a': 1, 'b': 2, 'c': 1 }\n *\n * invertBy(object, value => `group${value}`)\n * // => { 'group1': ['a', 'c'], 'group2': ['b'] }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/invoke.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castPath"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/castPath.js",
            "raw": "'./.internal/castPath.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "last"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./last.js",
            "raw": "'./last.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "parent"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/parent.js",
            "raw": "'./.internal/parent.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/toKey.js",
            "raw": "'./.internal/toKey.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "invoke"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "args"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "path"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "castPath"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "parent"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "path"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "object"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "object"
                        },
                        "property": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "toKey"
                          },
                          "arguments": [
                            {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "last"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "path"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "undefined"
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "func"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "apply"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "args"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "invoke"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Invokes the method at `path` of `object`.\n *\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the method to invoke.\n * @param {Array} [args] The arguments to invoke the method with.\n * @returns {*} Returns the result of the invoked method.\n * @example\n *\n * const object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] }\n *\n * invoke(object, 'a[0].b.c.slice', [1, 3])\n * // => [2, 3]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/invokeMap.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseEach"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseEach.js",
            "raw": "'./.internal/baseEach.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "invoke"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./invoke.js",
            "raw": "'./invoke.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLike.js",
            "raw": "'./isArrayLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "invokeMap"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "args"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isFunc"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "path"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isArrayLike"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "collection"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "Array"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "collection"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "length"
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseEach"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "UpdateExpression",
                                  "operator": "++",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "index"
                                  },
                                  "prefix": true
                                }
                              },
                              "right": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "isFunc"
                                },
                                "consequent": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "path"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "apply"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "args"
                                    }
                                  ]
                                },
                                "alternate": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "invoke"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "path"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "args"
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "invokeMap"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Invokes the method at `path` of each element in `collection`, returning\n * an array of the results of each invoked method. Any additional arguments\n * are provided to each invoked method. If `path` is a function, it's invoked\n * for, and `this` bound to, each element in `collection`.\n *\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array|Function|string} path The path of the method to invoke or\n *  the function invoked per iteration.\n * @param {Array} [args] The arguments to invoke each method with.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * invokeMap([[5, 1, 7], [3, 2, 1]], 'sort')\n * // => [[1, 5, 7], [1, 2, 3]]\n *\n * invokeMap([123, 456], String.prototype.split, [''])\n * // => [['1', '2', '3'], ['4', '5', '6']]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isArguments.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isArguments"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isObjectLike"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getTag"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "Literal",
                      "value": "[object Arguments]",
                      "raw": "'[object Arguments]'"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isArguments"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is likely an `arguments` object.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object, else `false`.\n * @example\n *\n * isArguments(function() { return arguments }())\n * // => true\n *\n * isArguments([1, 2, 3])\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isArrayBuffer.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "nodeTypes"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/nodeTypes.js",
            "raw": "'./.internal/nodeTypes.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "nodeIsArrayBuffer"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "Identifier",
                  "name": "nodeTypes"
                },
                "right": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "nodeTypes"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "isArrayBuffer"
                  }
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "isArrayBuffer"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "Identifier",
                  "name": "nodeIsArrayBuffer"
                },
                "consequent": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "nodeIsArrayBuffer"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                },
                "alternate": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isObjectLike"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "getTag"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "value": "[object ArrayBuffer]",
                        "raw": "'[object ArrayBuffer]'"
                      }
                    }
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isArrayBuffer"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": " Node.js helper references. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as an `ArrayBuffer` object.\n *\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.\n * @example\n *\n * isArrayBuffer(new ArrayBuffer(2))\n * // => true\n *\n * isArrayBuffer(new Array(2))\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isArrayLike.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isLength"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isLength.js",
            "raw": "'./isLength.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isArrayLike"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isLength"
                    },
                    "arguments": [
                      {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isArrayLike"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * isArrayLike([1, 2, 3])\n * // => true\n *\n * isArrayLike(document.body.children)\n * // => true\n *\n * isArrayLike('abc')\n * // => true\n *\n * isArrayLike(Function)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isArrayLikeObject.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLike.js",
            "raw": "'./isArrayLike.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isArrayLikeObject"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isObjectLike"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isArrayLike"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isArrayLikeObject"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * isArrayLikeObject([1, 2, 3])\n * // => true\n *\n * isArrayLikeObject(document.body.children)\n * // => true\n *\n * isArrayLikeObject('abc')\n * // => false\n *\n * isArrayLikeObject(Function)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isBoolean.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isBoolean"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "right": {
                        "type": "Literal",
                        "value": false,
                        "raw": "false"
                      }
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isObjectLike"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "getTag"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "value": "[object Boolean]",
                        "raw": "'[object Boolean]'"
                      }
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isBoolean"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as a boolean primitive or object.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\n * @example\n *\n * isBoolean(false)\n * // => true\n *\n * isBoolean(null)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isBuffer.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "root"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/root.js",
            "raw": "'./.internal/root.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "freeExports"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "exports"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "object",
                        "raw": "'object'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "exports"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "exports"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "nodeType"
                      }
                    },
                    "prefix": true
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "exports"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "freeModule"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "Identifier",
                        "name": "freeExports"
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "Identifier",
                            "name": "module"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Literal",
                          "value": "object",
                          "raw": "'object'"
                        }
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!==",
                      "left": {
                        "type": "Identifier",
                        "name": "module"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "module"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "nodeType"
                      }
                    },
                    "prefix": true
                  }
                },
                "right": {
                  "type": "Identifier",
                  "name": "module"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "moduleExports"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "Identifier",
                  "name": "freeModule"
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "freeModule"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "exports"
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "freeExports"
                  }
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "Buffer"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "Identifier",
                  "name": "moduleExports"
                },
                "consequent": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "root"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "Buffer"
                  }
                },
                "alternate": {
                  "type": "Identifier",
                  "name": "undefined"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "nativeIsBuffer"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "Identifier",
                  "name": "Buffer"
                },
                "consequent": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Buffer"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "isBuffer"
                  }
                },
                "alternate": {
                  "type": "Identifier",
                  "name": "undefined"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "isBuffer"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "Identifier",
                  "name": "nativeIsBuffer"
                },
                "right": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [],
                  "body": {
                    "type": "Literal",
                    "value": false,
                    "raw": "false"
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isBuffer"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Detect free variable `exports`. "
        },
        {
          "type": "Block",
          "value": "* Detect free variable `module`. "
        },
        {
          "type": "Block",
          "value": "* Detect the popular CommonJS extension `module.exports`. "
        },
        {
          "type": "Block",
          "value": "* Built-in value references. "
        },
        {
          "type": "Block",
          "value": " Built-in method references for those with the same name as other `lodash` methods. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is a buffer.\n *\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * isBuffer(new Buffer(2))\n * // => true\n *\n * isBuffer(new Uint8Array(2))\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isDate.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "nodeTypes"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/nodeTypes.js",
            "raw": "'./.internal/nodeTypes.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "nodeIsDate"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "Identifier",
                  "name": "nodeTypes"
                },
                "right": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "nodeTypes"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "isDate"
                  }
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "isDate"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "Identifier",
                  "name": "nodeIsDate"
                },
                "consequent": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "nodeIsDate"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                },
                "alternate": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isObjectLike"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "getTag"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "value": "[object Date]",
                        "raw": "'[object Date]'"
                      }
                    }
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isDate"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": " Node.js helper references. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as a `Date` object.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n * @example\n *\n * isDate(new Date)\n * // => true\n *\n * isDate('Mon April 23 2012')\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isElement.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isPlainObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isPlainObject.js",
            "raw": "'./isPlainObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isElement"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isObjectLike"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "nodeType"
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isPlainObject"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "prefix": true
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isElement"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is likely a DOM element.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n * @example\n *\n * isElement(document.body)\n * // => true\n *\n * isElement('<body>')\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isEmpty.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArguments"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArguments.js",
            "raw": "'./isArguments.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLike.js",
            "raw": "'./isArrayLike.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isBuffer"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isBuffer.js",
            "raw": "'./isBuffer.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isPrototype"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/isPrototype.js",
            "raw": "'./.internal/isPrototype.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isTypedArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isTypedArray.js",
            "raw": "'./isTypedArray.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasOwnProperty"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "Object"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  }
                },
                "property": {
                  "type": "Identifier",
                  "name": "hasOwnProperty"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isEmpty"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isArrayLike"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "||",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "||",
                            "left": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Array"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "isArray"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              ]
                            },
                            "right": {
                              "type": "BinaryExpression",
                              "operator": "==",
                              "left": {
                                "type": "UnaryExpression",
                                "operator": "typeof",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "prefix": true
                              },
                              "right": {
                                "type": "Literal",
                                "value": "string",
                                "raw": "'string'"
                              }
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "typeof",
                              "argument": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "splice"
                                }
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "Literal",
                              "value": "function",
                              "raw": "'function'"
                            }
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "isBuffer"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isTypedArray"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      }
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isArguments"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        },
                        "prefix": true
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "tag"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getTag"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "tag"
                    },
                    "right": {
                      "type": "Literal",
                      "value": "[object Map]",
                      "raw": "'[object Map]'"
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "tag"
                    },
                    "right": {
                      "type": "Literal",
                      "value": "[object Set]",
                      "raw": "'[object Set]'"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "size"
                          }
                        },
                        "prefix": true
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isPrototype"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "keys"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "value"
                              }
                            ]
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        },
                        "prefix": true
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ForInStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "key"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "value"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "hasOwnProperty"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "call"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          },
                          {
                            "type": "Identifier",
                            "name": "key"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": false,
                              "raw": "false"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                },
                "each": false
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Literal",
                  "value": true,
                  "raw": "true"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isEmpty"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to check objects for own properties. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is an empty object, collection, map, or set.\n *\n * Objects are considered empty if they have no own enumerable string keyed\n * properties.\n *\n * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n * jQuery-like collections are considered empty if they have a `length` of `0`.\n * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n * @example\n *\n * isEmpty(null)\n * // => true\n *\n * isEmpty(true)\n * // => true\n *\n * isEmpty(1)\n * // => true\n *\n * isEmpty([1, 2, 3])\n * // => false\n *\n * isEmpty('abc')\n * // => false\n *\n * isEmpty({ 'a': 1 })\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isEqualWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIsEqual"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseIsEqual.js",
            "raw": "'./.internal/baseIsEqual.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isEqualWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "other"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "customizer"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "customizer"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "customizer"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "customizer"
                      },
                      "consequent": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "customizer"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          },
                          {
                            "type": "Identifier",
                            "name": "other"
                          }
                        ]
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseIsEqual"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      },
                      {
                        "type": "Identifier",
                        "name": "other"
                      },
                      {
                        "type": "Identifier",
                        "name": "undefined"
                      },
                      {
                        "type": "Identifier",
                        "name": "customizer"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      },
                      "prefix": true
                    },
                    "prefix": true
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isEqualWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value)\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true\n *   }\n * }\n *\n * const array = ['hello', 'goodbye']\n * const other = ['hi', 'goodbye']\n *\n * isEqualWith(array, other, customizer)\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isError.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isPlainObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isPlainObject.js",
            "raw": "'./isPlainObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isError"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isObjectLike"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": false,
                        "raw": "false"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "tag"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getTag"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "tag"
                      },
                      "right": {
                        "type": "Literal",
                        "value": "[object Error]",
                        "raw": "'[object Error]'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "tag"
                      },
                      "right": {
                        "type": "Literal",
                        "value": "[object DOMException]",
                        "raw": "'[object DOMException]'"
                      }
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "message"
                            }
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Literal",
                          "value": "string",
                          "raw": "'string'"
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "name"
                            }
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Literal",
                          "value": "string",
                          "raw": "'string'"
                        }
                      }
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isPlainObject"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "prefix": true
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isError"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,\n * `SyntaxError`, `TypeError`, or `URIError` object.\n *\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an error object, else `false`.\n * @example\n *\n * isError(new Error)\n * // => true\n *\n * isError(Error)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isFunction.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObject.js",
            "raw": "'./isObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isFunction"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isObject"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": false,
                        "raw": "false"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "tag"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getTag"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "tag"
                        },
                        "right": {
                          "type": "Literal",
                          "value": "[object Function]",
                          "raw": "'[object Function]'"
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "tag"
                        },
                        "right": {
                          "type": "Literal",
                          "value": "[object AsyncFunction]",
                          "raw": "'[object AsyncFunction]'"
                        }
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "tag"
                      },
                      "right": {
                        "type": "Literal",
                        "value": "[object GeneratorFunction]",
                        "raw": "'[object GeneratorFunction]'"
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "tag"
                    },
                    "right": {
                      "type": "Literal",
                      "value": "[object Proxy]",
                      "raw": "'[object Proxy]'"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isFunction"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as a `Function` object.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * isFunction(_)\n * // => true\n *\n * isFunction(/abc/)\n * // => false\n "
        },
        {
          "type": "Line",
          "value": " The use of `Object#toString` avoids issues with the `typeof` operator"
        },
        {
          "type": "Line",
          "value": " in Safari 9 which returns 'object' for typed arrays and other constructors."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isLength.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "MAX_SAFE_INTEGER"
              },
              "init": {
                "type": "Literal",
                "value": 9007199254740991,
                "raw": "9007199254740991"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isLength"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Literal",
                          "value": "number",
                          "raw": "'number'"
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "-",
                          "argument": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          },
                          "prefix": true
                        }
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "%",
                        "left": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "<=",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "MAX_SAFE_INTEGER"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isLength"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * isLength(3)\n * // => true\n *\n * isLength(Number.MIN_VALUE)\n * // => false\n *\n * isLength(Infinity)\n * // => false\n *\n * isLength('3')\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isMap.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "nodeTypes"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/nodeTypes.js",
            "raw": "'./.internal/nodeTypes.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "nodeIsMap"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "Identifier",
                  "name": "nodeTypes"
                },
                "right": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "nodeTypes"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "isMap"
                  }
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "isMap"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "Identifier",
                  "name": "nodeIsMap"
                },
                "consequent": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "nodeIsMap"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                },
                "alternate": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isObjectLike"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "getTag"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "value": "[object Map]",
                        "raw": "'[object Map]'"
                      }
                    }
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isMap"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": " Node.js helper references. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as a `Map` object.\n *\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * isMap(new Map)\n * // => true\n *\n * isMap(new WeakMap)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isMatch.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIsMatch"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseIsMatch.js",
            "raw": "'./.internal/baseIsMatch.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getMatchData"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getMatchData.js",
            "raw": "'./.internal/getMatchData.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isMatch"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "source"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "source"
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseIsMatch"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "source"
                      },
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "getMatchData"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "source"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isMatch"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Performs a partial deep comparison between `object` and `source` to\n * determine if `object` contains equivalent property values.\n *\n * **Note:** This method is equivalent to `matches` when `source` is\n * partially applied.\n *\n * Partial comparisons will match empty array and empty object `source`\n * values against any array or object value, respectively. See `isEqual`\n * for a list of supported value comparisons.\n *\n * @since 3.0.0\n * @category Lang\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n * @example\n *\n * const object = { 'a': 1, 'b': 2 }\n *\n * isMatch(object, { 'b': 2 })\n * // => true\n *\n * isMatch(object, { 'b': 1 })\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isMatchWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIsMatch"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseIsMatch.js",
            "raw": "'./.internal/baseIsMatch.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getMatchData"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getMatchData.js",
            "raw": "'./.internal/getMatchData.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isMatchWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "source"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "customizer"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "customizer"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "customizer"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseIsMatch"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    },
                    {
                      "type": "Identifier",
                      "name": "source"
                    },
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getMatchData"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "source"
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "name": "customizer"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isMatchWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `isMatch` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with five\n * arguments: (objValue, srcValue, index|key, object, source).\n *\n * @since 4.0.0\n * @category Lang\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value)\n * }\n *\n * function customizer(objValue, srcValue) {\n *   if (isGreeting(objValue) && isGreeting(srcValue)) {\n *     return true\n *   }\n * }\n *\n * const object = { 'greeting': 'hello' }\n * const source = { 'greeting': 'hi' }\n *\n * isMatchWith(object, source, customizer)\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isNative.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObject.js",
            "raw": "'./isObject.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reRegExpChar"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/[\\\\^$.*+?()[\\]{}|]/g",
                "regex": {
                  "pattern": "[\\\\^$.*+?()[\\]{}|]",
                  "flags": "g"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reIsNative"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "RegExp"
                },
                "arguments": [
                  {
                    "type": "TemplateLiteral",
                    "quasis": [
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "^",
                          "cooked": "^"
                        },
                        "tail": false
                      },
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "$",
                          "cooked": "$"
                        },
                        "tail": true
                      }
                    ],
                    "expressions": [
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "Function"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "prototype"
                                      }
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "toString"
                                    }
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "call"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "Object"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "prototype"
                                      }
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "hasOwnProperty"
                                    }
                                  }
                                ]
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "replace"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "reRegExpChar"
                              },
                              {
                                "type": "Literal",
                                "value": "\\$&",
                                "raw": "'\\\\$&'"
                              }
                            ]
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "replace"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": {},
                            "raw": "/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g",
                            "regex": {
                              "pattern": "hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])",
                              "flags": "g"
                            }
                          },
                          {
                            "type": "Literal",
                            "value": "$1.*?",
                            "raw": "'$1.*?'"
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isNative"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isObject"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "reIsNative"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "test"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isNative"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n "
        },
        {
          "type": "Block",
          "value": "* Used to detect if a method is native. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is a pristine native function.\n *\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n * @example\n *\n * isNative(Array.prototype.push)\n * // => true\n *\n * isNative(isDate)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isNil.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isNil"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isNil"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is `null` or `undefined`.\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is nullish, else `false`.\n * @example\n *\n * isNil(null)\n * // => true\n *\n * isNil(void 0)\n * // => true\n *\n * isNil(NaN)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isNull.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isNull"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isNull"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is `null`.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `null`, else `false`.\n * @example\n *\n * isNull(null)\n * // => true\n *\n * isNull(void 0)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isNumber.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isNumber"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Literal",
                      "value": "number",
                      "raw": "'number'"
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isObjectLike"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "getTag"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "value": "[object Number]",
                        "raw": "'[object Number]'"
                      }
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isNumber"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as a `Number` primitive or object.\n *\n * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n * classified as numbers, use the `Number.isFinite` method.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a number, else `false`.\n * @see isInteger, toInteger, toNumber\n * @example\n *\n * isNumber(3)\n * // => true\n *\n * isNumber(Number.MIN_VALUE)\n * // => true\n *\n * isNumber(Infinity)\n * // => true\n *\n * isNumber('3')\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isObject.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isObject"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "type"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "type"
                      },
                      "right": {
                        "type": "Literal",
                        "value": "object",
                        "raw": "'object'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "type"
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isObject"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * isObject({})\n * // => true\n *\n * isObject([1, 2, 3])\n * // => true\n *\n * isObject(Function)\n * // => true\n *\n * isObject(null)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isObjectLike.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isObjectLike"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Literal",
                      "value": "object",
                      "raw": "'object'"
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "!==",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isObjectLike"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * isObjectLike({})\n * // => true\n *\n * isObjectLike([1, 2, 3])\n * // => true\n *\n * isObjectLike(Function)\n * // => false\n *\n * isObjectLike(null)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isPlainObject.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isPlainObject"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isObjectLike"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getTag"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "Literal",
                      "value": "[object Object]",
                      "raw": "'[object Object]'"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": false,
                        "raw": "false"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "getPrototypeOf"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "proto"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "value"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!==",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "getPrototypeOf"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "proto"
                      }
                    ]
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "proto"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "getPrototypeOf"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "proto"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "getPrototypeOf"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "proto"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isPlainObject"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1\n * }\n *\n * isPlainObject(new Foo)\n * // => false\n *\n * isPlainObject([1, 2, 3])\n * // => false\n *\n * isPlainObject({ 'x': 0, 'y': 0 })\n * // => true\n *\n * isPlainObject(Object.create(null))\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isRegExp.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "nodeTypes"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/nodeTypes.js",
            "raw": "'./.internal/nodeTypes.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "nodeIsRegExp"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "Identifier",
                  "name": "nodeTypes"
                },
                "right": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "nodeTypes"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "isRegExp"
                  }
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "isRegExp"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "Identifier",
                  "name": "nodeIsRegExp"
                },
                "consequent": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "nodeIsRegExp"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                },
                "alternate": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isObjectLike"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "getTag"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "value": "[object RegExp]",
                        "raw": "'[object RegExp]'"
                      }
                    }
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isRegExp"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": " Node.js helper references. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as a `RegExp` object.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n * @example\n *\n * isRegExp(/abc/)\n * // => true\n *\n * isRegExp('/abc/')\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isSet.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "nodeTypes"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/nodeTypes.js",
            "raw": "'./.internal/nodeTypes.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "nodeIsSet"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "Identifier",
                  "name": "nodeTypes"
                },
                "right": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "nodeTypes"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "isSet"
                  }
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "isSet"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "Identifier",
                  "name": "nodeIsSet"
                },
                "consequent": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "nodeIsSet"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                },
                "alternate": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isObjectLike"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "getTag"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "value": "[object Set]",
                        "raw": "'[object Set]'"
                      }
                    }
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isSet"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": " Node.js helper references. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as a `Set` object.\n *\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * isSet(new Set)\n * // => true\n *\n * isSet(new WeakSet)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isString.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isString"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "type"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "type"
                    },
                    "right": {
                      "type": "Literal",
                      "value": "string",
                      "raw": "'string'"
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "==",
                          "left": {
                            "type": "Identifier",
                            "name": "type"
                          },
                          "right": {
                            "type": "Literal",
                            "value": "object",
                            "raw": "'object'"
                          }
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "!=",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "Literal",
                            "value": null,
                            "raw": "null"
                          }
                        }
                      },
                      "right": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Array"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "isArray"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        },
                        "prefix": true
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "getTag"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "value": "[object String]",
                        "raw": "'[object String]'"
                      }
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isString"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * isString('abc')\n * // => true\n *\n * isString(1)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isSymbol.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isSymbol"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "type"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "type"
                    },
                    "right": {
                      "type": "Literal",
                      "value": "symbol",
                      "raw": "'symbol'"
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "type"
                        },
                        "right": {
                          "type": "Literal",
                          "value": "object",
                          "raw": "'object'"
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "!=",
                        "left": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "getTag"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "value": "[object Symbol]",
                        "raw": "'[object Symbol]'"
                      }
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isSymbol"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * isSymbol(Symbol.iterator)\n * // => true\n *\n * isSymbol('abc')\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isTypedArray.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "nodeTypes"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/nodeTypes.js",
            "raw": "'./.internal/nodeTypes.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reTypedTag"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/^\\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)Array\\]$/",
                "regex": {
                  "pattern": "^\\[object (?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)Array\\]$",
                  "flags": ""
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "nodeIsTypedArray"
              },
              "init": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "Identifier",
                  "name": "nodeTypes"
                },
                "right": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "nodeTypes"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "isTypedArray"
                  }
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "isTypedArray"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "Identifier",
                  "name": "nodeIsTypedArray"
                },
                "consequent": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "nodeIsTypedArray"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                },
                "alternate": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ],
                  "body": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isObjectLike"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "reTypedTag"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "test"
                        }
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "getTag"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isTypedArray"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to match `toStringTag` values of typed arrays. "
        },
        {
          "type": "Block",
          "value": " Node.js helper references. "
        },
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as a typed array.\n *\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * isTypedArray(new Uint8Array)\n * // => true\n *\n * isTypedArray([])\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isUndefined.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isUndefined"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isUndefined"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is `undefined`.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n * @example\n *\n * isUndefined(void 0)\n * // => true\n *\n * isUndefined(null)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isWeakMap.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isWeakMap"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isObjectLike"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getTag"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "Literal",
                      "value": "[object WeakMap]",
                      "raw": "'[object WeakMap]'"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isWeakMap"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as a `WeakMap` object.\n *\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.\n * @example\n *\n * isWeakMap(new WeakMap)\n * // => true\n *\n * isWeakMap(new Map)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/isWeakSet.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObjectLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObjectLike.js",
            "raw": "'./isObjectLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "isWeakSet"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isObjectLike"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getTag"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "right": {
                      "type": "Literal",
                      "value": "[object WeakSet]",
                      "raw": "'[object WeakSet]'"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "isWeakSet"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is classified as a `WeakSet` object.\n *\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.\n * @example\n *\n * isWeakSet(new WeakSet)\n * // => true\n *\n * isWeakSet(new Set)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/kebabCase.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "words"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./words.js",
            "raw": "'./words.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toString"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toString.js",
            "raw": "'./toString.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "kebabCase"
              },
              "init": {
                "type": "ArrowFunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "string"
                  }
                ],
                "body": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "words"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "toString"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "string"
                                }
                              ]
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "replace"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": {},
                              "raw": "/['\\u2019]/g",
                              "regex": {
                                "pattern": "['\\u2019]",
                                "flags": "g"
                              }
                            },
                            {
                              "type": "Literal",
                              "value": "",
                              "raw": "''"
                            }
                          ]
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "reduce"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "result"
                        },
                        {
                          "type": "Identifier",
                          "name": "word"
                        },
                        {
                          "type": "Identifier",
                          "name": "index"
                        }
                      ],
                      "body": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "consequent": {
                              "type": "Literal",
                              "value": "-",
                              "raw": "'-'"
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": "",
                              "raw": "''"
                            }
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "word"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "toLowerCase"
                            }
                          },
                          "arguments": []
                        }
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    },
                    {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  ]
                },
                "generator": false,
                "expression": true,
                "async": false
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "kebabCase"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `string` to\n * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).\n *\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the kebab cased string.\n * @see camelCase, lowerCase, snakeCase, startCase, upperCase, upperFirst\n * @example\n *\n * kebabCase('Foo Bar')\n * // => 'foo-bar'\n *\n * kebabCase('fooBar')\n * // => 'foo-bar'\n *\n * kebabCase('__FOO_BAR__')\n * // => 'foo-bar'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/keyBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseAssignValue"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseAssignValue.js",
            "raw": "'./.internal/baseAssignValue.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "reduce"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./reduce.js",
            "raw": "'./reduce.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "keyBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "reduce"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "result"
                        },
                        {
                          "type": "Identifier",
                          "name": "value"
                        },
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "SequenceExpression",
                        "expressions": [
                          {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "baseAssignValue"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "result"
                              },
                              {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "value"
                                  }
                                ]
                              },
                              {
                                "type": "Identifier",
                                "name": "value"
                              }
                            ]
                          },
                          {
                            "type": "Identifier",
                            "name": "result"
                          }
                        ]
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "keyBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The corresponding value of\n * each key is the last element responsible for generating the key. The\n * iteratee is invoked with one argument: (value).\n *\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @see groupBy, partition\n * @example\n *\n * const array = [\n *   { 'dir': 'left', 'code': 97 },\n *   { 'dir': 'right', 'code': 100 }\n * ]\n *\n * keyBy(array, ({ code }) => String.fromCharCode(code))\n * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/keys.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayLikeKeys"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/arrayLikeKeys.js",
            "raw": "'./.internal/arrayLikeKeys.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLike.js",
            "raw": "'./isArrayLike.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "keys"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isArrayLike"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "arrayLikeKeys"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "keys"
                      }
                    },
                    "arguments": [
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "keys"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @since 0.1.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @see values, valuesIn\n * @example\n *\n * function Foo() {\n *   this.a = 1\n *   this.b = 2\n * }\n *\n * Foo.prototype.c = 3\n *\n * keys(new Foo)\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * keys('hi')\n * // => ['0', '1']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/keysIn.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "keysIn"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ForInStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "key"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "object"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "push"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "key"
                          }
                        ]
                      }
                    }
                  ]
                },
                "each": false
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "keysIn"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/last.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "last"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "consequent": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "array"
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "last"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the last element of `array`.\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * last([1, 2, 3])\n * // => 3\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/lastIndexOf.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFindIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFindIndex.js",
            "raw": "'./.internal/baseFindIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseIsNaN"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseIsNaN.js",
            "raw": "'./.internal/baseIsNaN.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "strictLastIndexOf"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/strictLastIndexOf.js",
            "raw": "'./.internal/strictLastIndexOf.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toInteger"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toInteger.js",
            "raw": "'./toInteger.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "lastIndexOf"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "fromIndex"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        "prefix": true
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!==",
                  "left": {
                    "type": "Identifier",
                    "name": "fromIndex"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "index"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "toInteger"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "fromIndex"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "index"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "<",
                            "left": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          },
                          "consequent": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Math"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "max"
                              }
                            },
                            "arguments": [
                              {
                                "type": "BinaryExpression",
                                "operator": "+",
                                "left": {
                                  "type": "Identifier",
                                  "name": "length"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "index"
                                }
                              },
                              {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              }
                            ]
                          },
                          "alternate": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Math"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "min"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "index"
                              },
                              {
                                "type": "BinaryExpression",
                                "operator": "-",
                                "left": {
                                  "type": "Identifier",
                                  "name": "length"
                                },
                                "right": {
                                  "type": "Literal",
                                  "value": 1,
                                  "raw": "1"
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "value"
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "strictLastIndexOf"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "value"
                      },
                      {
                        "type": "Identifier",
                        "name": "index"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseFindIndex"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "baseIsNaN"
                      },
                      {
                        "type": "Identifier",
                        "name": "index"
                      },
                      {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "lastIndexOf"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `indexOf` except that it iterates over elements of\n * `array` from right to left.\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=array.length-1] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * lastIndexOf([1, 2, 1, 2], 2)\n * // => 3\n *\n * // Search from the `fromIndex`.\n * lastIndexOf([1, 2, 1, 2], 2, 2)\n * // => 1\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/lowerCase.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "words"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./words.js",
            "raw": "'./words.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toString"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toString.js",
            "raw": "'./toString.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reQuotes"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/['\\u2019]/g",
                "regex": {
                  "pattern": "['\\u2019]",
                  "flags": "g"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "lowerCase"
              },
              "init": {
                "type": "ArrowFunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "string"
                  }
                ],
                "body": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "words"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "toString"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "string"
                                }
                              ]
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "replace"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "reQuotes"
                            },
                            {
                              "type": "Literal",
                              "value": "",
                              "raw": "''"
                            }
                          ]
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "reduce"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "result"
                        },
                        {
                          "type": "Identifier",
                          "name": "word"
                        },
                        {
                          "type": "Identifier",
                          "name": "index"
                        }
                      ],
                      "body": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "consequent": {
                              "type": "Literal",
                              "value": " ",
                              "raw": "' '"
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": "",
                              "raw": "''"
                            }
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "word"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "toLowerCase"
                            }
                          },
                          "arguments": []
                        }
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    },
                    {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  ]
                },
                "generator": false,
                "expression": true,
                "async": false
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "lowerCase"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `string`, as space separated words, to lower case.\n *\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the lower cased string.\n * @see camelCase, kebabCase, snakeCase, startCase, upperCase, upperFirst\n * @example\n *\n * lowerCase('--Foo-Bar--')\n * // => 'foo bar'\n *\n * lowerCase('fooBar')\n * // => 'foo bar'\n *\n * lowerCase('__FOO_BAR__')\n * // => 'foo bar'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/lowerFirst.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createCaseFirst"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createCaseFirst.js",
            "raw": "'./.internal/createCaseFirst.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "lowerFirst"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createCaseFirst"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "value": "toLowerCase",
                    "raw": "'toLowerCase'"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "lowerFirst"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts the first character of `string` to lower case.\n *\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * lowerFirst('Fred')\n * // => 'fred'\n *\n * lowerFirst('FRED')\n * // => 'fRED'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/lt.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "lt"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "other"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "string",
                        "raw": "'string'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "other"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "string",
                        "raw": "'string'"
                      }
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "+",
                          "argument": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "prefix": true
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "other"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "+",
                          "argument": {
                            "type": "Identifier",
                            "name": "other"
                          },
                          "prefix": true
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "other"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "lt"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is less than `other`.\n *\n * @since 3.9.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n * @see gt, gte, lte\n * @example\n *\n * lt(1, 3)\n * // => true\n *\n * lt(3, 3)\n * // => false\n *\n * lt(3, 1)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/lte.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "lte"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "other"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "string",
                        "raw": "'string'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "other"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "string",
                        "raw": "'string'"
                      }
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "+",
                          "argument": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "prefix": true
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "other"
                        },
                        "right": {
                          "type": "UnaryExpression",
                          "operator": "+",
                          "argument": {
                            "type": "Identifier",
                            "name": "other"
                          },
                          "prefix": true
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "<=",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "other"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "lte"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `value` is less than or equal to `other`.\n *\n * @since 3.9.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than or equal to\n *  `other`, else `false`.\n * @see gt, gte, lt\n * @example\n *\n * lte(1, 3)\n * // => true\n *\n * lte(3, 3)\n * // => true\n *\n * lte(3, 1)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/map.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "map"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "length"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "iteratee"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "index"
                            },
                            {
                              "type": "Identifier",
                              "name": "array"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "map"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of values by running each element of `array` thru `iteratee`.\n * The iteratee is invoked with three arguments: (value, index, array).\n *\n * @since 5.0.0\n * @category Array\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n\n * }\n *\n * map([4, 8], square)\n * // => [16, 64]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/mapKey.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "mapKey"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "forEach"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "key"
                                  }
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "iteratee"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "object"
                                    }
                                  ]
                                }
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "value"
                              }
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "mapKey"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The opposite of `mapValue` this method creates an object with the\n * same values as `object` and keys generated by running each own enumerable\n * string keyed property of `object` thru `iteratee`. The iteratee is invoked\n * with three arguments: (value, key, object).\n *\n * @since 3.8.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see mapValue\n * @example\n *\n * mapKey({ 'a': 1, 'b': 2 }, function(value, key) {\n *   return key + value\n * })\n * // => { 'a1': 1, 'b2': 2 }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/mapObject.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "mapObject"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "props"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "props"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "props"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "forEach"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "key"
                        },
                        {
                          "type": "Identifier",
                          "name": "index"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "index"
                                }
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "object"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "key"
                                    }
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "key"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "object"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "mapObject"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of values by running each property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments: (value, key, object).\n *\n * @since 5.0.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n\n * }\n *\n * map({ 'a': 4, 'b': 8 }, square)\n * // => [16, 64] (iteration order is not guaranteed)\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/mapValue.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "mapValue"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "forEach"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "object"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "key"
                                    }
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "key"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "object"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "mapValue"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see mapKeys\n * @example\n *\n * const users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * }\n *\n * mapValue(users, ({ age }) => age)\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/matches.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseClone"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseClone.js",
            "raw": "'./.internal/baseClone.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseMatches"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseMatches.js",
            "raw": "'./.internal/baseMatches.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "CLONE_DEEP_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "matches"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "source"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseMatches"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseClone"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "source"
                        },
                        {
                          "type": "Identifier",
                          "name": "CLONE_DEEP_FLAG"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "matches"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for cloning. "
        },
        {
          "type": "Block",
          "value": "*\n * Creates a function that performs a partial deep comparison between a given\n * object and `source`, returning `true` if the given object has equivalent\n * property values, else `false`.\n *\n * **Note:** The created function is equivalent to `isMatch` with `source`\n * partially applied.\n *\n * Partial comparisons will match empty array and empty object `source`\n * values against any array or object value, respectively. See `isEqual`\n * for a list of supported value comparisons.\n *\n * @since 3.0.0\n * @category Util\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n * @example\n *\n * const objects = [\n *   { 'a': 1, 'b': 2, 'c': 3 },\n *   { 'a': 4, 'b': 5, 'c': 6 }\n * ]\n *\n * filter(objects, matches({ 'a': 4, 'c': 6 }))\n * // => [{ 'a': 4, 'b': 5, 'c': 6 }]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/matchesProperty.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseClone"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseClone.js",
            "raw": "'./.internal/baseClone.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseMatchesProperty"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseMatchesProperty.js",
            "raw": "'./.internal/baseMatchesProperty.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "CLONE_DEEP_FLAG"
              },
              "init": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "matchesProperty"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "srcValue"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseMatchesProperty"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "path"
                    },
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseClone"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "srcValue"
                        },
                        {
                          "type": "Identifier",
                          "name": "CLONE_DEEP_FLAG"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "matchesProperty"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to compose bitmasks for cloning. "
        },
        {
          "type": "Block",
          "value": "*\n * Creates a function that performs a partial deep comparison between the\n * value at `path` of a given object to `srcValue`, returning `true` if the\n * object value is equivalent, else `false`.\n *\n * **Note:** Partial comparisons will match empty array and empty object\n * `srcValue` values against any array or object value, respectively. See\n * `isEqual` for a list of supported value comparisons.\n *\n * @since 3.2.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n * @example\n *\n * const objects = [\n *   { 'a': 1, 'b': 2, 'c': 3 },\n *   { 'a': 4, 'b': 5, 'c': 6 }\n * ]\n *\n * find(objects, matchesProperty('a', 4))\n * // => { 'a': 4, 'b': 5, 'c': 6 }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/maxBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isSymbol.js",
            "raw": "'./isSymbol.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "maxBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "array"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "computed"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "ForOfStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "array"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "current"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "iteratee"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "value"
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "!=",
                          "left": {
                            "type": "Identifier",
                            "name": "current"
                          },
                          "right": {
                            "type": "Literal",
                            "value": null,
                            "raw": "null"
                          }
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "computed"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          },
                          "consequent": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "Identifier",
                                "name": "current"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "current"
                              }
                            },
                            "right": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isSymbol"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "current"
                                  }
                                ]
                              },
                              "prefix": true
                            }
                          },
                          "alternate": {
                            "type": "BinaryExpression",
                            "operator": ">",
                            "left": {
                              "type": "Identifier",
                              "name": "current"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "computed"
                            }
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "computed"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "current"
                              }
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "result"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "value"
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "maxBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `max` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * const objects = [{ 'n': 1 }, { 'n': 2 }]\n *\n * maxBy(objects, ({ n }) => n)\n * // => { 'n': 2 }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/mean.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseMean"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./meanBy.js",
            "raw": "'./meanBy.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "mean"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseMean"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ],
                      "body": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "mean"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Computes the mean of the values in `array`.\n *\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the mean.\n * @example\n *\n * mean([4, 2, 8, 6])\n * // => 5\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/meanBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSum"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSum.js",
            "raw": "'./.internal/baseSum.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "NAN"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "/",
                "left": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "meanBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "consequent": {
                    "type": "BinaryExpression",
                    "operator": "/",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseSum"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "array"
                        },
                        {
                          "type": "Identifier",
                          "name": "iteratee"
                        }
                      ]
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "NAN"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "meanBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "*\n * This method is like `mean` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the value to be averaged.\n * The iteratee is invoked with one argument: (value).\n *\n * @since 4.7.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {number} Returns the mean.\n * @example\n *\n * const objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }]\n *\n * meanBy(objects, ({ n }) => n)\n * // => 5\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/memoize.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "memoize"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "func"
            },
            {
              "type": "Identifier",
              "name": "resolver"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "argument": {
                        "type": "Identifier",
                        "name": "func"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "Literal",
                      "value": "function",
                      "raw": "'function'"
                    }
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "resolver"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "resolver"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ThrowStatement",
                      "argument": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "TypeError"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "Expected a function",
                            "raw": "'Expected a function'"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "memoized"
                    },
                    "init": {
                      "type": "FunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "RestElement",
                          "argument": {
                            "type": "Identifier",
                            "name": "args"
                          }
                        }
                      ],
                      "body": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                "init": {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "Identifier",
                                    "name": "resolver"
                                  },
                                  "consequent": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "resolver"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "apply"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "ThisExpression"
                                      },
                                      {
                                        "type": "Identifier",
                                        "name": "args"
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "args"
                                    },
                                    "property": {
                                      "type": "Literal",
                                      "value": 0,
                                      "raw": "0"
                                    }
                                  }
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "cache"
                                },
                                "init": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "memoized"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "cache"
                                  }
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "cache"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "has"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "key"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "cache"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "get"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "key"
                                      }
                                    ]
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "func"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "apply"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "ThisExpression"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "args"
                                    }
                                  ]
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "memoized"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "cache"
                                }
                              },
                              "right": {
                                "type": "LogicalExpression",
                                "operator": "||",
                                "left": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "cache"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "set"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "result"
                                    }
                                  ]
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "cache"
                                }
                              }
                            }
                          },
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "result"
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": false,
                      "async": false
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "memoized"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "cache"
                    }
                  },
                  "right": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "memoize"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "Cache"
                        }
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "Map"
                      }
                    },
                    "arguments": []
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "memoized"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExpressionStatement",
          "expression": {
            "type": "AssignmentExpression",
            "operator": "=",
            "left": {
              "type": "MemberExpression",
              "computed": false,
              "object": {
                "type": "Identifier",
                "name": "memoize"
              },
              "property": {
                "type": "Identifier",
                "name": "Cache"
              }
            },
            "right": {
              "type": "Identifier",
              "name": "Map"
            }
          }
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "memoize"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * const object = { 'a': 1, 'b': 2 }\n * const other = { 'c': 3, 'd': 4 }\n *\n * const values = memoize(values)\n * values(object)\n * // => [1, 2]\n *\n * values(other)\n * // => [3, 4]\n *\n * object.a = 2\n * values(object)\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b'])\n * values(object)\n * // => ['a', 'b']\n *\n * // Replace `memoize.Cache`.\n * memoize.Cache = WeakMap\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/merge.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseMerge"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseMerge.js",
            "raw": "'./.internal/baseMerge.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createAssigner"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createAssigner.js",
            "raw": "'./.internal/createAssigner.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "merge"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createAssigner"
                },
                "arguments": [
                  {
                    "type": "ArrowFunctionExpression",
                    "id": null,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "source"
                      },
                      {
                        "type": "Identifier",
                        "name": "srcIndex"
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "baseMerge"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "object"
                              },
                              {
                                "type": "Identifier",
                                "name": "source"
                              },
                              {
                                "type": "Identifier",
                                "name": "srcIndex"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "merge"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * const object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * }\n *\n * const other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * }\n *\n * merge(object, other)\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/mergeWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseMerge"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseMerge.js",
            "raw": "'./.internal/baseMerge.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createAssigner"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createAssigner.js",
            "raw": "'./.internal/createAssigner.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "mergeWith"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createAssigner"
                },
                "arguments": [
                  {
                    "type": "ArrowFunctionExpression",
                    "id": null,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "source"
                      },
                      {
                        "type": "Identifier",
                        "name": "srcIndex"
                      },
                      {
                        "type": "Identifier",
                        "name": "customizer"
                      }
                    ],
                    "body": {
                      "type": "BlockStatement",
                      "body": [
                        {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "baseMerge"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "object"
                              },
                              {
                                "type": "Identifier",
                                "name": "source"
                              },
                              {
                                "type": "Identifier",
                                "name": "srcIndex"
                              },
                              {
                                "type": "Identifier",
                                "name": "customizer"
                              }
                            ]
                          }
                        }
                      ]
                    },
                    "generator": false,
                    "expression": false,
                    "async": false
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "mergeWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `merge` except that it accepts `customizer` which\n * is invoked to produce the merged values of the destination and source\n * properties. If `customizer` returns `undefined`, merging is handled by the\n * method instead. The `customizer` is invoked with six arguments:\n * (objValue, srcValue, key, object, source, stack).\n *\n * **Note:** This method mutates `object`.\n *\n * @since 4.0.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (Array.isArray(objValue)) {\n *     return objValue.concat(srcValue)\n *   }\n * }\n *\n * const object = { 'a': [1], 'b': [2] }\n * const other = { 'a': [3], 'b': [4] }\n *\n * mergeWith(object, other, customizer)\n * // => { 'a': [1, 3], 'b': [2, 4] }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/method.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "invoke"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./invoke.js",
            "raw": "'./invoke.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "method"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "args"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    }
                  ],
                  "body": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "invoke"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "args"
                      }
                    ]
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "method"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that invokes the method at `path` of a given object.\n * Any additional arguments are provided to the invoked method.\n *\n * @since 3.7.0\n * @category Util\n * @param {Array|string} path The path of the method to invoke.\n * @param {Array} [args] The arguments to invoke the method with.\n * @returns {Function} Returns the new invoker function.\n * @example\n *\n * const objects = [\n *   { 'a': { 'b': () => 2 } },\n *   { 'a': { 'b': () => 1 } }\n * ]\n *\n * map(objects, method('a.b'))\n * // => [2, 1]\n *\n * map(objects, method(['a', 'b']))\n * // => [2, 1]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/methodOf.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "invoke"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./invoke.js",
            "raw": "'./invoke.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "methodOf"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "args"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "path"
                    }
                  ],
                  "body": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "invoke"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "args"
                      }
                    ]
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "methodOf"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The opposite of `method` this method creates a function that invokes\n * the method at a given path of `object`. Any additional arguments are\n * provided to the invoked method.\n *\n * @since 3.7.0\n * @category Util\n * @param {Object} object The object to query.\n * @param {Array} [args] The arguments to invoke the method with.\n * @returns {Function} Returns the new invoker function.\n * @example\n *\n * const array = times(3, i => () => i)\n * const object = { 'a': array, 'b': array, 'c': array }\n *\n * map(['a[2]', 'c[0]'], methodOf(object))\n * // => [2, 0]\n *\n * map([['a', '2'], ['c', '0']], methodOf(object))\n * // => [2, 0]f\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/minBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isSymbol.js",
            "raw": "'./isSymbol.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "minBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "array"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "computed"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "ForOfStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "array"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "current"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "iteratee"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "value"
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "!=",
                          "left": {
                            "type": "Identifier",
                            "name": "current"
                          },
                          "right": {
                            "type": "Literal",
                            "value": null,
                            "raw": "null"
                          }
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "===",
                            "left": {
                              "type": "Identifier",
                              "name": "computed"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "undefined"
                            }
                          },
                          "consequent": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "BinaryExpression",
                              "operator": "===",
                              "left": {
                                "type": "Identifier",
                                "name": "current"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "current"
                              }
                            },
                            "right": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isSymbol"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "current"
                                  }
                                ]
                              },
                              "prefix": true
                            }
                          },
                          "alternate": {
                            "type": "BinaryExpression",
                            "operator": "<",
                            "left": {
                              "type": "Identifier",
                              "name": "current"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "computed"
                            }
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "computed"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "current"
                              }
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "result"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "value"
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "minBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `min` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * const objects = [{ 'n': 1 }, { 'n': 2 }]\n *\n * minBy(objects, ({ n }) => n)\n * // => { 'n': 1 }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/multiply.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createMathOperation"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createMathOperation.js",
            "raw": "'./.internal/createMathOperation.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "multiply"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createMathOperation"
                },
                "arguments": [
                  {
                    "type": "ArrowFunctionExpression",
                    "id": null,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "multiplier"
                      },
                      {
                        "type": "Identifier",
                        "name": "multiplicand"
                      }
                    ],
                    "body": {
                      "type": "BinaryExpression",
                      "operator": "*",
                      "left": {
                        "type": "Identifier",
                        "name": "multiplier"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "multiplicand"
                      }
                    },
                    "generator": false,
                    "expression": true,
                    "async": false
                  },
                  {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "multiply"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Multiply two numbers.\n *\n * @since 4.7.0\n * @category Math\n * @param {number} multiplier The first number in a multiplication.\n * @param {number} multiplicand The second number in a multiplication.\n * @returns {number} Returns the product.\n * @example\n *\n * multiply(6, 4)\n * // => 24\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/negate.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "negate"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!=",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "predicate"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "function",
                    "raw": "'function'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ThrowStatement",
                      "argument": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "TypeError"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "Expected a function",
                            "raw": "'Expected a function'"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "RestElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "predicate"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "apply"
                              }
                            },
                            "arguments": [
                              {
                                "type": "ThisExpression"
                              },
                              {
                                "type": "Identifier",
                                "name": "args"
                              }
                            ]
                          },
                          "prefix": true
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "negate"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0\n * }\n *\n * filter([1, 2, 3, 4, 5, 6], negate(isEven))\n * // => [1, 3, 5]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/nth.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/isIndex.js",
            "raw": "'./.internal/isIndex.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "nth"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "n"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": null
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "+=",
                  "left": {
                    "type": "Identifier",
                    "name": "n"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "<",
                      "left": {
                        "type": "Identifier",
                        "name": "n"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "alternate": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isIndex"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "n"
                      },
                      {
                        "type": "Identifier",
                        "name": "length"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "array"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "n"
                    }
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "nth"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets the element at index `n` of `array`. If `n` is negative, the nth\n * element from the end is returned.\n *\n * @since 4.11.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=0] The index of the element to return.\n * @returns {*} Returns the nth element of `array`.\n * @example\n *\n * const array = ['a', 'b', 'c', 'd']\n *\n * nth(array, 1)\n * // => 'b'\n *\n * nth(array, -2)\n * // => 'c'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/nthArg.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "nth"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./nth.js",
            "raw": "'./nth.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "nthArg"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "n"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "RestElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ],
                  "body": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "nth"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "args"
                      },
                      {
                        "type": "Identifier",
                        "name": "n"
                      }
                    ]
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "nthArg"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that gets the argument at index `n`. If `n` is negative,\n * the nth argument from the end is returned.\n *\n * @since 4.0.0\n * @category Util\n * @param {number} [n=0] The index of the argument to return.\n * @returns {Function} Returns the new pass-thru function.\n * @example\n *\n * const func = nthArg(1)\n * func('a', 'b', 'c', 'd')\n * // => 'b'\n *\n * const func = nthArg(-2)\n * func('a', 'b', 'c', 'd')\n * // => 'c'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/once.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "before"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./before.js",
            "raw": "'./before.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "once"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "func"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "before"
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "value": 2,
                      "raw": "2"
                    },
                    {
                      "type": "Identifier",
                      "name": "func"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "once"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that is restricted to invoking `func` once. Repeat calls\n * to the function return the value of the first invocation. The `func` is\n * invoked with the `this` binding and arguments of the created function.\n *\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new restricted function.\n * @example\n *\n * const initialize = once(createApplication)\n * initialize()\n * initialize()\n * // => `createApplication` is invoked once\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/orderBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseOrderBy"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseOrderBy.js",
            "raw": "'./.internal/baseOrderBy.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "orderBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratees"
            },
            {
              "type": "Identifier",
              "name": "orders"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "collection"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "isArray"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "iteratees"
                      }
                    ]
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "iteratees"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "Identifier",
                              "name": "iteratees"
                            },
                            "right": {
                              "type": "Literal",
                              "value": null,
                              "raw": "null"
                            }
                          },
                          "consequent": {
                            "type": "ArrayExpression",
                            "elements": []
                          },
                          "alternate": {
                            "type": "ArrayExpression",
                            "elements": [
                              {
                                "type": "Identifier",
                                "name": "iteratees"
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "isArray"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "orders"
                      }
                    ]
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "orders"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "Identifier",
                              "name": "orders"
                            },
                            "right": {
                              "type": "Literal",
                              "value": null,
                              "raw": "null"
                            }
                          },
                          "consequent": {
                            "type": "ArrayExpression",
                            "elements": []
                          },
                          "alternate": {
                            "type": "ArrayExpression",
                            "elements": [
                              {
                                "type": "Identifier",
                                "name": "orders"
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseOrderBy"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "Identifier",
                      "name": "iteratees"
                    },
                    {
                      "type": "Identifier",
                      "name": "orders"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "orderBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `sortBy` except that it allows specifying the sort\n * orders of the iteratees to sort by. If `orders` is unspecified, all values\n * are sorted in ascending order. Otherwise, specify an order of \"desc\" for\n * descending or \"asc\" for ascending sort order of corresponding values.\n * You may also specify a compare function for an order.\n *\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[identity]]\n *  The iteratees to sort by.\n * @param {(string|function)[]} [orders] The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n * @see reverse\n * @example\n *\n * const users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 34 },\n *   { 'user': 'fred',   'age': 40 },\n *   { 'user': 'barney', 'age': 36 }\n * ]\n *\n * // Sort by `user` in ascending order and by `age` in descending order.\n * orderBy(users, ['user', 'age'], ['asc', 'desc'])\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n *\n * // Sort by `user` then by `age` using custom compare functions for each\n * orderBy(users, ['user', 'age'], [\n *   (a, b) => a.localeCompare(b, 'de', { sensitivity: 'base' }),\n *   (a, b) => a - b,\n * ])\n *\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/over.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "over"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "iteratees"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "RestElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "map"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "iteratees"
                            },
                            {
                              "type": "ArrowFunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                }
                              ],
                              "body": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "iteratee"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "apply"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "ThisExpression"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "args"
                                  }
                                ]
                              },
                              "generator": false,
                              "expression": true,
                              "async": false
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "over"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that invokes `iteratees` with the arguments it receives\n * and returns their results.\n *\n * @since 4.0.0\n * @category Util\n * @param {Function[]} [iteratees=[identity]]\n *  The iteratees to invoke.\n * @returns {Function} Returns the new function.\n * @example\n *\n * const func = over([Math.max, Math.min])\n *\n * func(1, 2, 3, 4)\n * // => [4, 1]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/overArgs.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "overArgs"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "func"
            },
            {
              "type": "Identifier",
              "name": "transforms"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "funcsLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "transforms"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "RestElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "init": {
                              "type": "UnaryExpression",
                              "operator": "-",
                              "argument": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                              },
                              "prefix": true
                            }
                          }
                        ],
                        "kind": "let"
                      },
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "length"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Math"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "min"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "args"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "length"
                                  }
                                },
                                {
                                  "type": "Identifier",
                                  "name": "funcsLength"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "WhileStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        },
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "computed": true,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "args"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "index"
                                  }
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "transforms"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "index"
                                      }
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "call"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "ThisExpression"
                                    },
                                    {
                                      "type": "MemberExpression",
                                      "computed": true,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "args"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "index"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "func"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "apply"
                            }
                          },
                          "arguments": [
                            {
                              "type": "ThisExpression"
                            },
                            {
                              "type": "Identifier",
                              "name": "args"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "overArgs"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that invokes `func` with its arguments transformed.\n *\n * @since 4.0.0\n * @category Function\n * @param {Function} func The function to wrap.\n * @param {Function[]} [transforms=[identity]]\n *  The argument transforms.\n * @returns {Function} Returns the new function.\n * @example\n *\n * function doubled(n) {\n *   return n * 2\n * }\n *\n * function square(n) {\n *   return n * n\n * }\n *\n * const func = overArgs((x, y) => [x, y], [square, doubled])\n *\n * func(9, 3)\n * // => [81, 6]\n *\n * func(10, 5)\n * // => [100, 10]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/overEvery.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "every"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./every.js",
            "raw": "'./every.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "overEvery"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "iteratees"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "RestElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "every"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "iteratees"
                            },
                            {
                              "type": "ArrowFunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                }
                              ],
                              "body": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "iteratee"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "apply"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "ThisExpression"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "args"
                                  }
                                ]
                              },
                              "generator": false,
                              "expression": true,
                              "async": false
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "overEvery"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that checks if **all** of the `predicates` return\n * truthy when invoked with the arguments it receives.\n *\n * @since 4.0.0\n * @category Util\n * @param {Function[]} [predicates=[identity]]\n *  The predicates to check.\n * @returns {Function} Returns the new function.\n * @example\n *\n * const func = overEvery([Boolean, isFinite])\n *\n * func('1')\n * // => true\n *\n * func(null)\n * // => false\n *\n * func(NaN)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/overSome.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "some"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./some.js",
            "raw": "'./some.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "overSome"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "iteratees"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "FunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "RestElement",
                      "argument": {
                        "type": "Identifier",
                        "name": "args"
                      }
                    }
                  ],
                  "body": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "some"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "iteratees"
                            },
                            {
                              "type": "ArrowFunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "iteratee"
                                }
                              ],
                              "body": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "iteratee"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "apply"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "ThisExpression"
                                  },
                                  {
                                    "type": "Identifier",
                                    "name": "args"
                                  }
                                ]
                              },
                              "generator": false,
                              "expression": true,
                              "async": false
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "generator": false,
                  "expression": false,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "overSome"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that checks if **any** of the `predicates` return\n * truthy when invoked with the arguments it receives.\n *\n * @since 4.0.0\n * @category Util\n * @param {Function[]} [predicates=[identity]]\n *  The predicates to check.\n * @returns {Function} Returns the new function.\n * @example\n *\n * const func = overSome([Boolean, isFinite])\n *\n * func('1')\n * // => true\n *\n * func(null)\n * // => true\n *\n * func(NaN)\n * // => false\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/pad.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createPadding"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createPadding.js",
            "raw": "'./.internal/createPadding.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringSize"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/stringSize.js",
            "raw": "'./.internal/stringSize.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "pad"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "length"
            },
            {
              "type": "Identifier",
              "name": "chars"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "strLength"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "consequent": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "stringSize"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "string"
                          }
                        ]
                      },
                      "alternate": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": ">=",
                    "left": {
                      "type": "Identifier",
                      "name": "strLength"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "Identifier",
                          "name": "string"
                        },
                        "right": {
                          "type": "Literal",
                          "value": "",
                          "raw": "''"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "mid"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "/",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "-",
                        "left": {
                          "type": "Identifier",
                          "name": "length"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "strLength"
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 2,
                        "raw": "2"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "createPadding"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Math"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "floor"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "mid"
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "name": "chars"
                        }
                      ]
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "string"
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "createPadding"
                    },
                    "arguments": [
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Math"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "ceil"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "mid"
                          }
                        ]
                      },
                      {
                        "type": "Identifier",
                        "name": "chars"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "pad"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Pads `string` on the left and right sides if it's shorter than `length`.\n * Padding characters are truncated if they can't be evenly divided by `length`.\n *\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to pad.\n * @param {number} [length=0] The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padded string.\n * @example\n *\n * pad('abc', 8)\n * // => '  abc   '\n *\n * pad('abc', 8, '_-')\n * // => '_-abc_-_'\n *\n * pad('abc', 2)\n * // => 'abc'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/padEnd.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createPadding"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createPadding.js",
            "raw": "'./.internal/createPadding.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringSize"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/stringSize.js",
            "raw": "'./.internal/stringSize.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "padEnd"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "length"
            },
            {
              "type": "Identifier",
              "name": "chars"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "strLength"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "consequent": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "stringSize"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "string"
                          }
                        ]
                      },
                      "alternate": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "<",
                      "left": {
                        "type": "Identifier",
                        "name": "strLength"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "createPadding"
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "operator": "-",
                          "left": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "strLength"
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "chars"
                        }
                      ]
                    }
                  },
                  "alternate": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "right": {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "padEnd"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Pads `string` on the right side if it's shorter than `length`. Padding\n * characters are truncated if they exceed `length`.\n *\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to pad.\n * @param {number} [length=0] The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padded string.\n * @example\n *\n * padEnd('abc', 6)\n * // => 'abc   '\n *\n * padEnd('abc', 6, '_-')\n * // => 'abc_-_'\n *\n * padEnd('abc', 2)\n * // => 'abc'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/padStart.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createPadding"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createPadding.js",
            "raw": "'./.internal/createPadding.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringSize"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/stringSize.js",
            "raw": "'./.internal/stringSize.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "padStart"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "length"
            },
            {
              "type": "Identifier",
              "name": "chars"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "strLength"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "consequent": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "stringSize"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "string"
                          }
                        ]
                      },
                      "alternate": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "<",
                      "left": {
                        "type": "Identifier",
                        "name": "strLength"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "createPadding"
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "operator": "-",
                          "left": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "strLength"
                          }
                        },
                        {
                          "type": "Identifier",
                          "name": "chars"
                        }
                      ]
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "string"
                    }
                  },
                  "alternate": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "right": {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "padStart"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Pads `string` on the left side if it's shorter than `length`. Padding\n * characters are truncated if they exceed `length`.\n *\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to pad.\n * @param {number} [length=0] The padding length.\n * @param {string} [chars=' '] The string used as padding.\n * @returns {string} Returns the padded string.\n * @example\n *\n * padStart('abc', 6)\n * // => '   abc'\n *\n * padStart('abc', 6, '_-')\n * // => '_-_abc'\n *\n * padStart('abc', 2)\n * // => 'abc'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/parseInt.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "root"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/root.js",
            "raw": "'./.internal/root.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reTrimStart"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/^\\s+/",
                "regex": {
                  "pattern": "^\\s+",
                  "flags": ""
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "nativeParseInt"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "root"
                },
                "property": {
                  "type": "Identifier",
                  "name": "parseInt"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "parseInt"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "radix"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "radix"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "radix"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    }
                  ]
                },
                "alternate": {
                  "type": "IfStatement",
                  "test": {
                    "type": "Identifier",
                    "name": "radix"
                  },
                  "consequent": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "radix"
                          },
                          "right": {
                            "type": "UnaryExpression",
                            "operator": "+",
                            "argument": {
                              "type": "Identifier",
                              "name": "radix"
                            },
                            "prefix": true
                          }
                        }
                      }
                    ]
                  },
                  "alternate": null
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "nativeParseInt"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "TemplateLiteral",
                          "quasis": [
                            {
                              "type": "TemplateElement",
                              "value": {
                                "raw": "",
                                "cooked": ""
                              },
                              "tail": false
                            },
                            {
                              "type": "TemplateElement",
                              "value": {
                                "raw": "",
                                "cooked": ""
                              },
                              "tail": true
                            }
                          ],
                          "expressions": [
                            {
                              "type": "Identifier",
                              "name": "string"
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "replace"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "reTrimStart"
                        },
                        {
                          "type": "Literal",
                          "value": "",
                          "raw": "''"
                        }
                      ]
                    },
                    {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "Identifier",
                        "name": "radix"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "parseInt"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to match leading and trailing whitespace. "
        },
        {
          "type": "Block",
          "value": " Built-in method references for those with the same name as other `lodash` methods. "
        },
        {
          "type": "Block",
          "value": "*\n * Converts `string` to an integer of the specified radix. If `radix` is\n * `undefined` or `0`, a `radix` of `10` is used unless `string` is a\n * hexadecimal, in which case a `radix` of `16` is used.\n *\n * **Note:** This method aligns with the\n * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n *\n * @since 1.1.0\n * @category String\n * @param {string} string The string to convert.\n * @param {number} [radix=10] The radix to interpret `string` by.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * parseInt('08')\n * // => 8\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/partition.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "reduce"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./reduce.js",
            "raw": "'./reduce.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "partition"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "reduce"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "result"
                        },
                        {
                          "type": "Identifier",
                          "name": "value"
                        },
                        {
                          "type": "Identifier",
                          "name": "key"
                        }
                      ],
                      "body": {
                        "type": "SequenceExpression",
                        "expressions": [
                          {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "MemberExpression",
                                "computed": true,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "predicate"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "value"
                                      }
                                    ]
                                  },
                                  "consequent": {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                  },
                                  "alternate": {
                                    "type": "Literal",
                                    "value": 1,
                                    "raw": "1"
                                  }
                                }
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "push"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "value"
                              }
                            ]
                          },
                          {
                            "type": "Identifier",
                            "name": "result"
                          }
                        ]
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    },
                    {
                      "type": "ArrayExpression",
                      "elements": [
                        {
                          "type": "ArrayExpression",
                          "elements": []
                        },
                        {
                          "type": "ArrayExpression",
                          "elements": []
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "partition"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of elements split into two groups, the first of which\n * contains elements `predicate` returns truthy for, the second of which\n * contains elements `predicate` returns falsey for. The predicate is\n * invoked with one argument: (value).\n *\n * @since 3.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the array of grouped elements.\n * @see groupBy, keyBy\n * @example\n *\n * const users = [\n *   { 'user': 'barney',  'age': 36, 'active': false },\n *   { 'user': 'fred',    'age': 40, 'active': true },\n *   { 'user': 'pebbles', 'age': 1,  'active': false }\n * ]\n *\n * partition(users, ({ active }) => active)\n * // => objects for [['fred'], ['barney', 'pebbles']]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/pick.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "basePick"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/basePick.js",
            "raw": "'./.internal/basePick.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "pick"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "paths"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "consequent": {
                    "type": "ObjectExpression",
                    "properties": []
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "basePick"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "paths"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "pick"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an object composed of the picked `object` properties.\n *\n * @since 0.1.0\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * const object = { 'a': 1, 'b': '2', 'c': 3 }\n *\n * pick(object, ['a', 'c'])\n * // => { 'a': 1, 'c': 3 }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/pickBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "basePickBy"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/basePickBy.js",
            "raw": "'./.internal/basePickBy.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getAllKeysIn"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getAllKeysIn.js",
            "raw": "'./.internal/getAllKeysIn.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "pickBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ObjectExpression",
                        "properties": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "props"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "map"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "getAllKeysIn"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            }
                          ]
                        },
                        {
                          "type": "ArrowFunctionExpression",
                          "id": null,
                          "params": [
                            {
                              "type": "Identifier",
                              "name": "prop"
                            }
                          ],
                          "body": {
                            "type": "ArrayExpression",
                            "elements": [
                              {
                                "type": "Identifier",
                                "name": "prop"
                              }
                            ]
                          },
                          "generator": false,
                          "expression": true,
                          "async": false
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "basePickBy"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    },
                    {
                      "type": "Identifier",
                      "name": "props"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        },
                        {
                          "type": "Identifier",
                          "name": "path"
                        }
                      ],
                      "body": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "predicate"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          },
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "path"
                            },
                            "property": {
                              "type": "Literal",
                              "value": 0,
                              "raw": "0"
                            }
                          }
                        ]
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "pickBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * const object = { 'a': 1, 'b': '2', 'c': 3 }\n *\n * pickBy(object, isNumber)\n * // => { 'a': 1, 'c': 3 }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/property.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseProperty"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseProperty.js",
            "raw": "'./.internal/baseProperty.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "basePropertyDeep"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/basePropertyDeep.js",
            "raw": "'./.internal/basePropertyDeep.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/isKey.js",
            "raw": "'./.internal/isKey.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/toKey.js",
            "raw": "'./.internal/toKey.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "property"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "path"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isKey"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "path"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseProperty"
                    },
                    "arguments": [
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "toKey"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "path"
                          }
                        ]
                      }
                    ]
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "basePropertyDeep"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "path"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "property"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a function that returns the value at `path` of a given object.\n *\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * const objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ]\n *\n * map(objects, property('a.b'))\n * // => [2, 1]\n *\n * map(sortBy(objects, property(['a', 'b'])), 'a.b')\n * // => [1, 2]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/propertyOf.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseGet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseGet.js",
            "raw": "'./.internal/baseGet.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "propertyOf"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ArrowFunctionExpression",
                  "id": null,
                  "params": [
                    {
                      "type": "Identifier",
                      "name": "path"
                    }
                  ],
                  "body": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "object"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "undefined"
                    },
                    "alternate": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseGet"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        },
                        {
                          "type": "Identifier",
                          "name": "path"
                        }
                      ]
                    }
                  },
                  "generator": false,
                  "expression": true,
                  "async": false
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "propertyOf"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The opposite of `property`s method creates a function that returns\n * the value at a given path of `object`.\n *\n * @since 3.0.0\n * @category Util\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * const array = [0, 1, 2]\n * const object = { 'a': array, 'b': array, 'c': array }\n *\n * map(['a[2]', 'c[0]'], propertyOf(object))\n * // => [2, 0]\n *\n * map([['a', '2'], ['c', '0']], propertyOf(object))\n * // => [2, 0]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/pull.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "pullAll"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./pullAll.js",
            "raw": "'./pullAll.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "pull"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "values"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "pullAll"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "Identifier",
                      "name": "values"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "pull"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Removes all given values from `array` using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * **Note:** Unlike `without`, this method mutates `array`. Use `remove`\n * to remove elements from an array by predicate.\n *\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {...*} [values] The values to remove.\n * @returns {Array} Returns `array`.\n * @see pullAll, pullAllBy, pullAllWith, pullAt, remove, reject\n * @example\n *\n * const array = ['a', 'b', 'c', 'a', 'b', 'c']\n *\n * pull(array, 'a', 'c')\n * console.log(array)\n * // => ['b', 'b']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/pullAll.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "basePullAll"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/basePullAll.js",
            "raw": "'./.internal/basePullAll.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "pullAll"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "values"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "!=",
                          "left": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "right": {
                            "type": "Literal",
                            "value": null,
                            "raw": "null"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "!=",
                        "left": {
                          "type": "Identifier",
                          "name": "values"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "values"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "basePullAll"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "values"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "array"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "pullAll"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `pull` except that it accepts an array of values to remove.\n *\n * **Note:** Unlike `difference`, this method mutates `array`.\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @returns {Array} Returns `array`.\n * @see pull, pullAllBy, pullAllWith, pullAt, remove, reject\n * @example\n *\n * const array = ['a', 'b', 'c', 'a', 'b', 'c']\n *\n * pullAll(array, ['a', 'c'])\n * console.log(array)\n * // => ['b', 'b']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/pullAllBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "basePullAll"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/basePullAll.js",
            "raw": "'./.internal/basePullAll.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "pullAllBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "values"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "!=",
                          "left": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "right": {
                            "type": "Literal",
                            "value": null,
                            "raw": "null"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "!=",
                        "left": {
                          "type": "Identifier",
                          "name": "values"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "values"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "basePullAll"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "values"
                      },
                      {
                        "type": "Identifier",
                        "name": "iteratee"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "array"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "pullAllBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `pullAll` except that it accepts `iteratee` which is\n * invoked for each element of `array` and `values` to generate the criterion\n * by which they're compared. The iteratee is invoked with one argument: (value).\n *\n * **Note:** Unlike `differenceBy`, this method mutates `array`.\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Array} Returns `array`.\n * @see pull, pullAll, pullAllWith, pullAt, remove, reject\n * @example\n *\n * const array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }]\n *\n * pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x')\n * console.log(array)\n * // => [{ 'x': 2 }]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/pullAllWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "basePullAll"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/basePullAll.js",
            "raw": "'./.internal/basePullAll.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "pullAllWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "values"
            },
            {
              "type": "Identifier",
              "name": "comparator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "!=",
                          "left": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "right": {
                            "type": "Literal",
                            "value": null,
                            "raw": "null"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "!=",
                        "left": {
                          "type": "Identifier",
                          "name": "values"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "values"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "basePullAll"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "values"
                      },
                      {
                        "type": "Identifier",
                        "name": "undefined"
                      },
                      {
                        "type": "Identifier",
                        "name": "comparator"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "array"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "pullAllWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `pullAll` except that it accepts `comparator` which\n * is invoked to compare elements of `array` to `values`. The comparator is\n * invoked with two arguments: (arrVal, othVal).\n *\n * **Note:** Unlike `differenceWith`, this method mutates `array`.\n *\n * @since 4.6.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Array} values The values to remove.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns `array`.\n * @see pull, pullAll, pullAllBy, pullAt, remove, reject\n * @example\n *\n * const array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }]\n *\n * pullAllWith(array, [{ 'x': 3, 'y': 4 }], isEqual)\n * console.log(array)\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/pullAt.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseAt"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseAt.js",
            "raw": "'./.internal/baseAt.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "basePullAt"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/basePullAt.js",
            "raw": "'./.internal/basePullAt.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "compareAscending"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/compareAscending.js",
            "raw": "'./.internal/compareAscending.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/isIndex.js",
            "raw": "'./.internal/isIndex.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "pullAt"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "indexes"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseAt"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "array"
                        },
                        {
                          "type": "Identifier",
                          "name": "indexes"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "basePullAt"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "map"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "indexes"
                            },
                            {
                              "type": "ArrowFunctionExpression",
                              "id": null,
                              "params": [
                                {
                                  "type": "Identifier",
                                  "name": "index"
                                }
                              ],
                              "body": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "isIndex"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "index"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "length"
                                    }
                                  ]
                                },
                                "consequent": {
                                  "type": "UnaryExpression",
                                  "operator": "+",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "index"
                                  },
                                  "prefix": true
                                },
                                "alternate": {
                                  "type": "Identifier",
                                  "name": "index"
                                }
                              },
                              "generator": false,
                              "expression": true,
                              "async": false
                            }
                          ]
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "sort"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "compareAscending"
                        }
                      ]
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "pullAt"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Removes elements from `array` corresponding to `indexes` and returns an\n * array of removed elements.\n *\n * **Note:** Unlike `at`, this method mutates `array`.\n *\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {...(number|number[])} [indexes] The indexes of elements to remove.\n * @returns {Array} Returns the new array of removed elements.\n * @see pull, pullAll, pullAllBy, pullAllWith, remove, reject\n * @example\n *\n * const array = ['a', 'b', 'c', 'd']\n * const pulled = pullAt(array, [1, 3])\n *\n * console.log(array)\n * // => ['a', 'c']\n *\n * console.log(pulled)\n * // => ['b', 'd']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/random.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toFinite"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toFinite.js",
            "raw": "'./toFinite.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "freeParseFloat"
              },
              "init": {
                "type": "Identifier",
                "name": "parseFloat"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "random"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "lower"
            },
            {
              "type": "Identifier",
              "name": "upper"
            },
            {
              "type": "Identifier",
              "name": "floating"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "floating"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "argument": {
                            "type": "Identifier",
                            "name": "upper"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "Literal",
                          "value": "boolean",
                          "raw": "'boolean'"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "floating"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "upper"
                              }
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "upper"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "==",
                          "left": {
                            "type": "UnaryExpression",
                            "operator": "typeof",
                            "argument": {
                              "type": "Identifier",
                              "name": "lower"
                            },
                            "prefix": true
                          },
                          "right": {
                            "type": "Literal",
                            "value": "boolean",
                            "raw": "'boolean'"
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "floating"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "lower"
                                }
                              }
                            },
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "lower"
                                },
                                "right": {
                                  "type": "Identifier",
                                  "name": "undefined"
                                }
                              }
                            }
                          ]
                        },
                        "alternate": null
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "lower"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "upper"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "lower"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "upper"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        }
                      }
                    }
                  ]
                },
                "alternate": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "lower"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "toFinite"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "lower"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "Identifier",
                          "name": "upper"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "upper"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "lower"
                              }
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "lower"
                              },
                              "right": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              }
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "upper"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "toFinite"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "upper"
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": ">",
                  "left": {
                    "type": "Identifier",
                    "name": "lower"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "upper"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "temp"
                          },
                          "init": {
                            "type": "Identifier",
                            "name": "lower"
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "lower"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "upper"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "upper"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "temp"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "Identifier",
                      "name": "floating"
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "%",
                      "left": {
                        "type": "Identifier",
                        "name": "lower"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "%",
                    "left": {
                      "type": "Identifier",
                      "name": "upper"
                    },
                    "right": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "rand"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Math"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "random"
                              }
                            },
                            "arguments": []
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "randLength"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "-",
                            "left": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "TemplateLiteral",
                                "quasis": [
                                  {
                                    "type": "TemplateElement",
                                    "value": {
                                      "raw": "",
                                      "cooked": ""
                                    },
                                    "tail": false
                                  },
                                  {
                                    "type": "TemplateElement",
                                    "value": {
                                      "raw": "",
                                      "cooked": ""
                                    },
                                    "tail": true
                                  }
                                ],
                                "expressions": [
                                  {
                                    "type": "Identifier",
                                    "name": "rand"
                                  }
                                ]
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "length"
                              }
                            },
                            "right": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Math"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "min"
                          }
                        },
                        "arguments": [
                          {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                              "type": "Identifier",
                              "name": "lower"
                            },
                            "right": {
                              "type": "SequenceExpression",
                              "expressions": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "*",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "rand"
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "-",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "upper"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "lower"
                                      }
                                    },
                                    "right": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "freeParseFloat"
                                      },
                                      "arguments": [
                                        {
                                          "type": "TemplateLiteral",
                                          "quasis": [
                                            {
                                              "type": "TemplateElement",
                                              "value": {
                                                "raw": "1e-",
                                                "cooked": "1e-"
                                              },
                                              "tail": false
                                            },
                                            {
                                              "type": "TemplateElement",
                                              "value": {
                                                "raw": "",
                                                "cooked": ""
                                              },
                                              "tail": true
                                            }
                                          ],
                                          "expressions": [
                                            {
                                              "type": "Identifier",
                                              "name": "randLength"
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "Identifier",
                                  "name": "upper"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Identifier",
                    "name": "lower"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Math"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "floor"
                      }
                    },
                    "arguments": [
                      {
                        "type": "BinaryExpression",
                        "operator": "*",
                        "left": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Math"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "random"
                            }
                          },
                          "arguments": []
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "-",
                            "left": {
                              "type": "Identifier",
                              "name": "upper"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "lower"
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "random"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Built-in method references without a dependency on `root`. "
        },
        {
          "type": "Block",
          "value": "*\n * Produces a random number between the inclusive `lower` and `upper` bounds.\n * If only one argument is provided a number between `0` and the given number\n * is returned. If `floating` is `true`, or either `lower` or `upper` are\n * floats, a floating-point number is returned instead of an integer.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @since 0.7.0\n * @category Number\n * @param {number} [lower=0] The lower bound.\n * @param {number} [upper=1] The upper bound.\n * @param {boolean} [floating] Specify returning a floating-point number.\n * @returns {number} Returns the random number.\n * @see uniqueId\n * @example\n *\n * random(0, 5)\n * // => an integer between 0 and 5\n *\n * random(5)\n * // => also an integer between 0 and 5\n *\n * random(5, true)\n * // => a floating-point number between 0 and 5\n *\n * random(1.2, 5.2)\n * // => a floating-point number between 1.2 and 5.2\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/range.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createRange"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createRange.js",
            "raw": "'./.internal/createRange.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "range"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createRange"
                },
                "arguments": []
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "range"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of numbers (positive and/or negative) progressing from\n * `start` up to, but not including, `end`. A step of `-1` is used if a negative\n * `start` is specified without an `end` or `step`. If `end` is not specified,\n * it's set to `start`, and `start` is then set to `0`.\n *\n * **Note:** JavaScript follows the IEEE-754 standard for resolving\n * floating-point values which can produce unexpected results.\n *\n * @since 0.1.0\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see inRange, rangeRight\n * @example\n *\n * range(4)\n * // => [0, 1, 2, 3]\n *\n * range(-4)\n * // => [0, -1, -2, -3]\n *\n * range(1, 5)\n * // => [1, 2, 3, 4]\n *\n * range(0, 20, 5)\n * // => [0, 5, 10, 15]\n *\n * range(0, -4, -1)\n * // => [0, -1, -2, -3]\n *\n * range(1, 4, 0)\n * // => [1, 1, 1]\n *\n * range(0)\n * // => []\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/rangeRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createRange"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createRange.js",
            "raw": "'./.internal/createRange.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "rangeRight"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createRange"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "value": true,
                    "raw": "true"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "rangeRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `range` except that it populates values in\n * descending order.\n *\n * @since 4.0.0\n * @category Util\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @param {number} [step=1] The value to increment or decrement by.\n * @returns {Array} Returns the range of numbers.\n * @see inRange, range\n * @example\n *\n * rangeRight(4)\n * // => [3, 2, 1, 0]\n *\n * rangeRight(-4)\n * // => [-3, -2, -1, 0]\n *\n * rangeRight(1, 5)\n * // => [4, 3, 2, 1]\n *\n * rangeRight(0, 20, 5)\n * // => [15, 10, 5, 0]\n *\n * rangeRight(0, -4, -1)\n * // => [-3, -2, -1, 0]\n *\n * rangeRight(1, 4, 0)\n * // => [1, 1, 1]\n *\n * rangeRight(0)\n * // => []\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/reduce.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayReduce"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/arrayReduce.js",
            "raw": "'./.internal/arrayReduce.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseEach"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseEach.js",
            "raw": "'./.internal/baseEach.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseReduce"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseReduce.js",
            "raw": "'./.internal/baseReduce.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "reduce"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "accumulator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "isArray"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "collection"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "arrayReduce"
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "baseReduce"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "initAccum"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "<",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "arguments"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 3,
                        "raw": "3"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "func"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    },
                    {
                      "type": "Identifier",
                      "name": "accumulator"
                    },
                    {
                      "type": "Identifier",
                      "name": "initAccum"
                    },
                    {
                      "type": "Identifier",
                      "name": "baseEach"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "reduce"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Reduces `collection` to a value which is the accumulated result of running\n * each element in `collection` thru `iteratee`, where each successive\n * invocation is supplied the return value of the previous. If `accumulator`\n * is not given, the first element of `collection` is used as the initial\n * value. The iteratee is invoked with four arguments:\n * (accumulator, value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `reduce`, `reduceRight`, and `transform`.\n *\n * The guarded methods are:\n * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n * and `sortBy`\n *\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @returns {*} Returns the accumulated value.\n * @see reduceRight, transform\n * @example\n *\n * reduce([1, 2], (sum, n) => sum + n, 0)\n * // => 3\n *\n * reduce({ 'a': 1, 'b': 2, 'c': 1 }, (result, value, key) => {\n *   (result[value] || (result[value] = [])).push(key)\n *   return result\n * }, {})\n * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/reduceRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayReduceRight"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/arrayReduceRight.js",
            "raw": "'./.internal/arrayReduceRight.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseEachRight"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseEachRight.js",
            "raw": "'./.internal/baseEachRight.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseReduce"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseReduce.js",
            "raw": "'./.internal/baseReduce.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "reduceRight"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "accumulator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "isArray"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "collection"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "arrayReduceRight"
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "baseReduce"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "initAccum"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "<",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "arguments"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 3,
                        "raw": "3"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "func"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    },
                    {
                      "type": "Identifier",
                      "name": "accumulator"
                    },
                    {
                      "type": "Identifier",
                      "name": "initAccum"
                    },
                    {
                      "type": "Identifier",
                      "name": "baseEachRight"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "reduceRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `reduce` except that it iterates over elements of\n * `collection` from right to left.\n *\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @returns {*} Returns the accumulated value.\n * @see reduce\n * @example\n *\n * const array = [[0, 1], [2, 3], [4, 5]]\n *\n * reduceRight(array, (flattened, other) => flattened.concat(other), [])\n * // => [4, 5, 2, 3, 0, 1]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/reject.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "filter"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./filter.js",
            "raw": "'./filter.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "filterObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./filterObject.js",
            "raw": "'./filterObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "negate"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./negate.js",
            "raw": "'./negate.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "reject"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "Array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "isArray"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "collection"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "filter"
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "filterObject"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "func"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    },
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "negate"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "predicate"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "reject"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * The opposite of `filter` this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see pull, pullAll, pullAllBy, pullAllWith, pullAt, remove, filter\n * @example\n *\n * const users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ]\n *\n * reject(users, ({ active }) => active)\n * // => objects for ['fred']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/remove.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "basePullAt"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/basePullAt.js",
            "raw": "'./.internal/basePullAt.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "remove"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "indexes"
                    },
                    "init": {
                      "type": "ArrayExpression",
                      "elements": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "array"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "predicate"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          },
                          {
                            "type": "Identifier",
                            "name": "index"
                          },
                          {
                            "type": "Identifier",
                            "name": "array"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "push"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "indexes"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "push"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "index"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "basePullAt"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "Identifier",
                      "name": "indexes"
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "remove"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Removes all elements from `array` that `predicate` returns truthy for\n * and returns an array of the removed elements. The predicate is invoked\n * with three arguments: (value, index, array).\n *\n * **Note:** Unlike `filter`, this method mutates `array`. Use `pull`\n * to pull elements from an array by value.\n *\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to modify.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new array of removed elements.\n * @see pull, pullAll, pullAllBy, pullAllWith, pullAt, reject, filter\n * @example\n *\n * const array = [1, 2, 3, 4]\n * const evens = remove(array, n => n % 2 == 0)\n *\n * console.log(array)\n * // => [1, 3]\n *\n * console.log(evens)\n * // => [2, 4]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/repeat.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "repeat"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "n"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "argument": {
                        "type": "Identifier",
                        "name": "string"
                      },
                      "prefix": true
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "<",
                      "left": {
                        "type": "Identifier",
                        "name": "n"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": ">",
                    "left": {
                      "type": "Identifier",
                      "name": "n"
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Number"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "MAX_SAFE_INTEGER"
                      }
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "result"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "DoWhileStatement",
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "%",
                        "left": {
                          "type": "Identifier",
                          "name": "n"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 2,
                          "raw": "2"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "+=",
                              "left": {
                                "type": "Identifier",
                                "name": "result"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "string"
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "n"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "Math"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "floor"
                            }
                          },
                          "arguments": [
                            {
                              "type": "BinaryExpression",
                              "operator": "/",
                              "left": {
                                "type": "Identifier",
                                "name": "n"
                              },
                              "right": {
                                "type": "Literal",
                                "value": 2,
                                "raw": "2"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "n"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "+=",
                              "left": {
                                "type": "Identifier",
                                "name": "string"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "string"
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                },
                "test": {
                  "type": "Identifier",
                  "name": "n"
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "repeat"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Repeats the given string `n` times.\n *\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to repeat.\n * @param {number} [n=1] The number of times to repeat the string.\n * @returns {string} Returns the repeated string.\n * @example\n *\n * repeat('*', 3)\n * // => '***'\n *\n * repeat('abc', 2)\n * // => 'abcabc'\n *\n * repeat('abc', 0)\n * // => ''\n "
        },
        {
          "type": "Line",
          "value": " Leverage the exponentiation by squaring algorithm for a faster repeat."
        },
        {
          "type": "Line",
          "value": " See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/replace.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "replace"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "args"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "init": {
                      "type": "TemplateLiteral",
                      "quasis": [
                        {
                          "type": "TemplateElement",
                          "value": {
                            "raw": "",
                            "cooked": ""
                          },
                          "tail": false
                        },
                        {
                          "type": "TemplateElement",
                          "value": {
                            "raw": "",
                            "cooked": ""
                          },
                          "tail": true
                        }
                      ],
                      "expressions": [
                        {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "args"
                          },
                          "property": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "args"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": 3,
                      "raw": "3"
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "string"
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "string"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "replace"
                      }
                    },
                    "arguments": [
                      {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "args"
                        },
                        "property": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        }
                      },
                      {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "args"
                        },
                        "property": {
                          "type": "Literal",
                          "value": 2,
                          "raw": "2"
                        }
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "replace"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Replaces matches for `pattern` in `string` with `replacement`.\n *\n * **Note:** This method is based on\n * [`String#replace`](https://mdn.io/String/replace).\n *\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to modify.\n * @param {RegExp|string} pattern The pattern to replace.\n * @param {Function|string} replacement The match replacement.\n * @returns {string} Returns the modified string.\n * @see truncate, trim\n * @example\n *\n * replace('Hi Fred', 'Fred', 'Barney')\n * // => 'Hi Barney'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/result.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castPath"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/castPath.js",
            "raw": "'./.internal/castPath.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/toKey.js",
            "raw": "'./.internal/toKey.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "result"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "defaultValue"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "path"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "castPath"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "path"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "length"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "object"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "init": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "==",
                              "left": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "right": {
                                "type": "Literal",
                                "value": null,
                                "raw": "null"
                              }
                            },
                            "consequent": {
                              "type": "Identifier",
                              "name": "undefined"
                            },
                            "alternate": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "property": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "toKey"
                                },
                                "arguments": [
                                  {
                                    "type": "MemberExpression",
                                    "computed": true,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "path"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "index"
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      ],
                      "kind": "let"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "index"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "length"
                              }
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "defaultValue"
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "object"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "==",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "typeof",
                              "argument": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "Literal",
                              "value": "function",
                              "raw": "'function'"
                            }
                          },
                          "consequent": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "call"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "object"
                              }
                            ]
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "value"
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "object"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "result"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `get` except that if the resolved value is a\n * function it's invoked with the `this` binding of its parent object and\n * its result is returned.\n *\n * @since 0.1.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to resolve.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * const object = { 'a': [{ 'b': { 'c1': 3, 'c2': () => 4 } }] }\n *\n * result(object, 'a[0].b.c1')\n * // => 3\n *\n * result(object, 'a[0].b.c2')\n * // => 4\n *\n * result(object, 'a[0].b.c3', 'default')\n * // => 'default'\n *\n * result(object, 'a[0].b.c3', () => 'default')\n * // => 'default'\n "
        },
        {
          "type": "Line",
          "value": " Ensure the loop is entered when path is empty."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/round.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createRound"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createRound.js",
            "raw": "'./.internal/createRound.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "round"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createRound"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "value": "round",
                    "raw": "'round'"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "round"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Computes `number` rounded to `precision`.\n *\n * @since 3.10.0\n * @category Math\n * @param {number} number The number to round.\n * @param {number} [precision=0] The precision to round to.\n * @returns {number} Returns the rounded number.\n * @example\n *\n * round(4.006)\n * // => 4\n *\n * round(4.006, 2)\n * // => 4.01\n *\n * round(4060, -2)\n * // => 4100\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/sample.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "sample"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "consequent": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "array"
                    },
                    "property": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Math"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "floor"
                        }
                      },
                      "arguments": [
                        {
                          "type": "BinaryExpression",
                          "operator": "*",
                          "left": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "Math"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "random"
                              }
                            },
                            "arguments": []
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        }
                      ]
                    }
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "sample"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets a random element from `array`.\n *\n * @since 2.0.0\n * @category Array\n * @param {Array} array The array to sample.\n * @returns {*} Returns the random element.\n * @example\n *\n * sample([1, 2, 3, 4])\n * // => 2\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/sampleSize.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "copyArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/copyArray.js",
            "raw": "'./.internal/copyArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "slice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./slice.js",
            "raw": "'./slice.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "sampleSize"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "n"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "n"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "n"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "n"
                    }
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "Identifier",
                      "name": "n"
                    },
                    "right": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "n"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": ">",
                      "left": {
                        "type": "Identifier",
                        "name": "n"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "n"
                    }
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "lastIndex"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "copyArray"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "array"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "n"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "rand"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Math"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "floor"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "*",
                                  "left": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "Math"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "random"
                                      }
                                    },
                                    "arguments": []
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "-",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "lastIndex"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "index"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 1,
                                      "raw": "1"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "rand"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "rand"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "value"
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "slice"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "result"
                    },
                    {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    },
                    {
                      "type": "Identifier",
                      "name": "n"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "sampleSize"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets `n` random elements at unique keys from `array` up to the\n * size of `array`.\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to sample.\n * @param {number} [n=1] The number of elements to sample.\n * @returns {Array} Returns the random elements.\n * @example\n *\n * sampleSize([1, 2, 3], 2)\n * // => [3, 1]\n *\n * sampleSize([1, 2, 3], 4)\n * // => [2, 3, 1]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/set.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSet.js",
            "raw": "'./.internal/baseSet.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "set"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseSet"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "set"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @see has, hasIn, get, unset\n * @example\n *\n * const object = { 'a': [{ 'b': { 'c': 3 } }] }\n *\n * set(object, 'a[0].b.c', 4)\n * console.log(object.a[0].b.c)\n * // => 4\n *\n * set(object, ['x', '0', 'y', 'z'], 5)\n * console.log(object.x[0].y.z)\n * // => 5\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/setWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSet.js",
            "raw": "'./.internal/baseSet.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "setWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "customizer"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "customizer"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "customizer"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseSet"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "value"
                      },
                      {
                        "type": "Identifier",
                        "name": "customizer"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "setWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `set` except that it accepts `customizer` which is\n * invoked to produce the objects of `path`. If `customizer` returns `undefined`\n * path creation is handled by the method instead. The `customizer` is invoked\n * with three arguments: (nsValue, key, nsObject).\n *\n * **Note:** This method mutates `object`.\n *\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * const object = {}\n *\n * setWith(object, '[0][1]', 'a', Object)\n * // => { '0': { '1': 'a' } }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/shuffle.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "copyArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/copyArray.js",
            "raw": "'./.internal/copyArray.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "shuffle"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "lastIndex"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "copyArray"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "array"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "rand"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "Math"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "floor"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "BinaryExpression",
                                  "operator": "*",
                                  "left": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "Math"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "random"
                                      }
                                    },
                                    "arguments": []
                                  },
                                  "right": {
                                    "type": "BinaryExpression",
                                    "operator": "+",
                                    "left": {
                                      "type": "BinaryExpression",
                                      "operator": "-",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "lastIndex"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "index"
                                      }
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": 1,
                                      "raw": "1"
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "init": {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "rand"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "rand"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "value"
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "shuffle"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * shuffle([1, 2, 3, 4])\n * // => [4, 1, 3, 2]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/size.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLike.js",
            "raw": "'./isArrayLike.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isString"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isString.js",
            "raw": "'./isString.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringSize"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/stringSize.js",
            "raw": "'./.internal/stringSize.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "mapTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Map]",
                "raw": "'[object Map]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "setTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Set]",
                "raw": "'[object Set]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "size"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "collection"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "collection"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isArrayLike"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "collection"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "isString"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "collection"
                            }
                          ]
                        },
                        "consequent": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "stringSize"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "collection"
                            }
                          ]
                        },
                        "alternate": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "collection"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "tag"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getTag"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "collection"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "tag"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "mapTag"
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "tag"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "setTag"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "collection"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "size"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "Object"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "keys"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "collection"
                      }
                    ]
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "length"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "size"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* `Object#toString` result references. "
        },
        {
          "type": "Block",
          "value": "*\n * Gets the size of `collection` by returning its length for array-like\n * values or the number of own enumerable string keyed properties for objects.\n *\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @returns {number} Returns the collection size.\n * @example\n *\n * size([1, 2, 3])\n * // => 3\n *\n * size({ 'a': 1, 'b': 2 })\n * // => 2\n *\n * size('pebbles')\n * // => 7\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/slice.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "slice"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "start"
            },
            {
              "type": "Identifier",
              "name": "end"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "start"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "start"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "start"
                    }
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "end"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "end"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "end"
                    }
                  }
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "start"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "start"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": ">",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "-",
                              "argument": {
                                "type": "Identifier",
                                "name": "start"
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "length"
                            }
                          },
                          "consequent": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          },
                          "alternate": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                              "type": "Identifier",
                              "name": "length"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "start"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "end"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": ">",
                      "left": {
                        "type": "Identifier",
                        "name": "end"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "end"
                    }
                  }
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "end"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "+=",
                        "left": {
                          "type": "Identifier",
                          "name": "end"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": ">",
                      "left": {
                        "type": "Identifier",
                        "name": "start"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "end"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    },
                    "alternate": {
                      "type": "BinaryExpression",
                      "operator": ">>>",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "-",
                        "left": {
                          "type": "Identifier",
                          "name": "end"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "start"
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": ">>>=",
                  "left": {
                    "type": "Identifier",
                    "name": "start"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0"
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "length"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "array"
                          },
                          "property": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "start"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "slice"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a slice of `array` from `start` up to, but not including, `end`.\n *\n * **Note:** This method is used instead of\n * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n * returned.\n *\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position. A negative index will be treated as an offset from the end.\n * @param {number} [end=array.length] The end position. A negative index will be treated as an offset from the end.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * var array = [1, 2, 3, 4]\n *\n * _.slice(array, 2)\n * // => [3, 4]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/snakeCase.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "words"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./words.js",
            "raw": "'./words.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toString"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toString.js",
            "raw": "'./toString.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "snakeCase"
              },
              "init": {
                "type": "ArrowFunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "string"
                  }
                ],
                "body": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "words"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "toString"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "string"
                                }
                              ]
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "replace"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": {},
                              "raw": "/['\\u2019]/g",
                              "regex": {
                                "pattern": "['\\u2019]",
                                "flags": "g"
                              }
                            },
                            {
                              "type": "Literal",
                              "value": "",
                              "raw": "''"
                            }
                          ]
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "reduce"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "result"
                        },
                        {
                          "type": "Identifier",
                          "name": "word"
                        },
                        {
                          "type": "Identifier",
                          "name": "index"
                        }
                      ],
                      "body": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "consequent": {
                              "type": "Literal",
                              "value": "_",
                              "raw": "'_'"
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": "",
                              "raw": "''"
                            }
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "word"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "toLowerCase"
                            }
                          },
                          "arguments": []
                        }
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    },
                    {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  ]
                },
                "generator": false,
                "expression": true,
                "async": false
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "snakeCase"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `string` to\n * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n *\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the snake cased string.\n * @see camelCase, lowerCase, kebabCase, startCase, upperCase, upperFirst\n * @example\n *\n * snakeCase('Foo Bar')\n * // => 'foo_bar'\n *\n * snakeCase('fooBar')\n * // => 'foo_bar'\n *\n * snakeCase('--FOO-BAR--')\n * // => 'foo_bar'\n *\n * snakeCase('foo2bar')\n * // => 'foo_2_bar'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/some.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "some"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "predicate"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "array"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "index"
                          },
                          {
                            "type": "Identifier",
                            "name": "array"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": true,
                              "raw": "true"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Literal",
                  "value": false,
                  "raw": "false"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "some"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `predicate` returns truthy for **any** element of `array`.\n * Iteration is stopped once `predicate` returns truthy. The predicate is\n * invoked with three arguments: (value, index, array).\n *\n * @since 5.0.0\n * @category Array\n * @param {Array} array The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n * @example\n *\n * some([null, 0, 'yes', false], Boolean)\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/someValue.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "someValues"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "props"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Object"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "keys"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ForOfStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "key"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "props"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "predicate"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "key"
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "key"
                          },
                          {
                            "type": "Identifier",
                            "name": "object"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Literal",
                              "value": true,
                              "raw": "true"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Literal",
                  "value": false,
                  "raw": "false"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "someValues"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `predicate` returns truthy for **any** element of `object`.\n * Iteration is stopped once `predicate` returns truthy. The predicate is\n * invoked with three arguments: (value, key, object).\n *\n * @since 5.0.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n * @example\n *\n * someValues({ 'a': 0, 'b': 'yes', 'c': false }, Boolean)\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/sortedIndex.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSortedIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSortedIndex.js",
            "raw": "'./.internal/baseSortedIndex.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "sortedIndex"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseSortedIndex"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "sortedIndex"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Uses a binary search to determine the lowest index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n * @example\n *\n * sortedIndex([30, 50], 40)\n * // => 1\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/sortedIndexBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSortedIndexBy"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSortedIndexBy.js",
            "raw": "'./.internal/baseSortedIndexBy.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "sortedIndexBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseSortedIndexBy"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "sortedIndexBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `sortedIndex` except that it accepts `iteratee`\n * which is invoked for `value` and each element of `array` to compute their\n * sort ranking. The iteratee is invoked with one argument: (value).\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n * @example\n *\n * const objects = [{ 'n': 4 }, { 'n': 5 }]\n *\n * sortedIndexBy(objects, { 'n': 4 }, ({ n }) => n)\n * // => 0\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/sortedIndexOf.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSortedIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSortedIndex.js",
            "raw": "'./.internal/baseSortedIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "eq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./eq.js",
            "raw": "'./eq.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "sortedIndexOf"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "length"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "index"
                          },
                          "init": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "baseSortedIndex"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "array"
                              },
                              {
                                "type": "Identifier",
                                "name": "value"
                              }
                            ]
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "<",
                          "left": {
                            "type": "Identifier",
                            "name": "index"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "eq"
                          },
                          "arguments": [
                            {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "index"
                              }
                            },
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "UnaryExpression",
                  "operator": "-",
                  "argument": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1"
                  },
                  "prefix": true
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "sortedIndexOf"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `indexOf` except that it performs a binary\n * search on a sorted `array`.\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * sortedIndexOf([4, 5, 5, 5, 6], 5)\n * // => 1\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/sortedLastIndex.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSortedIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSortedIndex.js",
            "raw": "'./.internal/baseSortedIndex.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "sortedLastIndex"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseSortedIndex"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "Literal",
                      "value": true,
                      "raw": "true"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "sortedLastIndex"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `sortedIndex` except that it returns the highest\n * index at which `value` should be inserted into `array` in order to\n * maintain its sort order.\n *\n * @since 3.0.0\n * @category Array\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n * @example\n *\n * sortedLastIndex([4, 5, 5, 5, 6], 5)\n * // => 4\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/sortedLastIndexBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSortedIndexBy"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSortedIndexBy.js",
            "raw": "'./.internal/baseSortedIndexBy.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "sortedLastIndexBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseSortedIndexBy"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "Identifier",
                      "name": "value"
                    },
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    },
                    {
                      "type": "Literal",
                      "value": true,
                      "raw": "true"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "sortedLastIndexBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `sortedLastIndex` except that it accepts `iteratee`\n * which is invoked for `value` and each element of `array` to compute their\n * sort ranking. The iteratee is invoked with one argument: (value).\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n * @example\n *\n * const objects = [{ 'n': 4 }, { 'n': 5 }]\n *\n * sortedLastIndexBy(objects, { 'n': 4 }, ({ n }) => n)\n * // => 1\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/sortedLastIndexOf.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSortedIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSortedIndex.js",
            "raw": "'./.internal/baseSortedIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "eq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./eq.js",
            "raw": "'./eq.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "sortedLastIndexOf"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "length"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "index"
                          },
                          "init": {
                            "type": "BinaryExpression",
                            "operator": "-",
                            "left": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "baseSortedIndex"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "array"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                {
                                  "type": "Literal",
                                  "value": true,
                                  "raw": "true"
                                }
                              ]
                            },
                            "right": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "eq"
                        },
                        "arguments": [
                          {
                            "type": "MemberExpression",
                            "computed": true,
                            "object": {
                              "type": "Identifier",
                              "name": "array"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "index"
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "UnaryExpression",
                  "operator": "-",
                  "argument": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1"
                  },
                  "prefix": true
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "sortedLastIndexOf"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `lastIndexOf` except that it performs a binary\n * search on a sorted `array`.\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * sortedLastIndexOf([4, 5, 5, 5, 6], 5)\n * // => 3\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/sortedUniq.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSortedUniq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSortedUniq.js",
            "raw": "'./.internal/baseSortedUniq.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "sortedUniq"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseSortedUniq"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "sortedUniq"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `uniq` except that it only works\n * for sorted arrays.\n * If the input array is known to be sorted `sortedUniq` is\n * faster than `uniq`.\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * sortedUniq([1, 1, 2])\n * // => [1, 2]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/sortedUniqBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSortedUniq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSortedUniq.js",
            "raw": "'./.internal/baseSortedUniq.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "sortedUniqBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseSortedUniq"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "iteratee"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "sortedUniqBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `uniqBy` except that it's designed and optimized\n * for sorted arrays.\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor)\n * // => [1.1, 2.3]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/split.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castSlice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/castSlice.js",
            "raw": "'./.internal/castSlice.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "hasUnicode"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/hasUnicode.js",
            "raw": "'./.internal/hasUnicode.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isRegExp"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isRegExp.js",
            "raw": "'./isRegExp.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/stringToArray.js",
            "raw": "'./.internal/stringToArray.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "MAX_ARRAY_LENGTH"
              },
              "init": {
                "type": "Literal",
                "value": 4294967295,
                "raw": "4294967295"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "split"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "separator"
            },
            {
              "type": "Identifier",
              "name": "limit"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "limit"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Identifier",
                        "name": "limit"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "MAX_ARRAY_LENGTH"
                    },
                    "alternate": {
                      "type": "BinaryExpression",
                      "operator": ">>>",
                      "left": {
                        "type": "Identifier",
                        "name": "limit"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  }
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "limit"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "string"
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "separator"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "string",
                        "raw": "'string'"
                      }
                    },
                    "right": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "!=",
                        "left": {
                          "type": "Identifier",
                          "name": "separator"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "right": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "argument": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "isRegExp"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "separator"
                            }
                          ]
                        },
                        "prefix": true
                      }
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "!",
                          "argument": {
                            "type": "Identifier",
                            "name": "separator"
                          },
                          "prefix": true
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "hasUnicode"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "string"
                            }
                          ]
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "castSlice"
                              },
                              "arguments": [
                                {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "stringToArray"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "string"
                                    }
                                  ]
                                },
                                {
                                  "type": "Literal",
                                  "value": 0,
                                  "raw": "0"
                                },
                                {
                                  "type": "Identifier",
                                  "name": "limit"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "split"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "separator"
                    },
                    {
                      "type": "Identifier",
                      "name": "limit"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "split"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for the maximum length and index of an array. "
        },
        {
          "type": "Block",
          "value": "*\n * Splits `string` by `separator`.\n *\n * **Note:** This method is based on\n * [`String#split`](https://mdn.io/String/split).\n *\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to split.\n * @param {RegExp|string} separator The separator pattern to split by.\n * @param {number} [limit] The length to truncate results to.\n * @returns {Array} Returns the string segments.\n * @example\n *\n * split('a-b-c', '-', 2)\n * // => ['a', 'b']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/startCase.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "upperFirst"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./upperFirst.js",
            "raw": "'./upperFirst.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "words"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./words.js",
            "raw": "'./words.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "startCase"
              },
              "init": {
                "type": "ArrowFunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "string"
                  }
                ],
                "body": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "words"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "TemplateLiteral",
                              "quasis": [
                                {
                                  "type": "TemplateElement",
                                  "value": {
                                    "raw": "",
                                    "cooked": ""
                                  },
                                  "tail": false
                                },
                                {
                                  "type": "TemplateElement",
                                  "value": {
                                    "raw": "",
                                    "cooked": ""
                                  },
                                  "tail": true
                                }
                              ],
                              "expressions": [
                                {
                                  "type": "Identifier",
                                  "name": "string"
                                }
                              ]
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "replace"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": {},
                              "raw": "/['\\u2019]/g",
                              "regex": {
                                "pattern": "['\\u2019]",
                                "flags": "g"
                              }
                            },
                            {
                              "type": "Literal",
                              "value": "",
                              "raw": "''"
                            }
                          ]
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "reduce"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "result"
                        },
                        {
                          "type": "Identifier",
                          "name": "word"
                        },
                        {
                          "type": "Identifier",
                          "name": "index"
                        }
                      ],
                      "body": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "consequent": {
                              "type": "Literal",
                              "value": " ",
                              "raw": "' '"
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": "",
                              "raw": "''"
                            }
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "upperFirst"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "word"
                            }
                          ]
                        }
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    },
                    {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  ]
                },
                "generator": false,
                "expression": true,
                "async": false
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "startCase"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `string` to\n * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).\n *\n * @since 3.1.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the start cased string.\n * @see camelCase, lowerCase, kebabCase, snakeCase, upperCase, upperFirst\n * @example\n *\n * startCase('--foo-bar--')\n * // => 'Foo Bar'\n *\n * startCase('fooBar')\n * // => 'Foo Bar'\n *\n * startCase('__FOO_BAR__')\n * // => 'FOO BAR'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/startsWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "startsWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "target"
            },
            {
              "type": "Identifier",
              "name": "position"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ObjectPattern",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "string"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "position"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "position"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "position"
                    }
                  }
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "position"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "position"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    }
                  ]
                },
                "alternate": {
                  "type": "IfStatement",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": ">",
                    "left": {
                      "type": "Identifier",
                      "name": "position"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "length"
                    }
                  },
                  "consequent": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "position"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        }
                      }
                    ]
                  },
                  "alternate": null
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "target"
                  },
                  "right": {
                    "type": "TemplateLiteral",
                    "quasis": [
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "",
                          "cooked": ""
                        },
                        "tail": false
                      },
                      {
                        "type": "TemplateElement",
                        "value": {
                          "raw": "",
                          "cooked": ""
                        },
                        "tail": true
                      }
                    ],
                    "expressions": [
                      {
                        "type": "Identifier",
                        "name": "target"
                      }
                    ]
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "string"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "slice"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "position"
                      },
                      {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "Identifier",
                          "name": "position"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "target"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        }
                      }
                    ]
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "target"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "startsWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Checks if `string` starts with the given target string.\n *\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {string} [target] The string to search for.\n * @param {number} [position=0] The position to search from.\n * @returns {boolean} Returns `true` if `string` starts with `target`,\n *  else `false`.\n * @see endsWith, includes\n * @example\n *\n * startsWith('abc', 'a')\n * // => true\n *\n * startsWith('abc', 'b')\n * // => false\n *\n * startsWith('abc', 'b', 1)\n * // => true\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/subtract.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createMathOperation"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createMathOperation.js",
            "raw": "'./.internal/createMathOperation.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "subtract"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createMathOperation"
                },
                "arguments": [
                  {
                    "type": "ArrowFunctionExpression",
                    "id": null,
                    "params": [
                      {
                        "type": "Identifier",
                        "name": "minuend"
                      },
                      {
                        "type": "Identifier",
                        "name": "subtrahend"
                      }
                    ],
                    "body": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "Identifier",
                        "name": "minuend"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "subtrahend"
                      }
                    },
                    "generator": false,
                    "expression": true,
                    "async": false
                  },
                  {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "subtract"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Subtract two numbers.\n *\n * @since 4.0.0\n * @category Math\n * @param {number} minuend The first number in a subtraction.\n * @param {number} subtrahend The second number in a subtraction.\n * @returns {number} Returns the difference.\n * @example\n *\n * subtract(6, 4)\n * // => 2\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/sum.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSum"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSum.js",
            "raw": "'./.internal/baseSum.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "sum"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseSum"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ],
                        "body": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "generator": false,
                        "expression": true,
                        "async": false
                      }
                    ]
                  },
                  "alternate": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "sum"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Computes the sum of the values in `array`.\n *\n * @since 3.4.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {number} Returns the sum.\n * @example\n *\n * sum([4, 2, 8, 6])\n * // => 20\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/sumBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSum"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSum.js",
            "raw": "'./.internal/baseSum.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "sumBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseSum"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "iteratee"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "sumBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `sum` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the value to be summed.\n * The iteratee is invoked with one argument: (value).\n *\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {number} Returns the sum.\n * @example\n *\n * const objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }]\n *\n * sumBy(objects, ({ n }) => n)\n * // => 20\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/tail.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "tail"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "ArrayPattern",
                      "elements": [
                        null,
                        {
                          "type": "RestElement",
                          "argument": {
                            "type": "Identifier",
                            "name": "result"
                          }
                        }
                      ]
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "array"
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "tail"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Gets all but the first element of `array`.\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * tail([1, 2, 3])\n * // => [2, 3]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/take.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "slice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./slice.js",
            "raw": "'./slice.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "take"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "AssignmentPattern",
              "left": {
                "type": "Identifier",
                "name": "n"
              },
              "right": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "slice"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    },
                    {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "<",
                        "left": {
                          "type": "Identifier",
                          "name": "n"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "n"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "take"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a slice of `array` with `n` elements taken from the beginning.\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to take.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * take([1, 2, 3])\n * // => [1]\n *\n * take([1, 2, 3], 2)\n * // => [1, 2]\n *\n * take([1, 2, 3], 5)\n * // => [1, 2, 3]\n *\n * take([1, 2, 3], 0)\n * // => []\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/takeRight.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "slice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./slice.js",
            "raw": "'./slice.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "takeRight"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "AssignmentPattern",
              "left": {
                "type": "Identifier",
                "name": "n"
              },
              "right": {
                "type": "Literal",
                "value": 1,
                "raw": "1"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "raw": "null"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "n"
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "-",
                    "left": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "n"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "slice"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "array"
                    },
                    {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "<",
                        "left": {
                          "type": "Identifier",
                          "name": "n"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "n"
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "length"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "takeRight"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a slice of `array` with `n` elements taken from the end.\n *\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to take.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * takeRight([1, 2, 3])\n * // => [3]\n *\n * takeRight([1, 2, 3], 2)\n * // => [2, 3]\n *\n * takeRight([1, 2, 3], 5)\n * // => [1, 2, 3]\n *\n * takeRight([1, 2, 3], 0)\n * // => []\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/takeRightWhile.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseWhile"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseWhile.js",
            "raw": "'./.internal/baseWhile.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "takeRightWhile"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseWhile"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "predicate"
                      },
                      {
                        "type": "Literal",
                        "value": false,
                        "raw": "false"
                      },
                      {
                        "type": "Literal",
                        "value": true,
                        "raw": "true"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "takeRightWhile"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a slice of `array` with elements taken from the end. Elements are\n * taken until `predicate` returns falsey. The predicate is invoked with\n * three arguments: (value, index, array).\n *\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * const users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': true },\n *   { 'user': 'pebbles', 'active': true }\n * ]\n *\n * takeRightWhile(users, ({ active }) => active)\n * // => objects for ['fred', 'pebbles']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/takeWhile.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseWhile"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseWhile.js",
            "raw": "'./.internal/baseWhile.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "takeWhile"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "predicate"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseWhile"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "predicate"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "takeWhile"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a slice of `array` with elements taken from the beginning. Elements\n * are taken until `predicate` returns falsey. The predicate is invoked with\n * three arguments: (value, index, array).\n *\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * const users = [\n *   { 'user': 'barney',  'active': true },\n *   { 'user': 'fred',    'active': true },\n *   { 'user': 'pebbles', 'active': false }\n * ]\n *\n * takeWhile(users, ({ active }) => active)\n * // => objects for ['barney', 'fred']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/throttle.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "debounce"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./debounce.js",
            "raw": "'./debounce.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObject.js",
            "raw": "'./isObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "throttle"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "func"
            },
            {
              "type": "Identifier",
              "name": "wait"
            },
            {
              "type": "Identifier",
              "name": "options"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "leading"
                    },
                    "init": {
                      "type": "Literal",
                      "value": true,
                      "raw": "true"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "trailing"
                    },
                    "init": {
                      "type": "Literal",
                      "value": true,
                      "raw": "true"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!==",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "function",
                    "raw": "'function'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ThrowStatement",
                      "argument": {
                        "type": "NewExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "TypeError"
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "Expected a function",
                            "raw": "'Expected a function'"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isObject"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "options"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "leading"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "in",
                            "left": {
                              "type": "Literal",
                              "value": "leading",
                              "raw": "'leading'"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "options"
                            }
                          },
                          "consequent": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "options"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "leading"
                                }
                              },
                              "prefix": true
                            },
                            "prefix": true
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "leading"
                          }
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "trailing"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "in",
                            "left": {
                              "type": "Literal",
                              "value": "trailing",
                              "raw": "'trailing'"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "options"
                            }
                          },
                          "consequent": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "argument": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "options"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "trailing"
                                }
                              },
                              "prefix": true
                            },
                            "prefix": true
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "trailing"
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "debounce"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "func"
                    },
                    {
                      "type": "Identifier",
                      "name": "wait"
                    },
                    {
                      "type": "ObjectExpression",
                      "properties": [
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "leading"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "leading"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Identifier",
                            "name": "trailing"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "trailing"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": true
                        },
                        {
                          "type": "Property",
                          "key": {
                            "type": "Literal",
                            "value": "maxWait",
                            "raw": "'maxWait'"
                          },
                          "computed": false,
                          "value": {
                            "type": "Identifier",
                            "name": "wait"
                          },
                          "kind": "init",
                          "method": false,
                          "shorthand": false
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "throttle"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds (or once per browser frame). The throttled function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `throttle` and `debounce`.\n *\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0]\n *  The number of milliseconds to throttle invocations to; if omitted,\n *  `requestAnimationFrame` is used (if available).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', throttle(updatePosition, 100))\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * const throttled = throttle(renewToken, 300000, { 'trailing': false })\n * jQuery(element).on('click', throttled)\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel)\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/times.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "MAX_SAFE_INTEGER"
              },
              "init": {
                "type": "Literal",
                "value": 9007199254740991,
                "raw": "9007199254740991"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "MAX_ARRAY_LENGTH"
              },
              "init": {
                "type": "Literal",
                "value": 4294967295,
                "raw": "4294967295"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "times"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "n"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "<",
                    "left": {
                      "type": "Identifier",
                      "name": "n"
                    },
                    "right": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1"
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": ">",
                    "left": {
                      "type": "Identifier",
                      "name": "n"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "MAX_SAFE_INTEGER"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Math"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "min"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "n"
                        },
                        {
                          "type": "Identifier",
                          "name": "MAX_ARRAY_LENGTH"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "length"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "iteratee"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "index"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "index"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "MAX_ARRAY_LENGTH"
                  }
                }
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "-=",
                  "left": {
                    "type": "Identifier",
                    "name": "n"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "MAX_ARRAY_LENGTH"
                  }
                }
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "n"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "iteratee"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "index"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "times"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "* Used as references for the maximum length and index of an array. "
        },
        {
          "type": "Block",
          "value": "*\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument: (index).\n *\n * @since 0.1.0\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * times(3, String)\n * // => ['0', '1', '2']\n *\n *  times(4, () => 0)\n * // => [0, 0, 0, 0]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/toArray.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "copyArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/copyArray.js",
            "raw": "'./.internal/copyArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "getTag"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/getTag.js",
            "raw": "'./.internal/getTag.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLike"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLike.js",
            "raw": "'./isArrayLike.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isString"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isString.js",
            "raw": "'./isString.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "iteratorToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/iteratorToArray.js",
            "raw": "'./.internal/iteratorToArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "mapToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/mapToArray.js",
            "raw": "'./.internal/mapToArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "setToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/setToArray.js",
            "raw": "'./.internal/setToArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/stringToArray.js",
            "raw": "'./.internal/stringToArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "values"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./values.js",
            "raw": "'./values.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "mapTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Map]",
                "raw": "'[object Map]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "setTag"
              },
              "init": {
                "type": "Literal",
                "value": "[object Set]",
                "raw": "'[object Set]'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "symIterator"
              },
              "init": {
                "type": "MemberExpression",
                "computed": false,
                "object": {
                  "type": "Identifier",
                  "name": "Symbol"
                },
                "property": {
                  "type": "Identifier",
                  "name": "iterator"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "toArray"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isArrayLike"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "isString"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        },
                        "consequent": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "stringToArray"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        },
                        "alternate": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "copyArray"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "value"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "symIterator"
                  },
                  "right": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "symIterator"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "iteratorToArray"
                        },
                        "arguments": [
                          {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": true,
                              "object": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "symIterator"
                              }
                            },
                            "arguments": []
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "tag"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "getTag"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "func"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "==",
                        "left": {
                          "type": "Identifier",
                          "name": "tag"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "mapTag"
                        }
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "mapToArray"
                      },
                      "alternate": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "==",
                          "left": {
                            "type": "Identifier",
                            "name": "tag"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "setTag"
                          }
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "setToArray"
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "values"
                        }
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "func"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "toArray"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* `Object#toString` result references. "
        },
        {
          "type": "Block",
          "value": "* Built-in value references. "
        },
        {
          "type": "Block",
          "value": "*\n * Converts `value` to an array.\n *\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Array} Returns the converted array.\n * @example\n *\n * toArray({ 'a': 1, 'b': 2 })\n * // => [1, 2]\n *\n * toArray('abc')\n * // => ['a', 'b', 'c']\n *\n * toArray(1)\n * // => []\n *\n * toArray(null)\n * // => []\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/toFinite.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toNumber"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toNumber.js",
            "raw": "'./toNumber.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "INFINITY"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "/",
                "left": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1"
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "MAX_INTEGER"
              },
              "init": {
                "type": "Literal",
                "value": 1.7976931348623157e+308,
                "raw": "1.7976931348623157e+308"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "toFinite"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "toNumber"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  }
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "INFINITY"
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Identifier",
                        "name": "INFINITY"
                      },
                      "prefix": true
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "sign"
                          },
                          "init": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "<",
                              "left": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "right": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              }
                            },
                            "consequent": {
                              "type": "UnaryExpression",
                              "operator": "-",
                              "argument": {
                                "type": "Literal",
                                "value": 1,
                                "raw": "1"
                              },
                              "prefix": true
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "BinaryExpression",
                        "operator": "*",
                        "left": {
                          "type": "Identifier",
                          "name": "sign"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "MAX_INTEGER"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "value"
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "alternate": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "toFinite"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "*\n * Converts `value` to a finite number.\n *\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * toFinite(3.2)\n * // => 3.2\n *\n * toFinite(Number.MIN_VALUE)\n * // => 5e-324\n *\n * toFinite(Infinity)\n * // => 1.7976931348623157e+308\n *\n * toFinite('3.2')\n * // => 3.2\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/toInteger.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toFinite"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toFinite.js",
            "raw": "'./toFinite.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "toInteger"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "toFinite"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "remainder"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "%",
                      "left": {
                        "type": "Identifier",
                        "name": "result"
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "Identifier",
                    "name": "remainder"
                  },
                  "consequent": {
                    "type": "BinaryExpression",
                    "operator": "-",
                    "left": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "remainder"
                    }
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "result"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "toInteger"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @see isInteger, isNumber, toNumber\n * @example\n *\n * toInteger(3.2)\n * // => 3\n *\n * toInteger(Number.MIN_VALUE)\n * // => 0\n *\n * toInteger(Infinity)\n * // => 1.7976931348623157e+308\n *\n * toInteger('3.2')\n * // => 3\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/toLength.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toInteger"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toInteger.js",
            "raw": "'./toInteger.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "MAX_ARRAY_LENGTH"
              },
              "init": {
                "type": "Literal",
                "value": 4294967295,
                "raw": "4294967295"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "toLength"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "toInteger"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  }
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 0,
                    "raw": "0"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": ">",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "MAX_ARRAY_LENGTH"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "MAX_ARRAY_LENGTH"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "value"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "toLength"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for the maximum length and index of an array. "
        },
        {
          "type": "Block",
          "value": "*\n * Converts `value` to an integer suitable for use as the length of an\n * array-like object.\n *\n * **Note:** This method is based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * toLength(3.2)\n * // => 3\n *\n * toLength(Number.MIN_VALUE)\n * // => 0\n *\n * toLength(Infinity)\n * // => 4294967295\n *\n * toLength('3.2')\n * // => 3\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/toNumber.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObject.js",
            "raw": "'./isObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isSymbol.js",
            "raw": "'./isSymbol.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "NAN"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "/",
                "left": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reTrim"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/^\\s+|\\s+$/g",
                "regex": {
                  "pattern": "^\\s+|\\s+$",
                  "flags": "g"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reIsBadHex"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/^[-+]0x[0-9a-f]+$/i",
                "regex": {
                  "pattern": "^[-+]0x[0-9a-f]+$",
                  "flags": "i"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reIsBinary"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/^0b[01]+$/i",
                "regex": {
                  "pattern": "^0b[01]+$",
                  "flags": "i"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reIsOctal"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/^0o[0-7]+$/i",
                "regex": {
                  "pattern": "^0o[0-7]+$",
                  "flags": "i"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "freeParseInt"
              },
              "init": {
                "type": "Identifier",
                "name": "parseInt"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "toNumber"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "number",
                    "raw": "'number'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isSymbol"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "NAN"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isObject"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "other"
                          },
                          "init": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "BinaryExpression",
                              "operator": "==",
                              "left": {
                                "type": "UnaryExpression",
                                "operator": "typeof",
                                "argument": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "value"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "valueOf"
                                  }
                                },
                                "prefix": true
                              },
                              "right": {
                                "type": "Literal",
                                "value": "function",
                                "raw": "'function'"
                              }
                            },
                            "consequent": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "valueOf"
                                }
                              },
                              "arguments": []
                            },
                            "alternate": {
                              "type": "Identifier",
                              "name": "value"
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isObject"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "other"
                              }
                            ]
                          },
                          "consequent": {
                            "type": "TemplateLiteral",
                            "quasis": [
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": false
                              },
                              {
                                "type": "TemplateElement",
                                "value": {
                                  "raw": "",
                                  "cooked": ""
                                },
                                "tail": true
                              }
                            ],
                            "expressions": [
                              {
                                "type": "Identifier",
                                "name": "other"
                              }
                            ]
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "other"
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "!=",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "string",
                    "raw": "'string'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "alternate": {
                          "type": "UnaryExpression",
                          "operator": "+",
                          "argument": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "prefix": true
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "replace"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "reTrim"
                      },
                      {
                        "type": "Literal",
                        "value": "",
                        "raw": "''"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isBinary"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "reIsBinary"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "test"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "Identifier",
                      "name": "isBinary"
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "reIsOctal"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "test"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "freeParseInt"
                    },
                    "arguments": [
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "slice"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": 2,
                            "raw": "2"
                          }
                        ]
                      },
                      {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "Identifier",
                          "name": "isBinary"
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": 2,
                          "raw": "2"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": 8,
                          "raw": "8"
                        }
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "reIsBadHex"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "test"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "NAN"
                    },
                    "alternate": {
                      "type": "UnaryExpression",
                      "operator": "+",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "prefix": true
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "toNumber"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "* Used to match leading and trailing whitespace. "
        },
        {
          "type": "Block",
          "value": "* Used to detect bad signed hexadecimal string values. "
        },
        {
          "type": "Block",
          "value": "* Used to detect binary string values. "
        },
        {
          "type": "Block",
          "value": "* Used to detect octal string values. "
        },
        {
          "type": "Block",
          "value": "* Built-in method references without a dependency on `root`. "
        },
        {
          "type": "Block",
          "value": "*\n * Converts `value` to a number.\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @see isInteger, toInteger, isNumber\n * @example\n *\n * toNumber(3.2)\n * // => 3.2\n *\n * toNumber(Number.MIN_VALUE)\n * // => 5e-324\n *\n * toNumber(Infinity)\n * // => Infinity\n *\n * toNumber('3.2')\n * // => 3.2\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/toPath.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "copyArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/copyArray.js",
            "raw": "'./.internal/copyArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isSymbol.js",
            "raw": "'./isSymbol.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringToPath"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/stringToPath.js",
            "raw": "'./.internal/stringToPath.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toKey"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/toKey.js",
            "raw": "'./.internal/toKey.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "toPath"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Array"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "isArray"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "map"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          },
                          {
                            "type": "Identifier",
                            "name": "toKey"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isSymbol"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "ArrayExpression",
                    "elements": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "copyArray"
                    },
                    "arguments": [
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "stringToPath"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "value"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "toPath"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `value` to a property path array.\n *\n * @since 4.0.0\n * @category Util\n * @param {*} value The value to convert.\n * @returns {Array} Returns the new property path array.\n * @example\n *\n * toPath('a.b.c')\n * // => ['a', 'b', 'c']\n *\n * toPath('a[0].b.c')\n * // => ['a', '0', 'b', 'c']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/toPlainObject.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "toPlainObject"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ObjectExpression",
                      "properties": []
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ForInStatement",
                "left": {
                  "type": "VariableDeclaration",
                  "declarations": [
                    {
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "key"
                      },
                      "init": null
                    }
                  ],
                  "kind": "const"
                },
                "right": {
                  "type": "Identifier",
                  "name": "value"
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "key"
                          }
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "key"
                          }
                        }
                      }
                    }
                  ]
                },
                "each": false
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "toPlainObject"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2\n * }\n *\n * Foo.prototype.c = 3\n *\n * assign({ 'a': 1 }, new Foo)\n * // => { 'a': 1, 'b': 2 }\n *\n * assign({ 'a': 1 }, toPlainObject(new Foo))\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/toSafeInteger.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toInteger"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toInteger.js",
            "raw": "'./toInteger.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "MAX_SAFE_INTEGER"
              },
              "init": {
                "type": "Literal",
                "value": 9007199254740991,
                "raw": "9007199254740991"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "toSafeInteger"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          }
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "value"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "toInteger"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "value"
                      }
                    ]
                  }
                }
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "-",
                    "argument": {
                      "type": "Identifier",
                      "name": "MAX_SAFE_INTEGER"
                    },
                    "prefix": true
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Identifier",
                          "name": "MAX_SAFE_INTEGER"
                        },
                        "prefix": true
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": ">",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "MAX_SAFE_INTEGER"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "MAX_SAFE_INTEGER"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "value"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "toSafeInteger"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "*\n * Converts `value` to a safe integer. A safe integer can be compared and\n * represented correctly.\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * toSafeInteger(3.2)\n * // => 3\n *\n * toSafeInteger(Number.MIN_VALUE)\n * // => 0\n *\n * toSafeInteger(Infinity)\n * // => 9007199254740991\n *\n * toSafeInteger('3.2')\n * // => 3\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/toString.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isSymbol"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isSymbol.js",
            "raw": "'./isSymbol.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "INFINITY"
              },
              "init": {
                "type": "BinaryExpression",
                "operator": "/",
                "left": {
                  "type": "Literal",
                  "value": 1,
                  "raw": "1"
                },
                "right": {
                  "type": "Literal",
                  "value": 0,
                  "raw": "0"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "toString"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "value"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "value"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": "",
                        "raw": "''"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "argument": {
                      "type": "Identifier",
                      "name": "value"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Literal",
                    "value": "string",
                    "raw": "'string'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "Array"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "isArray"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "TemplateLiteral",
                        "quasis": [
                          {
                            "type": "TemplateElement",
                            "value": {
                              "raw": "",
                              "cooked": ""
                            },
                            "tail": false
                          },
                          {
                            "type": "TemplateElement",
                            "value": {
                              "raw": "",
                              "cooked": ""
                            },
                            "tail": true
                          }
                        ],
                        "expressions": [
                          {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "map"
                              }
                            },
                            "arguments": [
                              {
                                "type": "ArrowFunctionExpression",
                                "id": null,
                                "params": [
                                  {
                                    "type": "Identifier",
                                    "name": "other"
                                  }
                                ],
                                "body": {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "==",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "other"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": null,
                                      "raw": "null"
                                    }
                                  },
                                  "consequent": {
                                    "type": "Identifier",
                                    "name": "other"
                                  },
                                  "alternate": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "toString"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "other"
                                      }
                                    ]
                                  }
                                },
                                "generator": false,
                                "expression": true,
                                "async": false
                              }
                            ]
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isSymbol"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "value"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "toString"
                          }
                        },
                        "arguments": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "TemplateLiteral",
                      "quasis": [
                        {
                          "type": "TemplateElement",
                          "value": {
                            "raw": "",
                            "cooked": ""
                          },
                          "tail": false
                        },
                        {
                          "type": "TemplateElement",
                          "value": {
                            "raw": "",
                            "cooked": ""
                          },
                          "tail": true
                        }
                      ],
                      "expressions": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "Identifier",
                        "name": "result"
                      },
                      "right": {
                        "type": "Literal",
                        "value": "0",
                        "raw": "'0'"
                      }
                    },
                    "right": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "/",
                        "left": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "value"
                        }
                      },
                      "right": {
                        "type": "UnaryExpression",
                        "operator": "-",
                        "argument": {
                          "type": "Identifier",
                          "name": "INFINITY"
                        },
                        "prefix": true
                      }
                    }
                  },
                  "consequent": {
                    "type": "Literal",
                    "value": "-0",
                    "raw": "'-0'"
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "result"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "toString"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as references for various `Number` constants. "
        },
        {
          "type": "Block",
          "value": "*\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * toString(null)\n * // => ''\n *\n * toString(-0)\n * // => '-0'\n *\n * toString([1, 2, 3])\n * // => '1,2,3'\n "
        },
        {
          "type": "Line",
          "value": " Exit early for strings to avoid a performance hit in some environments."
        },
        {
          "type": "Line",
          "value": " Recursively convert values (susceptible to call stack limits)."
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/transform.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "arrayEach"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/arrayEach.js",
            "raw": "'./.internal/arrayEach.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseForOwn"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseForOwn.js",
            "raw": "'./.internal/baseForOwn.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isBuffer"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isBuffer.js",
            "raw": "'./isBuffer.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObject.js",
            "raw": "'./isObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isTypedArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isTypedArray.js",
            "raw": "'./isTypedArray.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "transform"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            },
            {
              "type": "Identifier",
              "name": "accumulator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isArr"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "Array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "isArray"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "isArrLike"
                    },
                    "init": {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "Identifier",
                          "name": "isArr"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "isBuffer"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            }
                          ]
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isTypedArray"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          }
                        ]
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "==",
                  "left": {
                    "type": "Identifier",
                    "name": "accumulator"
                  },
                  "right": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "Ctor"
                          },
                          "init": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "Identifier",
                              "name": "object"
                            },
                            "right": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "constructor"
                              }
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "isArrLike"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "accumulator"
                              },
                              "right": {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "Identifier",
                                  "name": "isArr"
                                },
                                "consequent": {
                                  "type": "NewExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "Ctor"
                                  },
                                  "arguments": []
                                },
                                "alternate": {
                                  "type": "ArrayExpression",
                                  "elements": []
                                }
                              }
                            }
                          }
                        ]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "isObject"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "object"
                            }
                          ]
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "accumulator"
                                },
                                "right": {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "operator": "==",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "typeof",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "Ctor"
                                      },
                                      "prefix": true
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": "function",
                                      "raw": "'function'"
                                    }
                                  },
                                  "consequent": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "Object"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "create"
                                      }
                                    },
                                    "arguments": [
                                      {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "Object"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "getPrototypeOf"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "Identifier",
                                            "name": "object"
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "alternate": {
                                    "type": "ObjectExpression",
                                    "properties": []
                                  }
                                }
                              }
                            }
                          ]
                        },
                        "alternate": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "accumulator"
                                },
                                "right": {
                                  "type": "ObjectExpression",
                                  "properties": []
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "Identifier",
                      "name": "isArrLike"
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "arrayEach"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "baseForOwn"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "object"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "value"
                        },
                        {
                          "type": "Identifier",
                          "name": "index"
                        },
                        {
                          "type": "Identifier",
                          "name": "object"
                        }
                      ],
                      "body": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "iteratee"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "accumulator"
                          },
                          {
                            "type": "Identifier",
                            "name": "value"
                          },
                          {
                            "type": "Identifier",
                            "name": "index"
                          },
                          {
                            "type": "Identifier",
                            "name": "object"
                          }
                        ]
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "accumulator"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "transform"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * An alternative to `reduce` this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @see reduce, reduceRight\n * @example\n *\n * transform([2, 3, 4], (result, n) => {\n *   result.push(n *= n)\n *   return n % 2 == 0\n * }, [])\n * // => [4, 9]\n *\n * transform({ 'a': 1, 'b': 2, 'c': 1 }, (result, value, key) => {\n *   (result[value] || (result[value] = [])).push(key)\n * }, {})\n * // => { '1': ['a', 'c'], '2': ['b'] }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/trim.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castSlice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/castSlice.js",
            "raw": "'./.internal/castSlice.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "charsEndIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/charsEndIndex.js",
            "raw": "'./.internal/charsEndIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "charsStartIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/charsStartIndex.js",
            "raw": "'./.internal/charsStartIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/stringToArray.js",
            "raw": "'./.internal/stringToArray.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "trim"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "chars"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "string"
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "chars"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "string"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "trim"
                          }
                        },
                        "arguments": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "Identifier",
                      "name": "chars"
                    },
                    "prefix": true
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "Identifier",
                          "name": "string"
                        },
                        "right": {
                          "type": "Literal",
                          "value": "",
                          "raw": "''"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "strSymbols"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "stringToArray"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "string"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "chrSymbols"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "stringToArray"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "chars"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "start"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "charsStartIndex"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "strSymbols"
                        },
                        {
                          "type": "Identifier",
                          "name": "chrSymbols"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "end"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "charsEndIndex"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "strSymbols"
                          },
                          {
                            "type": "Identifier",
                            "name": "chrSymbols"
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "castSlice"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "strSymbols"
                        },
                        {
                          "type": "Identifier",
                          "name": "start"
                        },
                        {
                          "type": "Identifier",
                          "name": "end"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "join"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "trim"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @returns {string} Returns the trimmed string.\n * @see trimEnd, trimStart\n * @example\n *\n * trim('  abc  ')\n * // => 'abc'\n *\n * trim('-_-abc-_-', '_-')\n * // => 'abc'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/trimEnd.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castSlice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/castSlice.js",
            "raw": "'./.internal/castSlice.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "charsEndIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/charsEndIndex.js",
            "raw": "'./.internal/charsEndIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/stringToArray.js",
            "raw": "'./.internal/stringToArray.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "methodName"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Literal",
                    "value": "",
                    "raw": "''"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "trimRight"
                  }
                },
                "consequent": {
                  "type": "Literal",
                  "value": "trimRight",
                  "raw": "'trimRight'"
                },
                "alternate": {
                  "type": "Literal",
                  "value": "trimEnd",
                  "raw": "'trimEnd'"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "trimEnd"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "chars"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "string"
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "chars"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "string"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "methodName"
                          }
                        },
                        "arguments": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "Identifier",
                      "name": "chars"
                    },
                    "prefix": true
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "Identifier",
                          "name": "string"
                        },
                        "right": {
                          "type": "Literal",
                          "value": "",
                          "raw": "''"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "strSymbols"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "stringToArray"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "string"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "end"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "charsEndIndex"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "strSymbols"
                          },
                          {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "stringToArray"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "chars"
                              }
                            ]
                          }
                        ]
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "castSlice"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "strSymbols"
                        },
                        {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        },
                        {
                          "type": "Identifier",
                          "name": "end"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "join"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "trimEnd"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Removes trailing whitespace or specified characters from `string`.\n *\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @returns {string} Returns the trimmed string.\n * @see trim, trimStart\n * @example\n *\n * trimEnd('  abc  ')\n * // => '  abc'\n *\n * trimEnd('-_-abc-_-', '_-')\n * // => '-_-abc'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/trimStart.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castSlice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/castSlice.js",
            "raw": "'./.internal/castSlice.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "charsStartIndex"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/charsStartIndex.js",
            "raw": "'./.internal/charsStartIndex.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/stringToArray.js",
            "raw": "'./.internal/stringToArray.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "methodName"
              },
              "init": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Literal",
                    "value": "",
                    "raw": "''"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "trimLeft"
                  }
                },
                "consequent": {
                  "type": "Literal",
                  "value": "trimLeft",
                  "raw": "'trimLeft'"
                },
                "alternate": {
                  "type": "Literal",
                  "value": "trimStart",
                  "raw": "'trimStart'"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "trimStart"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "chars"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "Identifier",
                    "name": "string"
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "chars"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "string"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "methodName"
                          }
                        },
                        "arguments": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "UnaryExpression",
                    "operator": "!",
                    "argument": {
                      "type": "Identifier",
                      "name": "chars"
                    },
                    "prefix": true
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "Identifier",
                          "name": "string"
                        },
                        "right": {
                          "type": "Literal",
                          "value": "",
                          "raw": "''"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "strSymbols"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "stringToArray"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "string"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "start"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "charsStartIndex"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "strSymbols"
                        },
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "stringToArray"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "chars"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "castSlice"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "strSymbols"
                        },
                        {
                          "type": "Identifier",
                          "name": "start"
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "join"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "trimStart"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Removes leading whitespace or specified characters from `string`.\n *\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @returns {string} Returns the trimmed string.\n * @see trim, trimEnd\n * @example\n *\n * trimStart('  abc  ')\n * // => 'abc  '\n *\n * trimStart('-_-abc-_-', '_-')\n * // => 'abc-_-'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/truncate.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseToString"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseToString.js",
            "raw": "'./.internal/baseToString.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "castSlice"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/castSlice.js",
            "raw": "'./.internal/castSlice.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "hasUnicode"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/hasUnicode.js",
            "raw": "'./.internal/hasUnicode.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isObject.js",
            "raw": "'./isObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isRegExp"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isRegExp.js",
            "raw": "'./isRegExp.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringSize"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/stringSize.js",
            "raw": "'./.internal/stringSize.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "stringToArray"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/stringToArray.js",
            "raw": "'./.internal/stringToArray.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toString"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toString.js",
            "raw": "'./toString.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "DEFAULT_TRUNC_LENGTH"
              },
              "init": {
                "type": "Literal",
                "value": 30,
                "raw": "30"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "DEFAULT_TRUNC_OMISSION"
              },
              "init": {
                "type": "Literal",
                "value": "...",
                "raw": "'...'"
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reFlags"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/\\w*$/",
                "regex": {
                  "pattern": "\\w*$",
                  "flags": ""
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "truncate"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "options"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "separator"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "DEFAULT_TRUNC_LENGTH"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "omission"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "DEFAULT_TRUNC_OMISSION"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isObject"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "options"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "separator"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "in",
                            "left": {
                              "type": "Literal",
                              "value": "separator",
                              "raw": "'separator'"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "options"
                            }
                          },
                          "consequent": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "options"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "separator"
                            }
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "separator"
                          }
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "length"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "in",
                            "left": {
                              "type": "Literal",
                              "value": "length",
                              "raw": "'length'"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "options"
                            }
                          },
                          "consequent": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "options"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "length"
                            }
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "omission"
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "BinaryExpression",
                            "operator": "in",
                            "left": {
                              "type": "Literal",
                              "value": "omission",
                              "raw": "'omission'"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "options"
                            }
                          },
                          "consequent": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "baseToString"
                            },
                            "arguments": [
                              {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "options"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "omission"
                                }
                              }
                            ]
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "omission"
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "string"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "toString"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "string"
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "strSymbols"
                    },
                    "init": null
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "strLength"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "string"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "hasUnicode"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "string"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "strSymbols"
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "stringToArray"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "string"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "strLength"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "strSymbols"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": ">=",
                  "left": {
                    "type": "Identifier",
                    "name": "length"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "strLength"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "string"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "end"
                    },
                    "init": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "stringSize"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "omission"
                          }
                        ]
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "Identifier",
                    "name": "end"
                  },
                  "right": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "omission"
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "strSymbols"
                      },
                      "consequent": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "castSlice"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "strSymbols"
                              },
                              {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              },
                              {
                                "type": "Identifier",
                                "name": "end"
                              }
                            ]
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "join"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": "",
                            "raw": "''"
                          }
                        ]
                      },
                      "alternate": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "string"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "slice"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Literal",
                            "value": 0,
                            "raw": "0"
                          },
                          {
                            "type": "Identifier",
                            "name": "end"
                          }
                        ]
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "separator"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "Identifier",
                          "name": "result"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "omission"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "Identifier",
                  "name": "strSymbols"
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "+=",
                        "left": {
                          "type": "Identifier",
                          "name": "end"
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": "-",
                          "left": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "result"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "length"
                            }
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "end"
                          }
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isRegExp"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "separator"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "computed": false,
                              "object": {
                                "type": "Identifier",
                                "name": "string"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "slice"
                              }
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "end"
                              }
                            ]
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "search"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "separator"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "match"
                                },
                                "init": null
                              }
                            ],
                            "kind": "let"
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "newEnd"
                                },
                                "init": null
                              }
                            ],
                            "kind": "let"
                          },
                          {
                            "type": "VariableDeclaration",
                            "declarations": [
                              {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "substring"
                                },
                                "init": {
                                  "type": "Identifier",
                                  "name": "result"
                                }
                              }
                            ],
                            "kind": "const"
                          },
                          {
                            "type": "IfStatement",
                            "test": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "separator"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "global"
                                }
                              },
                              "prefix": true
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "separator"
                                    },
                                    "right": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "RegExp"
                                      },
                                      "arguments": [
                                        {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "separator"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "source"
                                          }
                                        },
                                        {
                                          "type": "TemplateLiteral",
                                          "quasis": [
                                            {
                                              "type": "TemplateElement",
                                              "value": {
                                                "raw": "",
                                                "cooked": ""
                                              },
                                              "tail": false
                                            },
                                            {
                                              "type": "TemplateElement",
                                              "value": {
                                                "raw": "g",
                                                "cooked": "g"
                                              },
                                              "tail": true
                                            }
                                          ],
                                          "expressions": [
                                            {
                                              "type": "LogicalExpression",
                                              "operator": "||",
                                              "left": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "computed": false,
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "reFlags"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "exec"
                                                  }
                                                },
                                                "arguments": [
                                                  {
                                                    "type": "Identifier",
                                                    "name": "separator"
                                                  }
                                                ]
                                              },
                                              "right": {
                                                "type": "Literal",
                                                "value": "",
                                                "raw": "''"
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                }
                              ]
                            },
                            "alternate": null
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "separator"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "lastIndex"
                                }
                              },
                              "right": {
                                "type": "Literal",
                                "value": 0,
                                "raw": "0"
                              }
                            }
                          },
                          {
                            "type": "WhileStatement",
                            "test": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "match"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "separator"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "exec"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "substring"
                                  }
                                ]
                              }
                            },
                            "body": {
                              "type": "BlockStatement",
                              "body": [
                                {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "newEnd"
                                    },
                                    "right": {
                                      "type": "MemberExpression",
                                      "computed": false,
                                      "object": {
                                        "type": "Identifier",
                                        "name": "match"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "index"
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "Identifier",
                                "name": "result"
                              },
                              "right": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "computed": false,
                                  "object": {
                                    "type": "Identifier",
                                    "name": "result"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "slice"
                                  }
                                },
                                "arguments": [
                                  {
                                    "type": "Literal",
                                    "value": 0,
                                    "raw": "0"
                                  },
                                  {
                                    "type": "ConditionalExpression",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "operator": "===",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "newEnd"
                                      },
                                      "right": {
                                        "type": "Identifier",
                                        "name": "undefined"
                                      }
                                    },
                                    "consequent": {
                                      "type": "Identifier",
                                      "name": "end"
                                    },
                                    "alternate": {
                                      "type": "Identifier",
                                      "name": "newEnd"
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      },
                      "alternate": null
                    }
                  ]
                },
                "alternate": {
                  "type": "IfStatement",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "!=",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "string"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "indexOf"
                        }
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "baseToString"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "separator"
                            }
                          ]
                        },
                        {
                          "type": "Identifier",
                          "name": "end"
                        }
                      ]
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "end"
                    }
                  },
                  "consequent": {
                    "type": "BlockStatement",
                    "body": [
                      {
                        "type": "VariableDeclaration",
                        "declarations": [
                          {
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "computed": false,
                                "object": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "lastIndexOf"
                                }
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "separator"
                                }
                              ]
                            }
                          }
                        ],
                        "kind": "const"
                      },
                      {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": ">",
                          "left": {
                            "type": "Identifier",
                            "name": "index"
                          },
                          "right": {
                            "type": "UnaryExpression",
                            "operator": "-",
                            "argument": {
                              "type": "Literal",
                              "value": 1,
                              "raw": "1"
                            },
                            "prefix": true
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "Identifier",
                                  "name": "result"
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "computed": false,
                                    "object": {
                                      "type": "Identifier",
                                      "name": "result"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "slice"
                                    }
                                  },
                                  "arguments": [
                                    {
                                      "type": "Literal",
                                      "value": 0,
                                      "raw": "0"
                                    },
                                    {
                                      "type": "Identifier",
                                      "name": "index"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "alternate": null
                      }
                    ]
                  },
                  "alternate": null
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Identifier",
                    "name": "result"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "omission"
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "truncate"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used as default options for `truncate`. "
        },
        {
          "type": "Block",
          "value": "* Used to match `RegExp` flags from their coerced string values. "
        },
        {
          "type": "Block",
          "value": "*\n * Truncates `string` if it's longer than the given maximum string length.\n * The last characters of the truncated string are replaced with the omission\n * string which defaults to \"...\".\n *\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to truncate.\n * @param {Object} [options={}] The options object.\n * @param {number} [options.length=30] The maximum string length.\n * @param {string} [options.omission='...'] The string to indicate text is omitted.\n * @param {RegExp|string} [options.separator] The separator pattern to truncate to.\n * @returns {string} Returns the truncated string.\n * @see replace\n * @example\n *\n * truncate('hi-diddly-ho there, neighborino')\n * // => 'hi-diddly-ho there, neighbo...'\n *\n * truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': ' '\n * })\n * // => 'hi-diddly-ho there,...'\n *\n * truncate('hi-diddly-ho there, neighborino', {\n *   'length': 24,\n *   'separator': /,? +/\n * })\n * // => 'hi-diddly-ho there...'\n *\n * truncate('hi-diddly-ho there, neighborino', {\n *   'omission': ' [...]'\n * })\n * // => 'hi-diddly-ho there, neig [...]'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/unescape.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "htmlUnescapes"
              },
              "init": {
                "type": "ObjectExpression",
                "properties": [
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "&amp;",
                      "raw": "'&amp;'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "&",
                      "raw": "'&'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "&lt;",
                      "raw": "'&lt;'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "<",
                      "raw": "'<'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "&gt;",
                      "raw": "'&gt;'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": ">",
                      "raw": "'>'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "&quot;",
                      "raw": "'&quot;'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "\"",
                      "raw": "'\"'"
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  },
                  {
                    "type": "Property",
                    "key": {
                      "type": "Literal",
                      "value": "&#39;",
                      "raw": "'&#39;'"
                    },
                    "computed": false,
                    "value": {
                      "type": "Literal",
                      "value": "'",
                      "raw": "\"'\""
                    },
                    "kind": "init",
                    "method": false,
                    "shorthand": false
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reEscapedHtml"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/&(?:amp|lt|gt|quot|#39);/g",
                "regex": {
                  "pattern": "&(?:amp|lt|gt|quot|#39);",
                  "flags": "g"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reHasEscapedHtml"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "RegExp"
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "reEscapedHtml"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "source"
                    }
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "unescape"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "reHasEscapedHtml"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "test"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "string"
                        }
                      ]
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "string"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "replace"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "reEscapedHtml"
                      },
                      {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [
                          {
                            "type": "Identifier",
                            "name": "entity"
                          }
                        ],
                        "body": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "htmlUnescapes"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "entity"
                          }
                        },
                        "generator": false,
                        "expression": true,
                        "async": false
                      }
                    ]
                  },
                  "alternate": {
                    "type": "LogicalExpression",
                    "operator": "||",
                    "left": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "right": {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "unescape"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to map HTML entities to characters. "
        },
        {
          "type": "Block",
          "value": "* Used to match HTML entities and HTML characters. "
        },
        {
          "type": "Block",
          "value": "*\n * The inverse of `escape`this method converts the HTML entities\n * `&amp;`, `&lt;`, `&gt;`, `&quot;` and `&#39;` in `string` to\n * their corresponding characters.\n *\n * **Note:** No other HTML entities are unescaped. To unescape additional\n * HTML entities use a third-party library like [_he_](https://mths.be/he).\n *\n * @since 0.6.0\n * @category String\n * @param {string} [string=''] The string to unescape.\n * @returns {string} Returns the unescaped string.\n * @see escape, escapeRegExp\n * @example\n *\n * unescape('fred, barney, &amp; pebbles')\n * // => 'fred, barney, & pebbles'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/union.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseUniq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseUniq.js",
            "raw": "'./.internal/baseUniq.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLikeObject.js",
            "raw": "'./isArrayLikeObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "union"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "arrays"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseUniq"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseFlatten"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        {
                          "type": "Identifier",
                          "name": "isArrayLikeObject"
                        },
                        {
                          "type": "Literal",
                          "value": true,
                          "raw": "true"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "union"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of unique values, in order, from all given arrays using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of combined values.\n * @see difference, unionBy, unionWith, without, xor, xorBy\n * @example\n *\n * union([2, 3], [1, 2])\n * // => [2, 3, 1]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/unionBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseUniq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseUniq.js",
            "raw": "'./.internal/baseUniq.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLikeObject.js",
            "raw": "'./isArrayLikeObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "last"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./last.js",
            "raw": "'./last.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "unionBy"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "arrays"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "iteratee"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "last"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrays"
                        }
                      ]
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isArrayLikeObject"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "iteratee"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseUniq"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseFlatten"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        {
                          "type": "Identifier",
                          "name": "isArrayLikeObject"
                        },
                        {
                          "type": "Literal",
                          "value": true,
                          "raw": "true"
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "unionBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `union` except that it accepts `iteratee` which is\n * invoked for each element of each `arrays` to generate the criterion by\n * which uniqueness is computed. Result values are chosen from the first\n * array in which the value occurs. The iteratee is invoked with one argument:\n * (value).\n *\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @see difference, union, unionWith, without, xor, xorBy\n * @example\n *\n * unionBy([2.1], [1.2, 2.3], Math.floor)\n * // => [2.1, 1.2]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/unionWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseFlatten"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseFlatten.js",
            "raw": "'./.internal/baseFlatten.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseUniq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseUniq.js",
            "raw": "'./.internal/baseUniq.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLikeObject.js",
            "raw": "'./isArrayLikeObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "last"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./last.js",
            "raw": "'./last.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "unionWith"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "arrays"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "comparator"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "last"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrays"
                        }
                      ]
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "comparator"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "comparator"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "comparator"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseUniq"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "baseFlatten"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        },
                        {
                          "type": "Identifier",
                          "name": "isArrayLikeObject"
                        },
                        {
                          "type": "Literal",
                          "value": true,
                          "raw": "true"
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "name": "undefined"
                    },
                    {
                      "type": "Identifier",
                      "name": "comparator"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "unionWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `union` except that it accepts `comparator` which\n * is invoked to compare elements of `arrays`. Result values are chosen from\n * the first array in which the value occurs. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of combined values.\n * @see difference, union, unionBy, without, xor, xorBy\n * @example\n *\n * const objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n * const others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }]\n *\n * unionWith(objects, others, isEqual)\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/uniq.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseUniq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseUniq.js",
            "raw": "'./.internal/baseUniq.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "uniq"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseUniq"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "uniq"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @see uniqBy, uniqWith\n * @example\n *\n * uniq([2, 1, 2])\n * // => [2, 1]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/uniqBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseUniq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseUniq.js",
            "raw": "'./.internal/baseUniq.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "uniqBy"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseUniq"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "iteratee"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "uniqBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @see uniq, uniqWith\n * @example\n *\n * uniqBy([2.1, 1.2, 2.3], Math.floor)\n * // => [2.1, 1.2]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/uniqWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseUniq"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseUniq.js",
            "raw": "'./.internal/baseUniq.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "uniqWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "comparator"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "comparator"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "comparator"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "comparator"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseUniq"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "undefined"
                      },
                      {
                        "type": "Identifier",
                        "name": "comparator"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "uniqWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `uniq` except that it accepts `comparator` which\n * is invoked to compare elements of `array`. The order of result values is\n * determined by the order they occur in the array. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @see uniq, uniqBy\n * @example\n *\n * const objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }]\n *\n * uniqWith(objects, isEqual)\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/uniqueId.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "idCounter"
              },
              "init": {
                "type": "ObjectExpression",
                "properties": []
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "uniqueId"
          },
          "params": [
            {
              "type": "AssignmentPattern",
              "left": {
                "type": "Identifier",
                "name": "prefix"
              },
              "right": {
                "type": "Literal",
                "value": "$lodash$",
                "raw": "'$lodash$'"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "idCounter"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "prefix"
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "idCounter"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "prefix"
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "id"
                    },
                    "init": {
                      "type": "UpdateExpression",
                      "operator": "++",
                      "argument": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "idCounter"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "prefix"
                        }
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "prefix"
                  },
                  "right": {
                    "type": "Literal",
                    "value": "$lodash$",
                    "raw": "'$lodash$'"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "TemplateLiteral",
                        "quasis": [
                          {
                            "type": "TemplateElement",
                            "value": {
                              "raw": "",
                              "cooked": ""
                            },
                            "tail": false
                          },
                          {
                            "type": "TemplateElement",
                            "value": {
                              "raw": "",
                              "cooked": ""
                            },
                            "tail": true
                          }
                        ],
                        "expressions": [
                          {
                            "type": "Identifier",
                            "name": "id"
                          }
                        ]
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "TemplateLiteral",
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "",
                        "cooked": ""
                      },
                      "tail": false
                    },
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "",
                        "cooked": ""
                      },
                      "tail": true
                    }
                  ],
                  "expressions": [
                    {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "Identifier",
                        "name": "prefix"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "id"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "uniqueId"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to generate unique IDs. "
        },
        {
          "type": "Block",
          "value": "*\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @since 0.1.0\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @see random\n * @example\n *\n * uniqueId('contact_')\n * // => 'contact_104'\n *\n * uniqueId()\n * // => '105'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/unset.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseUnset"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseUnset.js",
            "raw": "'./.internal/baseUnset.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "unset"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "consequent": {
                    "type": "Literal",
                    "value": true,
                    "raw": "true"
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseUnset"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "path"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "unset"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Removes the property at `path` of `object`.\n *\n * **Note:** This method mutates `object`.\n *\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n * @see get, has, set\n * @example\n *\n * const object = { 'a': [{ 'b': { 'c': 7 } }] }\n * unset(object, 'a[0].b.c')\n * // => true\n *\n * console.log(object)\n * // => { 'a': [{ 'b': {} }] }\n *\n * unset(object, ['a', '0', 'b', 'c'])\n * // => true\n *\n * console.log(object)\n * // => { 'a': [{ 'b': {} }] }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/unzip.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "filter"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./filter.js",
            "raw": "'./filter.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseProperty"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseProperty.js",
            "raw": "'./.internal/baseProperty.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLikeObject.js",
            "raw": "'./isArrayLikeObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "unzip"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0"
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "array"
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "filter"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "ArrowFunctionExpression",
                        "id": null,
                        "params": [
                          {
                            "type": "Identifier",
                            "name": "group"
                          }
                        ],
                        "body": {
                          "type": "BlockStatement",
                          "body": [
                            {
                              "type": "IfStatement",
                              "test": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isArrayLikeObject"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "group"
                                  }
                                ]
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [
                                  {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "length"
                                      },
                                      "right": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "computed": false,
                                          "object": {
                                            "type": "Identifier",
                                            "name": "Math"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "max"
                                          }
                                        },
                                        "arguments": [
                                          {
                                            "type": "MemberExpression",
                                            "computed": false,
                                            "object": {
                                              "type": "Identifier",
                                              "name": "group"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "length"
                                            }
                                          },
                                          {
                                            "type": "Identifier",
                                            "name": "length"
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "Literal",
                                      "value": true,
                                      "raw": "true"
                                    }
                                  }
                                ]
                              },
                              "alternate": null
                            }
                          ]
                        },
                        "generator": false,
                        "expression": false,
                        "async": false
                      }
                    ]
                  }
                }
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "init": {
                      "type": "UnaryExpression",
                      "operator": "-",
                      "argument": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1"
                      },
                      "prefix": true
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "NewExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "length"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "WhileStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "<",
                  "left": {
                    "type": "UpdateExpression",
                    "operator": "++",
                    "argument": {
                      "type": "Identifier",
                      "name": "index"
                    },
                    "prefix": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "length"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "computed": true,
                          "object": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "index"
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "map"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "array"
                            },
                            {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "baseProperty"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "index"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "Identifier",
                  "name": "result"
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "unzip"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `zip` except that it accepts an array of grouped\n * elements and creates an array regrouping the elements to their pre-zip\n * configuration.\n *\n * @since 1.2.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @returns {Array} Returns the new array of regrouped elements.\n * @see unzipWith, zip, zipObject, zipObjectDeep, zipWith\n * @example\n *\n * const zipped = zip(['a', 'b'], [1, 2], [true, false])\n * // => [['a', 1, true], ['b', 2, false]]\n *\n * unzip(zipped)\n * // => [['a', 'b'], [1, 2], [true, false]]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/unzipWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "map"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./map.js",
            "raw": "'./map.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "unzip"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./unzip.js",
            "raw": "'./unzip.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "unzipWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "Identifier",
              "name": "iteratee"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "UnaryExpression",
                  "operator": "!",
                  "argument": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "!=",
                      "left": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "right": {
                        "type": "Literal",
                        "value": null,
                        "raw": "null"
                      }
                    },
                    "right": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "array"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  },
                  "prefix": true
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "result"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "unzip"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "array"
                        }
                      ]
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "map"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "result"
                    },
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "group"
                        }
                      ],
                      "body": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "iteratee"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "apply"
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "undefined"
                          },
                          {
                            "type": "Identifier",
                            "name": "group"
                          }
                        ]
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "unzipWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `unzip` except that it accepts `iteratee` to specify\n * how regrouped values should be combined. The iteratee is invoked with the\n * elements of each group: (...group).\n *\n * @since 3.8.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @param {Function} iteratee The function to combine\n *  regrouped values.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * const zipped = zip([1, 2], [10, 20], [100, 200])\n * // => [[1, 10, 100], [2, 20, 200]]\n *\n * unzipWith(zipped, add)\n * // => [3, 30, 300]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/update.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseUpdate"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseUpdate.js",
            "raw": "'./.internal/baseUpdate.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "update"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "updater"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseUpdate"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "updater"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "update"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `set` except that it accepts `updater` to produce the\n * value to set. Use `updateWith` to customize `path` creation. The `updater`\n * is invoked with one argument: (value).\n *\n * **Note:** This method mutates `object`.\n *\n * @since 4.6.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {Function} updater The function to produce the updated value.\n * @returns {Object} Returns `object`.\n * @example\n *\n * const object = { 'a': [{ 'b': { 'c': 3 } }] }\n *\n * update(object, 'a[0].b.c', n => n * n)\n * console.log(object.a[0].b.c)\n * // => 9\n *\n * update(object, 'x[0].y.z', n => n ? n + 1 : 0)\n * console.log(object.x[0].y.z)\n * // => 0\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/updateWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseUpdate"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseUpdate.js",
            "raw": "'./.internal/baseUpdate.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "updateWith"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            },
            {
              "type": "Identifier",
              "name": "path"
            },
            {
              "type": "Identifier",
              "name": "updater"
            },
            {
              "type": "Identifier",
              "name": "customizer"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "customizer"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "customizer"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "customizer"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "object"
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseUpdate"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "Identifier",
                        "name": "path"
                      },
                      {
                        "type": "Identifier",
                        "name": "updater"
                      },
                      {
                        "type": "Identifier",
                        "name": "customizer"
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "updateWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `update` except that it accepts `customizer` which is\n * invoked to produce the objects of `path`. If `customizer` returns `undefined`\n * path creation is handled by the method instead. The `customizer` is invoked\n * with three arguments: (nsValue, key, nsObject).\n *\n * **Note:** This method mutates `object`.\n *\n * @since 4.6.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {Function} updater The function to produce the updated value.\n * @param {Function} [customizer] The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * const object = {}\n *\n * updateWith(object, '[0][1]', () => 'a', Object)\n * // => { '0': { '1': 'a' } }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/upperCase.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "words"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./words.js",
            "raw": "'./words.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "toString"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./toString.js",
            "raw": "'./toString.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "upperCase"
              },
              "init": {
                "type": "ArrowFunctionExpression",
                "id": null,
                "params": [
                  {
                    "type": "Identifier",
                    "name": "string"
                  }
                ],
                "body": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "words"
                      },
                      "arguments": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "toString"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "string"
                                }
                              ]
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "replace"
                            }
                          },
                          "arguments": [
                            {
                              "type": "Literal",
                              "value": {},
                              "raw": "/['\\u2019]/g",
                              "regex": {
                                "pattern": "['\\u2019]",
                                "flags": "g"
                              }
                            },
                            {
                              "type": "Literal",
                              "value": "",
                              "raw": "''"
                            }
                          ]
                        }
                      ]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "reduce"
                    }
                  },
                  "arguments": [
                    {
                      "type": "ArrowFunctionExpression",
                      "id": null,
                      "params": [
                        {
                          "type": "Identifier",
                          "name": "result"
                        },
                        {
                          "type": "Identifier",
                          "name": "word"
                        },
                        {
                          "type": "Identifier",
                          "name": "index"
                        }
                      ],
                      "body": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "right": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "Identifier",
                              "name": "index"
                            },
                            "consequent": {
                              "type": "Literal",
                              "value": " ",
                              "raw": "' '"
                            },
                            "alternate": {
                              "type": "Literal",
                              "value": "",
                              "raw": "''"
                            }
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "word"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "toUpperCase"
                            }
                          },
                          "arguments": []
                        }
                      },
                      "generator": false,
                      "expression": true,
                      "async": false
                    },
                    {
                      "type": "Literal",
                      "value": "",
                      "raw": "''"
                    }
                  ]
                },
                "generator": false,
                "expression": true,
                "async": false
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "upperCase"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts `string`, as space separated words, to upper case.\n *\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the upper cased string.\n * @see camelCase, kebabCase, lowerCase, snakeCase, startCase, upperFirst\n * @example\n *\n * upperCase('--foo-bar')\n * // => 'FOO BAR'\n *\n * upperCase('fooBar')\n * // => 'FOO BAR'\n *\n * upperCase('__foo_bar__')\n * // => 'FOO BAR'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/upperFirst.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "createCaseFirst"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/createCaseFirst.js",
            "raw": "'./.internal/createCaseFirst.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "upperFirst"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "createCaseFirst"
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "value": "toUpperCase",
                    "raw": "'toUpperCase'"
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "upperFirst"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Converts the first character of `string` to upper case.\n *\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @see camelCase, kebabCase, lowerCase, snakeCase, startCase, upperCase\n * @example\n *\n * upperFirst('fred')\n * // => 'Fred'\n *\n * upperFirst('FRED')\n * // => 'FRED'\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/values.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseValues"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseValues.js",
            "raw": "'./.internal/baseValues.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "keys"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./keys.js",
            "raw": "'./keys.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "values"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "object"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "==",
                    "left": {
                      "type": "Identifier",
                      "name": "object"
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null"
                    }
                  },
                  "consequent": {
                    "type": "ArrayExpression",
                    "elements": []
                  },
                  "alternate": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseValues"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "object"
                      },
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "keys"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "object"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "values"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @since 0.1.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @see keys, valuesIn\n * @example\n *\n * function Foo() {\n *   this.a = 1\n *   this.b = 2\n * }\n *\n * Foo.prototype.c = 3\n *\n * values(new Foo)\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * values('hi')\n * // => ['h', 'i']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/without.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseDifference"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseDifference.js",
            "raw": "'./.internal/baseDifference.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLikeObject.js",
            "raw": "'./isArrayLikeObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "without"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "array"
            },
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "values"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "isArrayLikeObject"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      }
                    ]
                  },
                  "consequent": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "baseDifference"
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "array"
                      },
                      {
                        "type": "Identifier",
                        "name": "values"
                      }
                    ]
                  },
                  "alternate": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "without"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array excluding all given values using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * **Note:** Unlike `pull`, this method returns a new array.\n *\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...*} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see difference, union, unionBy, unionWith, xor, xorBy, xorWith\n * @example\n *\n * without([2, 1, 2, 3], 1, 2)\n * // => [3]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/words.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "unicodeWords"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/unicodeWords.js",
            "raw": "'./.internal/unicodeWords.js'"
          }
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "hasUnicodeWord"
              },
              "init": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "RegExp"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "prototype"
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "test"
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "bind"
                  }
                },
                "arguments": [
                  {
                    "type": "Literal",
                    "value": {},
                    "raw": "/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/",
                    "regex": {
                      "pattern": "[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]",
                      "flags": ""
                    }
                  }
                ]
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "VariableDeclaration",
          "declarations": [
            {
              "type": "VariableDeclarator",
              "id": {
                "type": "Identifier",
                "name": "reAsciiWord"
              },
              "init": {
                "type": "Literal",
                "value": {},
                "raw": "/[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g",
                "regex": {
                  "pattern": "[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+",
                  "flags": "g"
                }
              }
            }
          ],
          "kind": "const"
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "asciiWords"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "string"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "match"
                    }
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "reAsciiWord"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "words"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "string"
            },
            {
              "type": "Identifier",
              "name": "pattern"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "pattern"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "VariableDeclaration",
                      "declarations": [
                        {
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "result"
                          },
                          "init": {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "hasUnicodeWord"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "string"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "unicodeWords"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "string"
                                }
                              ]
                            },
                            "alternate": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "asciiWords"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "string"
                                }
                              ]
                            }
                          }
                        }
                      ],
                      "kind": "const"
                    },
                    {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "LogicalExpression",
                        "operator": "||",
                        "left": {
                          "type": "Identifier",
                          "name": "result"
                        },
                        "right": {
                          "type": "ArrayExpression",
                          "elements": []
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "LogicalExpression",
                  "operator": "||",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "string"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "match"
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "pattern"
                      }
                    ]
                  },
                  "right": {
                    "type": "ArrayExpression",
                    "elements": []
                  }
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "words"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "* Used to match words composed of alphanumeric characters. "
        },
        {
          "type": "Block",
          "value": "*\n * Splits `string` into an array of its words.\n *\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * words('fred, barney, & pebbles')\n * // => ['fred', 'barney', 'pebbles']\n *\n * words('fred, barney, & pebbles', /[^, ]+/g)\n * // => ['fred', 'barney', '&', 'pebbles']\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/xor.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseXor"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseXor.js",
            "raw": "'./.internal/baseXor.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLikeObject.js",
            "raw": "'./isArrayLikeObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "xor"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "arrays"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseXor"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "filter"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "isArrayLikeObject"
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "xor"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of unique values that is the\n * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)\n * of the given arrays. The order of result values is determined by the order\n * they occur in the arrays.\n *\n * @since 2.4.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @returns {Array} Returns the new array of filtered values.\n * @see difference, union, unionBy, unionWith, without, xorBy, xorWith\n * @example\n *\n * xor([2, 1], [2, 3])\n * // => [1, 3]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/xorBy.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseXor"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseXor.js",
            "raw": "'./.internal/baseXor.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLikeObject.js",
            "raw": "'./isArrayLikeObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "last"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./last.js",
            "raw": "'./last.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "xorBy"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "arrays"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "iteratee"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "last"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrays"
                        }
                      ]
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "IfStatement",
                "test": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isArrayLikeObject"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    }
                  ]
                },
                "consequent": {
                  "type": "BlockStatement",
                  "body": [
                    {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "iteratee"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      }
                    }
                  ]
                },
                "alternate": null
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseXor"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "filter"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "isArrayLikeObject"
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "xorBy"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `xor` except that it accepts `iteratee` which is\n * invoked for each element of each `arrays` to generate the criterion by\n * which they're compared. The order of result values is determined\n * by the order they occur in the arrays. The iteratee is invoked with one\n * argument: (value).\n *\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} iteratee The iteratee invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @see difference, union, unionBy, unionWith, without, xor, xorWith\n * @example\n *\n * xorBy([2.1, 1.2], [2.3, 3.4], Math.floor)\n * // => [1.2, 3.4]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/xorWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseXor"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseXor.js",
            "raw": "'./.internal/baseXor.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "isArrayLikeObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./isArrayLikeObject.js",
            "raw": "'./isArrayLikeObject.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "last"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./last.js",
            "raw": "'./last.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "xorWith"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "arrays"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "comparator"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "last"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "arrays"
                        }
                      ]
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "comparator"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "comparator"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "comparator"
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseXor"
                  },
                  "arguments": [
                    {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "filter"
                        }
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "isArrayLikeObject"
                        }
                      ]
                    },
                    {
                      "type": "Identifier",
                      "name": "undefined"
                    },
                    {
                      "type": "Identifier",
                      "name": "comparator"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "xorWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `xor` except that it accepts `comparator` which is\n * invoked to compare elements of `arrays`. The order of result values is\n * determined by the order they occur in the arrays. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @see difference, union, unionBy, unionWith, without, xor, xorBy\n * @example\n *\n * const objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n * const others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }]\n *\n * xorWith(objects, others, isEqual)\n * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/zip.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "unzip"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./unzip.js",
            "raw": "'./unzip.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "zip"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "arrays"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "unzip"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "arrays"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "zip"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * Creates an array of grouped elements, the first of which contains the\n * first elements of the given arrays, the second of which contains the\n * second elements of the given arrays, and so on.\n *\n * @since 0.1.0\n * @category Array\n * @param {...Array} [arrays] The arrays to process.\n * @returns {Array} Returns the new array of grouped elements.\n * @see unzip, unzipWith, zipObject, zipObjectDeep, zipWith\n * @example\n *\n * zip(['a', 'b'], [1, 2], [true, false])\n * // => [['a', 1, true], ['b', 2, false]]\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/zipObject.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "assignValue"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/assignValue.js",
            "raw": "'./.internal/assignValue.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseZipObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseZipObject.js",
            "raw": "'./.internal/baseZipObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "zipObject"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "props"
            },
            {
              "type": "Identifier",
              "name": "values"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseZipObject"
                  },
                  "arguments": [
                    {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "Identifier",
                        "name": "props"
                      },
                      "right": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    },
                    {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "Identifier",
                        "name": "values"
                      },
                      "right": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "assignValue"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "zipObject"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @see unzip, unzipWith, zip, zipObjectDeep, zipWith\n * @example\n *\n * zipObject(['a', 'b'], [1, 2])\n * // => { 'a': 1, 'b': 2 }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/zipObjectDeep.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseSet"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseSet.js",
            "raw": "'./.internal/baseSet.js'"
          }
        },
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "baseZipObject"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./.internal/baseZipObject.js",
            "raw": "'./.internal/baseZipObject.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "zipObjectDeep"
          },
          "params": [
            {
              "type": "Identifier",
              "name": "props"
            },
            {
              "type": "Identifier",
              "name": "values"
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "baseZipObject"
                  },
                  "arguments": [
                    {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "Identifier",
                        "name": "props"
                      },
                      "right": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    },
                    {
                      "type": "LogicalExpression",
                      "operator": "||",
                      "left": {
                        "type": "Identifier",
                        "name": "values"
                      },
                      "right": {
                        "type": "ArrayExpression",
                        "elements": []
                      }
                    },
                    {
                      "type": "Identifier",
                      "name": "baseSet"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "zipObjectDeep"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `zipObject` except that it supports property paths.\n *\n * @since 4.1.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @see unzip, unzipWith, zip, zipObject, zipWith\n * @example\n *\n * zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2])\n * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }\n "
        }
      ]
    }
  },
  {
    "filePath": "./projects/lodash/zipWith.js",
    "ast": {
      "type": "Program",
      "body": [
        {
          "type": "ImportDeclaration",
          "specifiers": [
            {
              "type": "ImportDefaultSpecifier",
              "local": {
                "type": "Identifier",
                "name": "unzipWith"
              }
            }
          ],
          "source": {
            "type": "Literal",
            "value": "./unzipWith.js",
            "raw": "'./unzipWith.js'"
          }
        },
        {
          "type": "FunctionDeclaration",
          "id": {
            "type": "Identifier",
            "name": "zipWith"
          },
          "params": [
            {
              "type": "RestElement",
              "argument": {
                "type": "Identifier",
                "name": "arrays"
              }
            }
          ],
          "body": {
            "type": "BlockStatement",
            "body": [
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "arrays"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      }
                    }
                  }
                ],
                "kind": "const"
              },
              {
                "type": "VariableDeclaration",
                "declarations": [
                  {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "iteratee"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": ">",
                        "left": {
                          "type": "Identifier",
                          "name": "length"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 1,
                          "raw": "1"
                        }
                      },
                      "consequent": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "arrays"
                        },
                        "property": {
                          "type": "BinaryExpression",
                          "operator": "-",
                          "left": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 1,
                            "raw": "1"
                          }
                        }
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "undefined"
                      }
                    }
                  }
                ],
                "kind": "let"
              },
              {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "iteratee"
                  },
                  "right": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "==",
                      "left": {
                        "type": "UnaryExpression",
                        "operator": "typeof",
                        "argument": {
                          "type": "Identifier",
                          "name": "iteratee"
                        },
                        "prefix": true
                      },
                      "right": {
                        "type": "Literal",
                        "value": "function",
                        "raw": "'function'"
                      }
                    },
                    "consequent": {
                      "type": "SequenceExpression",
                      "expressions": [
                        {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "computed": false,
                            "object": {
                              "type": "Identifier",
                              "name": "arrays"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "pop"
                            }
                          },
                          "arguments": []
                        },
                        {
                          "type": "Identifier",
                          "name": "iteratee"
                        }
                      ]
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "undefined"
                    }
                  }
                }
              },
              {
                "type": "ReturnStatement",
                "argument": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "unzipWith"
                  },
                  "arguments": [
                    {
                      "type": "Identifier",
                      "name": "arrays"
                    },
                    {
                      "type": "Identifier",
                      "name": "iteratee"
                    }
                  ]
                }
              }
            ]
          },
          "generator": false,
          "expression": false,
          "async": false
        },
        {
          "type": "ExportDefaultDeclaration",
          "declaration": {
            "type": "Identifier",
            "name": "zipWith"
          }
        }
      ],
      "sourceType": "module",
      "comments": [
        {
          "type": "Block",
          "value": "*\n * This method is like `zip` except that it accepts `iteratee` to specify\n * how grouped values should be combined. The iteratee is invoked with the\n * elements of each group: (...group).\n *\n * @since 3.8.0\n * @category Array\n * @param {...Array} [arrays] The arrays to process.\n * @param {Function} iteratee The function to combine\n *  grouped values.\n * @returns {Array} Returns the new array of grouped elements.\n * @see unzip, unzipWith, zip, zipObject, zipObjectDeep, zipWith\n * @example\n *\n * zipWith([1, 2], [10, 20], [100, 200], (a, b, c) => a + b + c)\n * // => [111, 222]\n "
        }
      ]
    }
  }
]